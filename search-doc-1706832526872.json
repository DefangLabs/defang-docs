{"searchDocs":[{"title":"Announcing the Private Beta for the Defang Opinionated Platform","type":0,"sectionRef":"#","url":"/blog/announcement","content":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Cloud Providers","type":0,"sectionRef":"#","url":"/docs/concepts/cloud-providers","content":"Cloud Providers To the extent possible, Defang provisions resources that are native to the cloud provider you are using. For the moment, Defang is only available in our hosted beta for non-production workloads running on AWS. Services are deployed to AWS ECS and are exposed to the internet using AWS Application Load Balancers. info The aim for Defang V1 is that you should run it on your own cloud account. We plan to support a variety of cloud providers, starting with AWS.","keywords":"","version":"Next"},{"title":"Accounts","type":0,"sectionRef":"#","url":"/docs/concepts/accounts","content":"Accounts At the moment, Defang only allows authentication through GitHub. This means that you will need to have a GitHub account to use the system, but it also means that your GitHub username will be used as your Defang username. Your Defang username is used to group all your services and to generate domains for your services with the following structure: &lt;username&gt;-&lt;servicename&gt;--&lt;port&gt;.prod1.defang.dev info We plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future.","keywords":"","version":"Next"},{"title":"Compose","type":0,"sectionRef":"#","url":"/docs/concepts/compose","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#how-it-works","content":"When you bootstrap a project with the defang generate command, it will generate a docker-compose.yml file in the root of your project. This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services. When you run defang up, Defang will read your docker-compose.yml file and deploy the services named in that file to the cloud. ","version":"Next","tagName":"h2"},{"title":"Service Name Resolution​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#service-name-resolution","content":"One thing to keep in mind is that, at the time of this writing, Defang identifies services by the user/account name and the service name (as defined in the docker-compose.yml file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future. ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#configuration","content":"If you have a service that depends on a secret like an api key, you can set that secret using the CLI: defang secret set --name MY_API_KEY  and then connect it to the service by specifying it in the docker-compose.yml: services: my-service: secrets: - MY_API_KEY  ","version":"Next","tagName":"h2"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/concepts/configuration","content":"Configuration Defang allows you to configure your application using environment variables. You can set environment variables in your docker-compose.yml file, or in your Pulumi program. Using Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks. You can also use secrets to store sensitive information like API keys and database passwords.","keywords":"","version":"Next"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/docs/concepts/deployments","content":"Deployment When you deploy to Defang, whether it's with defang compose up or using a Pulumi program, Defang will build your services in the cloud and manage the deployment process for you. If you provide a Dockerfile and build context, Defang will upload the files found within the context, build the image, and store it in the cloud provider's container registry. Defang will also make sure to get your new service up and running before deprovisioning any old services so you don't have to worry about downtime.","keywords":"","version":"Next"},{"title":"Observability","type":0,"sectionRef":"#","url":"/docs/concepts/observability","content":"","keywords":"","version":"Next"},{"title":"Tail​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#tail","content":"The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service. defang tail --name my-service defang tail --etag ua119053ehi2  ","version":"Next","tagName":"h2"},{"title":"Pulumi","type":0,"sectionRef":"#","url":"/docs/concepts/pulumi","content":"","keywords":"","version":"Next"},{"title":"Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#provider","content":"To get started with Pulumi and Defang you will need to install the Defang provider: npmpnpmyarn npm i @pulumi/pulumi  ","version":"Next","tagName":"h2"},{"title":"Sample​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#sample","content":"The following is a minimal example of a Pulumi program that defines a Defang service: import * as defang from &quot;@defang-io/pulumi-defang/lib&quot;; const service = new defang.DefangService(&quot;my-service&quot;, { image: &quot;strm/helloworld-http:latest&quot;, ports: [{ target: 80, mode: &quot;ingress&quot;, protocol: &quot;http&quot;, }], });  ","version":"Next","tagName":"h2"},{"title":"Portal","type":0,"sectionRef":"#","url":"/docs/concepts/portal","content":"Portal You can log into the Defang portal at portal.defang.dev to view the state of your Defang services running on the hosted Defang platform for non-production applications. You can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. info We will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, but we're working on it!","keywords":"","version":"Next"},{"title":"Secrets","type":0,"sectionRef":"#","url":"/docs/concepts/secrets","content":"","keywords":"","version":"Next"},{"title":"Connecting Services​","type":1,"pageTitle":"Secrets","url":"/docs/concepts/secrets#connecting-services","content":"If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi. ","version":"Next","tagName":"h2"},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/concepts/services","content":"Services At the moment, all services deployed with Defang are containerized. This means that you can use any container image from Docker Hub or any other container registry, including private registries. You can also use a local Dockerfile: when you run defang compose up or run your Pulumi program, Defang will package your application source and upload it to the cloud to run the build process. info While this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions.","keywords":"","version":"Next"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/docs/faq","content":"","keywords":"","version":"Next"},{"title":"Which cloud/region is the app being deployed to?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#which-cloudregion-is-the-app-being-deployed-to","content":"Currently we are deploying to AWS us-west-2. ","version":"Next","tagName":"h3"},{"title":"Can I bring my own AWS or other cloud account?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-bring-my-own-aws-or-other-cloud-account","content":"With the current release, which is designed for customers to try out the Defang model with non-production apps, your apps are deployed to Defang’s AWS account. We are working on bring-your-own-account for an upcoming release. ","version":"Next","tagName":"h3"},{"title":"On AWS, can I deploy to services such as EC2, EKS, or Lambda?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#on-aws-can-i-deploy-to-services-such-as-ec2-eks-or-lambda","content":"The current release includes support for containers only, deployed to ECS. Future releases shall include support for Lambda, EC2 etc. Using our Pulumi provider, it is possible to combine Defang services with other native AWS resources. ","version":"Next","tagName":"h3"},{"title":"Can I access AWS storage services such as S3 or database services such as RDS ? How?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-access-aws-storage-services-such-as-s3-or-database-services-such-as-rds--how","content":"Yes, you can access any storage service from the underlying cloud platform (AWS) or from a remote database service. To secure access from your Defang services, you should use our published public IPs in your AWS security group or IP allow list. ","version":"Next","tagName":"h3"},{"title":"Do you plan to support other clouds?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#do-you-plan-to-support-other-clouds","content":"While we currently deploy to AWS, the Defang model is designed to be inherently portable. We plan to support other clouds in future releases. ","version":"Next","tagName":"h3"},{"title":"Can I run production apps on DOP?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-run-production-apps-on-dop","content":"The current release of DOP is meant for testing and trial purposes only. Deployment of productions apps is not supported and explicitly disallowed by the Terms and Conditions. ","version":"Next","tagName":"h3"},{"title":"Resources","type":0,"sectionRef":"#","url":"/docs/concepts/resources","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#examples","content":"","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#docker-compose","content":"services: gpu-service: scale: 3 deploy: resources: reservations: cpus: '1.0' memory: 2048M devices: - capabilities: [&quot;gpu&quot;]  ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#pulumi","content":"const service = new defang.DefangService(&quot;gpu-service&quot;, { deploy: { replicas: 3, resources: { reservations: { cpu: 1.0, memory: 2048, devices: [{capabilities: ['gpu']}] } } } });  ","version":"Next","tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Install the CLI​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#install-the-cli","content":"Download the CLI appropriate for your system from https://github.com/defang-io/defang/releases/latest. ","version":"Next","tagName":"h3"},{"title":"Authenticate with Defang​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#authenticate-with-defang","content":"defang login  ","version":"Next","tagName":"h3"},{"title":"Build and Deploy a Service​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#build-and-deploy-a-service","content":"Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more details: Generate new code using AIDeploy code using the CLIDeploy container using the CLIDeploy using Pulumi ","version":"Next","tagName":"h3"},{"title":"Monitor a Service​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#monitor-a-service","content":"By default, all the output (stdout and stderr) from your app is routed through the Defang log cluster. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service. From the CLI: defang tail --name service1 From the Defang portal: https://portal.defang.dev/ ","version":"Next","tagName":"h3"},{"title":"Upgrade a Service​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#upgrade-a-service","content":"To upgrade your app (for example, updating the base image of your container) you can run the update command and it will build and deploy the latest version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped. ","version":"Next","tagName":"h3"},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is the Defang Opinionated Platform (DOP)?​","type":1,"pageTitle":"Overview","url":"/docs/intro#what-is-the-defang-opinionated-platform-dop","content":"The Defang Opinionated Platform (DOP) is a radically simpler way to build, deploy, and optimize production-ready cloud apps. The DOP is a serverless platform that lets you quickly build your application in the language of your choice and deploy it to the cloud with a single command. The DOP CLI includes an AI-driven assistant that translates natural language prompts to a starting point for your project that you can then refine. Once you publish your code, the DOP automatically builds your project and deploys it to a pre-provisioned environment in the cloud, taking care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually trip up the average cloud developer. ","version":"Next","tagName":"h3"},{"title":"Details​","type":1,"pageTitle":"Overview","url":"/docs/intro#details","content":"The DOP provides a unified experience to develop, deploy, run, observe, and optimize your cloud applications. The DOP includes the following: Support for various types of applications: Web services and APIs, mobile app backends, ML services, etc.Support for your programming language of choice: Node.js, Python, Golang, etc.Built-in AI assistant to go from natural language prompt to a skeleton projectAutomated build directly from your source codeSupport for pre-built Docker containers, from public or private image registriesAbility to express your project configuration using a Docker Compose YAML filePre-configured production environment with built-in networking, security, and observabilityOne-command deploy to your production environmentSupport for GPUsSupport for Infra-as-Code via a Pulumi providerSupport for any cloud storage in the underlying cloud or any remote database serviceBuilt-in observability through hierarchical logging ","version":"Next","tagName":"h3"},{"title":"Samples","type":0,"sectionRef":"#","url":"/docs/samples","content":"","keywords":"","version":"Next"},{"title":"Basic Service​","type":1,"pageTitle":"Samples","url":"/docs/samples#basic-service","content":".css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang This sample shows you how to get started with Defang. It demonstrates how to deploy one of the most basic type of services you can run on Defang: a simple web server that returns the contents of the request. ","version":"Next","tagName":"h2"},{"title":"AI-ML Music Recommendations​","type":1,"pageTitle":"Samples","url":"/docs/samples#ai-ml-music-recommendations","content":".css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: Python An AI-driven music recommendation system. This example demonstrates how to request GPUs for your Defang services: services: service1: deploy: resources: reservations: devices: - capabilities: [&quot;gpu&quot;]  ","version":"Next","tagName":"h2"},{"title":"AWS S3​","type":1,"pageTitle":"Samples","url":"/docs/samples#aws-s3","content":".css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang This sample shows you how to upload and download files from AWS S3 using Defang. It demonstrates how to configure services that require secrets using the defang secrets set command. ","version":"Next","tagName":"h2"},{"title":"ChatGPT API​","type":1,"pageTitle":"Samples","url":"/docs/samples#chatgpt-api","content":".css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang This sample shows you how to build a simple service using the OpenAI Chat Completions API. It also demonstrates how to configure services that require secrets using the defang secrets set command. ","version":"Next","tagName":"h2"},{"title":"Fetch and return JSON​","type":1,"pageTitle":"Samples","url":"/docs/samples#fetch-and-return-json","content":".css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang This sample shows you how to build a basic service that interacts with and api and returns some JSON. ","version":"Next","tagName":"h2"},{"title":"Webpage and Form Post​","type":1,"pageTitle":"Samples","url":"/docs/samples#webpage-and-form-post","content":".css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang This sample shows you how to build a simple website with a form that posts to a backend service. ","version":"Next","tagName":"h2"},{"title":"Deploy code using the CLI","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-code-using-the-cli","content":"Deploy code using the CLI This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder. Step 1 - Docker Compose If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this: version: '3.9' services: service1: build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 3000 Step 2 - Deploy defang compose up --tail ","keywords":"","version":"Next"},{"title":"Deploy container using the CLI","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-container-using-the-cli","content":"Deploy container using the CLI This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang. Step 1 - Docker Compose If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this: version: '3.9' services: service1: # This is just an example, replace with the image you want image: &quot;docker.io/nginx:latest&quot; ports: - mode: ingress target: 3000 Step 2 - Deploy defang compose up --tail ","keywords":"","version":"Next"},{"title":"Deploy using Pulumi","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-using-pulumi","content":"Deploy using Pulumi TODO: Write this section ... By default, Pulumi will not touch the deployment if nothing has changed. Set forceNewDeployment: true to instruct Pulumi to force the re-deployment of the service.","keywords":"","version":"Next"},{"title":"Generate new code using AI","type":0,"sectionRef":"#","url":"/docs/tutorials/generate-new-code-using-ai","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Create a new folder for the project​","type":1,"pageTitle":"Generate new code using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-1---create-a-new-folder-for-the-project","content":"mkdir service1 cd service1  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Use the CLI generate command​","type":1,"pageTitle":"Generate new code using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-2---use-the-cli-generate-command","content":"defang login defang generate ? Choose the language you'd like to use: [Use arrows to move, type to filter] &gt; Nodejs Golang Python ? Please describe the service you'd like to build: A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.  This will generate the different files required to start your project based on your prompt and the language selected. ","version":"Next","tagName":"h2"},{"title":"Step 3 - Review the Code​","type":1,"pageTitle":"Generate new code using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-3---review-the-code","content":"You can open the files in a code editor to review or make changes as needed before deploying the service. ","version":"Next","tagName":"h2"},{"title":"Step 4 - Deploy​","type":1,"pageTitle":"Generate new code using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-4---deploy","content":"defang compose up --tail  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}