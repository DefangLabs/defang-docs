"use strict";(self.webpackChunkdefang_docs=self.webpackChunkdefang_docs||[]).push([[1809],{1699:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var i=s(4848),r=s(8453);const t={title:"Scaling",description:"Defang can help you handle service irregular loads.",sidebar_position:375},l="Scaling",a={id:"concepts/scaling",title:"Scaling",description:"Defang can help you handle service irregular loads.",source:"@site/docs/concepts/scaling.md",sourceDirName:"concepts",slug:"/concepts/scaling",permalink:"/docs/concepts/scaling",draft:!1,unlisted:!1,editUrl:"https://github.com/DefangLabs/defang-docs/tree/main/docs/concepts/scaling.md",tags:[],version:"current",sidebarPosition:375,frontMatter:{title:"Scaling",description:"Defang can help you handle service irregular loads.",sidebar_position:375},sidebar:"docsSidebar",previous:{title:"Resources",permalink:"/docs/concepts/resources"},next:{title:"Leveraging Managed Language Models with Defang",permalink:"/docs/concepts/managed-llms/managed-language-models"}},c={},o=[{value:"Why Scale?",id:"why-scale",level:2},{value:"Types of Scaling",id:"types-of-scaling",level:2},{value:"Auto-Scaling",id:"auto-scaling",level:2},{value:"Example",id:"example",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Supported Platforms",id:"supported-platforms",level:3},{value:"Benefits of Auto-Scaling",id:"benefits-of-auto-scaling",level:3},{value:"Considerations",id:"considerations",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"scaling",children:"Scaling"}),"\n",(0,i.jsx)(n.p,{children:"Scaling is the process of adjusting the number of instances (or replicas) of a service to meet the current demand. Services that receive requests\u2014such as APIs, workers, or background jobs\u2014can be scaled up or down to optimize performance, availability, and cost."}),"\n",(0,i.jsx)(n.p,{children:"Scaling is a core concept in distributed systems and cloud-native applications. It ensures your system can handle varying workloads without degrading user experience or over-provisioning resources."}),"\n",(0,i.jsx)(n.h2,{id:"why-scale",children:"Why Scale?"}),"\n",(0,i.jsx)(n.p,{children:"Scaling enables services to respond effectively under different conditions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High Traffic"}),": When demand spikes, scaling up ensures your service can process more requests in parallel."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost Optimization"}),": Scaling down during periods of low demand helps reduce unnecessary resource usage and cloud costs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fault Tolerance"}),": Multiple instances of a service provide redundancy in case of instance failure."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Throughput & Latency"}),": Additional instances can reduce response times and increase the number of operations your service can perform per second."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-scaling",children:"Types of Scaling"}),"\n",(0,i.jsx)(n.p,{children:"There are two main ways to scale a service:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Horizontal Scaling"}),": Adds or removes instances of a service. This is the most common approach for stateless services."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vertical Scaling"}),": Increases or decreases the resources (CPU, memory) available to a single instance."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In most modern deployments, horizontal scaling is preferred because it aligns well with cloud-native principles and is easier to automate and distribute."}),"\n",(0,i.jsx)(n.h2,{id:"auto-scaling",children:"Auto-Scaling"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Auto-scaling"})," refers to automatically adjusting the number of service instances based on defined policies or metrics."]}),"\n",(0,i.jsx)(n.p,{children:"Instead of manually adding more instances when traffic increases, an auto-scaling system watches key indicators (like CPU usage) and takes action in real time."}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["With Defang a user, with a Pro and higher plan, can enable service level autoscaling by adding a ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"x-defang-autoscaling"})})," extension to the service which is to be autoscaled."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"services:\n  service-example:\n    x-defang-autoscaling: true #enable autoscaling for this service\n    build: \n       context: .\n       dockerfile: Dockerfile\n    ports: \n        - mode: ingress\n        target: 8080\n        published: 8080\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:"Auto-scaling systems typically rely on:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metrics Collection"}),": Real-time monitoring of system metrics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scaling Policies"}),": Rules that define when to scale up or down. For example:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If average CPU > 85% for 5 minutes \u2192 scale up by 2 instances."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cooldown Periods"}),": Delays between scaling events to prevent rapid, repeated changes (flapping)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Platform"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Auto-Scaling Support"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Playground"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"AWS"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DigitalOcean"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GCP"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"benefits-of-auto-scaling",children:"Benefits of Auto-Scaling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Elasticity"}),": Automatically adapts to changing workloads."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resilience"}),": Helps maintain performance during traffic surges or partial outages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficiency"}),": Reduces the need for manual intervention or over-provisioning."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"considerations",children:"Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure services are ",(0,i.jsx)(n.strong,{children:"stateless"})," or use ",(0,i.jsx)(n.strong,{children:"externalized state"})," (e.g., databases, caches) for smooth scaling. (",(0,i.jsx)(n.a,{href:"https://12factor.net/processes",children:"12 Factor App"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Test services under load to identify scaling bottlenecks."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See Tutorial page ",(0,i.jsx)(n.a,{href:"/docs/tutorials/scaling-your-services",children:"Scaling Tutorial"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);