"use strict";(self.webpackChunkdefang_docs=self.webpackChunkdefang_docs||[]).push([[4039],{28453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>s});var l=n(96540);const t={},c=l.createContext(t);function a(e){const o=l.useContext(c);return l.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),l.createElement(c.Provider,{value:o},e.children)}},82199:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>r});const l=JSON.parse('{"id":"concepts/local-development","title":"Local Development","description":"Deploying a different configuration than you develop with locally","source":"@site/docs/concepts/local-development.md","sourceDirName":"concepts","slug":"/concepts/local-development","permalink":"/docs/concepts/local-development","draft":false,"unlisted":false,"editUrl":"https://github.com/DefangLabs/defang-docs/tree/main/docs/concepts/local-development.md","tags":[],"version":"current","frontMatter":{"title":"Local Development","description":"Deploying a different configuration than you develop with locally","sidebar-position":800},"sidebar":"docsSidebar","previous":{"title":"Generate","permalink":"/docs/concepts/generate"},"next":{"title":"Using Managed LLMs","permalink":"/docs/concepts/managed-llms/managed-language-models"}}');var t=n(74848),c=n(28453);const a={title:"Local Development",description:"Deploying a different configuration than you develop with locally","sidebar-position":800},s="Local Development",i={},r=[{value:"<code>compose.local.yaml</code>",id:"composelocalyaml",level:2}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"local-development",children:"Local Development"})}),"\n",(0,t.jsx)(o.p,{children:"While Defang encourages using a single compose file, there are times when it is more convenient to use different files for different environments. For example, if some services should be configured differently locally: maybe you want to mount your working directory as a volume for live-reloading, or you want to build a different container image for local development. Another reason may be that you have some local services, like an auth mock or a local webhook listener that you don't want to deploy to the cloud."}),"\n",(0,t.jsx)(o.h2,{id:"composelocalyaml",children:(0,t.jsx)(o.code,{children:"compose.local.yaml"})}),"\n",(0,t.jsxs)(o.p,{children:["In these cases, Defang recommends creating a file like ",(0,t.jsx)(o.code,{children:"compose.local.yaml"})," which extends service definitions from your primary ",(0,t.jsx)(o.code,{children:"compose.yaml"})," file."]}),"\n",(0,t.jsx)(o.p,{children:"For example,"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:"# compose.yaml\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n"})}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:"# compose.local.yaml\nservices:\n  app:\n    extends:\n      file: compose.yaml\n      service: app\n    build:\n      context: .\n      dockerfile: local.Dockerfile\n    volumes:\n      - .:/web\n  local_service:\n    image: myservice:latest\n"})}),"\n",(0,t.jsx)(o.p,{children:"This configuration can then be launched locally with"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{children:"docker compose -f compose.local.yaml\n"})}),"\n",(0,t.jsx)(o.p,{children:"And the primary compose file can be deployed to the cloud with"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{children:"defang compose up\n"})}),"\n",(0,t.jsxs)(o.p,{children:["See our ",(0,t.jsx)(o.a,{href:"https://defang.io/blog/post/add-defang-to-your-developer-environments-instantly",children:"blog post on Dev Containers and Codespaces"})," for more information on getting set up in those environments."]})]})}function p(e={}){const{wrapper:o}={...(0,c.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);