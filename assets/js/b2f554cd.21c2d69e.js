"use strict";(self.webpackChunkdefang_docs=self.webpackChunkdefang_docs||[]).push([[5894],{76042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2025/05/09/april-product-updates","metadata":{"permalink":"/blog/2025/05/09/april-product-updates","source":"@site/blog/2025-05-09-april-product-updates.md","title":"April 2025 Defang Compose Update","description":"Monthly product updates from the Defang team - April 2024","date":"2025-05-09T00:00:00.000Z","formattedDate":"May 9, 2025","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"MCP","permalink":"/blog/tags/mcp"},{"label":"LLMs","permalink":"/blog/tags/ll-ms"},{"label":"Vibe Deploying","permalink":"/blog/tags/vibe-deploying"},{"label":"GCP","permalink":"/blog/tags/gcp"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"Events","permalink":"/blog/tags/events"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"April 2025 Defang Compose Update","description":"Monthly product updates from the Defang team - April 2024","tags":["Cloud","NoDevOps","BYOC","MCP","LLMs","Vibe Deploying","GCP","AWS","Events","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"nextItem":{"title":"Welcome to the world of \\"Vibe Deploy\\": Easily Deploying your Vibe Coding Projects to the Cloud with Defang","permalink":"/blog/2025/04/23/vibe-deploy"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nApril flew by with big momentum at Defang. From deeper investments in the **Model Context Protocol** (MCP), to deploying LLM-based inferencing apps, to live demos of **Vibe Deploying**, we\'re making it easier than ever to go from idea to cloud.\\n\\n## MCP + Vibe Deploying\\n\\nThis month we focused on making cloud deployments as easy as writing a prompt. Our latest Vibe Deploying [blog](https://docs.defang.io/blog?_gl=1*1wbnk1m*_ga*MTM4MTE5ODI4NC4xNzQ0MDU0NDMz*_ga_QVJVWN44CW*czE3NDY3NDQwNDckbzQ3JGcxJHQxNzQ2NzQ0NzUzJGowJGwwJGgw) shows how you can launch full-stack apps right from your IDE just by chatting.\\n\\nWhether you\'re working in **Cursor**, **Windsurf**, **VS Code**, or **Claude**, Defang\'s **MCP** integration lets you deploy to the cloud just as easily as conversing with the AI to generate your app. For more details, check out the docs for the [Defang Model Context Protocol Server](https://docs.defang.io/docs/concepts/mcp) \u2013 it explains how it works, how to use it, and why it\'s a game changer for deploying to the cloud. You can also watch our tutorials for [Cursor](https://youtu.be/Aicqp9QQdwk?si=h891XNIN_f_U2-fX), [Windsurf](https://youtu.be/QU4q1eULs1I?si=nmSrXLqHtHRRlCVb), and [VS Code](https://youtu.be/k8NbeKKzqiI?si=BxDNJOw_zHnL433w).\\n\\n## Managed LLMs\\n\\nLast month we shipped the [`x-defang-llm` compose service extension](https://docs.defang.io/docs/concepts/managed-llms/managed-language-models) to easily deploy inferencing apps that use managed LLM services such as AWS Bedrock. This month, we\'re excited to announce the same support for GCP Vertex AI \u2013 give it a try and let us know your feedback!\\n\\n## Events and Programs\\n\\nOn [**April 28**](https://www.linkedin.com/posts/defanglabs_defang-vibecoding-vancouverdev-activity-7323769706681655296-48OA?utm_source=share&utm_medium=member_desktop&rcm=ACoAACNoYXgBadWv4CWLbcKhgSGxWjdmu9e5dFI), we kicked things off with an epic night of demos, dev energy, and cloud magic at RAG & AI in Action. Our own **Kevin Vo** showed how fast and easy it is to deploy AI apps from Windsurf to the cloud using just the **Defang MCP**. The crowd got a front-row look at how **Vibe Deploying** turns cloud infra into a background detail.\\n\\nWe finished the month with our signature Defang Coffee Chat, a casual hangout with product updates, live Q&A, and great conversations with our community. Our Campus Advocates also hosted [workshops](https://www.linkedin.com/feed/update/urn:li:activity:7319584997319802880/) around the world, bringing Defang to new students and builders.\\n\\nWe wrapped up the month with our latest Defang Coffee Chat, featuring live demos, product updates, and a solid conversation around vibe deploying. Thanks to everyone who joined.\\n\\nThe next one is on May 21 at 10 AM PST. Save your spot [here](https://lu.ma/defang-may).\\n\\n## Looking Ahead\\n\\nHere\'s what\'s coming in May:\\n\\n- Web Summit Vancouver \u2013 Defang will be a [startup sponsor](https://vancouver.websummit.com/appearances/van25/c2ccbb40-9d0f-4fe4-8808-d02de1a15534/defang/), please come see us on the expo floor.\\n- More MCP tutorials and dev tools.\\n\\nLet\'s keep building. \ud83d\ude80"},{"id":"/2025/04/23/vibe-deploy","metadata":{"permalink":"/blog/2025/04/23/vibe-deploy","source":"@site/blog/2025-04-23-vibe-deploy.md","title":"Welcome to the world of \\"Vibe Deploy\\": Easily Deploying your Vibe Coding Projects to the Cloud with Defang","description":"Learn how to deploy your vibe coding projects to the Cloud with Defang\'s new MCP Server","date":"2025-04-23T00:00:00.000Z","formattedDate":"April 23, 2025","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"LLMs","permalink":"/blog/tags/ll-ms"},{"label":"VibeCoding","permalink":"/blog/tags/vibe-coding"},{"label":"MCP","permalink":"/blog/tags/mcp"},{"label":"DevTools","permalink":"/blog/tags/dev-tools"},{"label":"Docker","permalink":"/blog/tags/docker"},{"label":"Compose","permalink":"/blog/tags/compose"},{"label":"Cursor","permalink":"/blog/tags/cursor"},{"label":"Windsurf","permalink":"/blog/tags/windsurf"},{"label":"VSCode","permalink":"/blog/tags/vs-code"},{"label":"Claude","permalink":"/blog/tags/claude"}],"readingTime":2.385,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Welcome to the world of \\"Vibe Deploy\\": Easily Deploying your Vibe Coding Projects to the Cloud with Defang","description":"Learn how to deploy your vibe coding projects to the Cloud with Defang\'s new MCP Server","tags":["Cloud","NoDevOps","BYOC","CLI","AI","LLMs","VibeCoding","MCP","DevTools","Docker","Compose","Cursor","Windsurf","VSCode","Claude"],"author":"Defang Team","draft":false},"unlisted":false,"prevItem":{"title":"April 2025 Defang Compose Update","permalink":"/blog/2025/05/09/april-product-updates"},"nextItem":{"title":"March 2025 Defang Compose Update ","permalink":"/blog/2025/04/11/mar-product-updates"}},"content":"**\\"I\'m building a project, but it\'s not really coding. I just see stuff, say stuff, run stuff, and copy-paste stuff. And it mostly works.\\"**\\n\\n\u2013 [Andrej Karpathy](https://x.com/karpathy/status/1886192184808149383)\\n\\nWelcome to the world of **vibe coding**, an AI-assisted, intuition-driven way of building software. You do not spend hours reading diffs, organizing files, or hunting through documentation. You describe what you want, let the AI take a pass, and keep iterating until it works.\\n\\n**The Tools of Vibe Coding**\\n\\nVibe coding would not exist without a new generation of AI-first tools. Here are some of the platforms powering this new workflow.\\n\\n- [Cursor](https://cursor.com)\\n- [Windsurf](https://windsurf.com)\\n- [VS Code /](https://code.visualstudio.com/) [VS Code Insiders](https://code.visualstudio.com/insiders/)\\n- [Claude Desktop](https://claude.ai/download)\\n\\nWhile each has it\'s own strengths and weaknesses, they all support the basic vibe coding workflow described above.\\n\\n**Using Defang for \\"Vibe Deployment\\"**\\n\\nOnce your app runs locally with these vibe coding tools, the next question is: how do you get it live in the cloud so you can share it with the world?\\n\\nThat is where [**Defang**](https://defang.io/) comes in.\\n\\nDefang takes your app, as specified in your docker-compose.yml, and deploys it to the public cloud (AWS, GCP, or DigitalOcean) or the Defang Playground with a single command. It is already used by thousands of developers around the world to deploy their projects to the cloud.\\n\\n![Defang Vibe Deploy](/img/vibe-deploy/defang-vibe-deploy.png)\\n\\nAnd now with the [Defang MCP Server](https://docs.defang.io/docs/concepts/mcp), you can \\"vibe deploy\\" your project right from your favorite IDE! Once you have the Defang MCP Server installed (see instructions [here](https://docs.defang.io/docs/concepts/mcp)), just type in \\"deploy\\" (or any variation thereof) in the chat, it\'s that simple! It is built for hobbyists, vibe coders, fast-moving teams, and AI-powered workflows.\\n\\nCurrently, we support deployment to the Defang [Playground](https://docs.defang.io/docs/concepts/defang-playground) only, but we\'ll be adding deployment to public cloud soon.\\n\\n**How it works:**\\n\\n![Defang MCP Workflow](/img/vibe-deploy/defang-mcp-workflow.png)\\n\\nThe Defang MCP Server connects your coding editor (like VS Code or Cursor) with Defang\'s cloud tools, so you can ask your AI assistant to deploy your project just by typing a prompt. While natural language commands are by nature imprecise, the AI in your IDE translates that natural language prompt to a precise Defang command needed to deploy your application to the cloud. And your application also has a formal definition - the compose.yaml file - either something you wrote or the AI generated for you. So, the combination of a formal compose.yaml with a precise Defang command means that the resulting deployment is 100% deterministic and reliable. So the Defang MCP Server gives you the best of both worlds - the ease of use and convenience of natural language interaction with the AI, combined with the predictability and reliability of a deterministic deployment.\\n\\nWe are so excited to make Defang even more easy to use and accessible now to vibe coders. Give it a try and let us know what you think on our [Discord](http://s.defang.io/discord)!"},{"id":"/2025/04/11/mar-product-updates","metadata":{"permalink":"/blog/2025/04/11/mar-product-updates","source":"@site/blog/2025-04-11-mar-product-updates.md","title":"March 2025 Defang Compose Update ","description":"Monthly product updates from the Defang team - March 2025","date":"2025-04-11T00:00:00.000Z","formattedDate":"April 11, 2025","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"Postgres","permalink":"/blog/tags/postgres"},{"label":"GCP","permalink":"/blog/tags/gcp"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"LLMs","permalink":"/blog/tags/ll-ms"},{"label":"Autoscaling","permalink":"/blog/tags/autoscaling"}],"readingTime":3.04,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"March 2025 Defang Compose Update ","description":"Monthly product updates from the Defang team - March 2025","tags":["Cloud","NoDevOps","BYOC","Postgres","GCP","DigitalOcean","AWS","CLI","AI","LLMs","Autoscaling"],"author":"Defang Team","draft":false},"unlisted":false,"prevItem":{"title":"Welcome to the world of \\"Vibe Deploy\\": Easily Deploying your Vibe Coding Projects to the Cloud with Defang","permalink":"/blog/2025/04/23/vibe-deploy"},"nextItem":{"title":"Deploying a Django App with Real-time Moderation Using Defang","permalink":"/blog/2025/04/10/easiest-way-to-deploy-django"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nWow - another month has gone by, time flies when you\'re having fun!\\n\\nLet us share some important updates regarding what we achieved at Defang in March:\\n\\n**Managed LLMs:** One of the coolest features we have released in a bit is [support for Managed LLMs (such as AWS Bedrock) through the `x-defang-llm` compose service extension](https://docs.defang.io/docs/concepts/managed-llms/managed-language-models). When coupled with the `defang/openai-access-gateway` service image, Defang offers the easiest way to [migrate your OpenAI-compatible application to cloud-native managed LLMs](https://docs.defang.io/docs/tutorials/deploy-openai-apps) without making any changes to your code. Support for GCP and DigitalOcean coming soon.\\n\\n**Defang Pulumi Provider:** Last month, we announced a preview of the [Defang Pulumi Provider](https://github.com/DefangLabs/pulumi-defang), and this month we are excited to announce that V1 is now available in the [Pulumi Registry](https://www.pulumi.com/registry/packages/defang/). As much as we love Docker, we realize there are many real-world apps that have components that (currently) cannot be described completely in a Compose file. With the Defang Pulumi Provider, you can now leverage [the declarative simplicity of Defang with the imperative power of Pulumi](https://docs.defang.io/docs/concepts/pulumi#when-to-use-the-defang-pulumi-provider).\\n\\n**Production-readiness:** As we onboard more customers, we are fixing many fit-n-finish items:\\n\\n1. **Autoscaling:** Production apps need the ability to easily scale up and down with load, and so we\'ve added support for autoscaling. By adding the `x-defang-autoscaling: true` extension to your service definition in Compose.yaml file, you can benefit from automatic scale out to handle large loads and scale in when load is low. Learn more [here](https://docs.defang.io/docs/tutorials/scaling-your-services).\\n\\n2. **New** [CLI](https://github.com/DefangLabs/defang/releases)**:** We\'ve been busy making the CLI more powerful, secure, and intelligent.\\n   \u2022 Smarter Config Handling: The new --random flag simplifies setup by generating secure, random config values, removing the need for manual secret creation. Separately, automatic detection of sensitive data in Compose files helps prevent accidental leaks by warning you before they are deployed. Together, these features improve security and streamline your workflow.\\n   \u2022 Time-Bound Log Tailing: Need to investigate a specific window? Use tail --until to view logs up to a chosen time\u2014no more scrolling endlessly. Save time from sifting through irrelevant events and focus your investigation.\\n   \u2022 Automatic generation of a .dockerignore file for projects that don\'t already have one, saving you time and reducing image bloat. By excluding common unnecessary files\u2014like .git, node_modules, or local configs\u2014it helps keep your builds clean, fast, and secure right from the start, without needing manual setup.\\n\\n3. **Networking / Reduce costs:** We have implemented private networks, as mentioned in the official Compose specification. We have also reduced costs by eliminating the need for a pricy NAT Gateway in \\"development mode\\" deployments!\\n\\n### Events and Programs\\n\\nIn March, we had an incredible evening at the AWS Gen AI Loft in San Francisco! Our CTO and Co-founder [Lionello Lunesu](https://www.linkedin.com/in/lionello/) demoed how Defang makes deploying secure, scalable, production-ready containerized applications on AWS effortless. Check out the demo [here](https://youtu.be/C0MbB0-6mUk?si=6dEf3gIOmWe7pctK&t=1426)!\\n\\nWe also kicked off the [**Defang Campus Advocate Program**](https://defang.io/cap/), bringing together advocates from around the world. After launching the program in February, it was amazing to see the energy and momentum already building on campuses world-wide. Just as one example, check out [this post](https://www.linkedin.com/posts/akash-nath29_defang-backends-defang-activity-7314917342143029250-2_v8?utm_source=share&utm_medium=member_desktop&rcm=ACoAAAAQqiEBLsVLYYAzEmBFB9oIl31nQ7kDII0) from one of the students who attended a session hosted by our Campus Advocate [**Swapnendu Banerjee**](https://www.linkedin.com/in/swapnendu-banerjee-36ba06219/) and then went on to deploy his project with Defang. This is what we live for!\\n\\nWe wrapped up the month with our monthly Coffee Chat, featuring the latest Defang updates, live demos, and a conversation on vibe coding. Thanks to everyone who joined. The next one is on April 30. **Save your spot [here](https://lu.ma/r08oz3rl).**\\n\\nAs always, we appreciate your feedback and are committed to making Defang even better. Deploy any app to any cloud with a single command. Go build something awesome!"},{"id":"/2025/04/10/easiest-way-to-deploy-django","metadata":{"permalink":"/blog/2025/04/10/easiest-way-to-deploy-django","source":"@site/blog/2025-04-10-easiest-way-to-deploy-django.md","title":"Deploying a Django App with Real-time Moderation Using Defang","description":"<iframe style={{","date":"2025-04-10T00:00:00.000Z","formattedDate":"April 10, 2025","tags":[{"label":"deployment","permalink":"/blog/tags/deployment"},{"label":"django","permalink":"/blog/tags/django"},{"label":"docker","permalink":"/blog/tags/docker"},{"label":"compose","permalink":"/blog/tags/compose"}],"readingTime":3.63,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Deploying a Django App with Real-time Moderation Using Defang","author":"Defang Team","tags":["deployment","django","docker","compose"]},"unlisted":false,"prevItem":{"title":"March 2025 Defang Compose Update ","permalink":"/blog/2025/04/11/mar-product-updates"},"nextItem":{"title":"Deploying Defang with Defang: Part 2","permalink":"/blog/2025/03/26/deploying-defang-with-defang-part-2"}},"content":"<iframe style={{\\n  width: \\"100%\\",\\n  aspectRatio: 16/9,\\n}} src=\\"https://www.youtube.com/embed/edWas0ZIeHI?si=SHD8QYcGLLeuPQ6l\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n# Deploying a Django App with Real-time Moderation Using Defang\\n\\nIn this guide, we\'ll walk through the easiest and fastest way to deploy a full-featured Django application\u2014including real-time chat and background task processing\u2014to the cloud using Defang. You\'ll see firsthand how simple Defang makes it to deploy apps that require multiple services like web servers, background workers, Redis, and Postgres.\\n\\n## Clone the repo\\n\\nBefore we get started, you\'ll want to clone the repo with the app code, [here](https://github.com/DefangLabs/django-chat-demo).\\n\\n## Overview of Our Django Application\\n\\nWe\'re deploying a real-time chat application that includes automatic moderation powered by a background worker using the Natural Language Toolkit (NLTK). The application structure includes:\\n\\n- **Web Service**: Django app with chat functionality using Django Channels for real-time interactions.\\n- **Worker Service**: Background tasks processing messages for profanity and sentiment analysis.\\n- **Postgres Database**: Managed database instance for persistent storage.\\n- **Redis Broker**: Managed Redis instance serving as the broker for Celery tasks and Django Channels.\\n\\n## Running Locally\\n\\nTo run the app locally, we use Docker Compose, splitting configurations into two YAML files:\\n\\n- `compose.yaml`: Production configuration.\\n- `compose.dev.yaml`: Development overrides extending production.\\n\\nYou can quickly spin up the application locally with:\\n\\n```bash\\ndocker compose --env-file .env.dev -f compose.dev.yaml up --build\\n```\\n\\nThis runs things with autoreloading so you can iterate on the Django app, all while passing environment variables in the same way as we will with Defang\'s [secure configuration system](https://docs.defang.io/docs/concepts/configuration) and being ready to deploy to production.\\n\\n## Application Features\\n\\n### Real-time Chat\\nUsing Django Channels and Redis, users can engage in real-time conversations within chat rooms.\\n\\n### Background Moderation Tasks\\nThe worker service runs independently, handling moderation tasks asynchronously. It uses NLTK to:\\n- Check for profanity.\\n- Perform sentiment analysis.\\n- Automatically flag negative or inappropriate messages.\\n\\nThis decouples resource-intensive tasks from the main API server, ensuring optimal application responsiveness. The demo isn\'t doing anything very complicated, but you could easily run machine learning models [with access to GPUs](https://docs.defang.io/docs/tutorials/deploy-with-gpu) with Defang if you needed to.\\n\\n### Django Admin\\n\\nThe Django admin is setup to quickly visualize messages and their moderation status. Access it at `/admin` with your superuser credentials: username `admin` and password `admin` setup by default when you first run or deploy.\\n\\n\\n## Deploying with Defang\\n\\nDeploying multi-service applications to cloud providers traditionally involves complex infrastructure setup, including configuring ECS clusters, security groups, networking, and more. Defang simplifies this significantly.\\n\\n### Deploying to Defang Playground\\n\\nThe Defang Playground lets you quickly preview your deployed app in a managed environment.\\n\\n**Secure Configuration**\\n\\nBefore deploying, securely set encrypted sensitive values:\\n\\n```bash\\ndefang config set DJANGO_SECRET_KEY\\ndefang config set POSTGRES_PASSWORD\\n```\\n\\nThen run the deployment command:\\n\\n```bash\\ndefang compose up\\n```\\n\\nDefang automatically:\\n- Builds Docker containers.\\n- Sets up required services.\\n- Manages networking and provisioning.\\n\\nOnce deployed, your app is accessible via a public URL provided by Defang, which you can find in the CLI output or in our portal at [https://portal.defang.io](https://portal.defang.io)\\n\\n### Deploying to Your Own Cloud\\n\\nTo deploy directly into your AWS account (or other [supported providers](https://docs.defang.io/docs/category/providers)):\\n\\n1. Set your cloud provider:\\n> In my case, I use an AWS Profile, but you should be able to use [any methods supported by the AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\\n\\n```bash\\nexport DEFANG_PROVIDER=AWS\\nexport AWS_PROFILE=your-profile-name\\n```\\n\\n**Secure Configuration**\\n\\nBefore deploying, securely set encrypted sensitive values in your cloud account:\\n\\n```bash\\ndefang config set DJANGO_SECRET_KEY\\ndefang config set POSTGRES_PASSWORD\\n```\\n\\n2. Deploy:\\n\\n```bash\\ndefang compose up\\n```\\n\\nDefang handles provisioning managed services (RDS for Postgres, ElastiCache for Redis), container builds, and networking setup. Note: Initial provisioning for managed data stores might take a few minutes.\\n\\n## Cloud Deployment Results\\n\\nPost-deployment, your Django app infrastructure includes (among other things):\\n- **Managed Postgres**: AWS RDS instance.\\n- **Managed Redis**: AWS ElastiCache instance.\\n- **Containers**: ECS services with load balancers and DNS configured.\\n\\n## Why Use Defang?\\n\\nDefang simplifies complex cloud deployments by:\\n- Automatically provisioning managed cloud resources.\\n- Securely handling sensitive configurations.\\n- Providing seamless container orchestration without manual infrastructure setup.\\n\\n## Try It Yourself\\n\\nExplore deploying your Django applications effortlessly with Defang. The full source code for this example is available on [GitHub](https://github.com/DefangLabs/django-chat-demo). Feel free to give it a try, and let us know how it goes!\\n\\nHappy deploying!"},{"id":"/2025/03/26/deploying-defang-with-defang-part-2","metadata":{"permalink":"/blog/2025/03/26/deploying-defang-with-defang-part-2","source":"@site/blog/2025-03-26-deploying-defang-with-defang-part-2.md","title":"Deploying Defang with Defang: Part 2","description":"Defang Compose Update","date":"2025-03-26T00:00:00.000Z","formattedDate":"March 26, 2025","tags":[{"label":"defang-with-defang","permalink":"/blog/tags/defang-with-defang"},{"label":"deployment","permalink":"/blog/tags/deployment"},{"label":"defang-website","permalink":"/blog/tags/defang-website"}],"readingTime":3.565,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Deploying Defang with Defang: Part 2","author":"Defang Team","tags":["defang-with-defang","deployment","defang-website"]},"unlisted":false,"prevItem":{"title":"Deploying a Django App with Real-time Moderation Using Defang","permalink":"/blog/2025/04/10/easiest-way-to-deploy-django"},"nextItem":{"title":"February 2025 Defang Compose Update","permalink":"/blog/2025/03/15/feb-product-updates"}},"content":"![Defang Compose Update](/img/defang-on-defang/part-2/header.png)\\n\\nWhen we refreshed the Defang brand, we knew our website needed more than just a fresh coat of paint. It needed to become a more dynamic part of our stack. We needed some parts to be more flexible, some parts to be more interactive, and better aligned with how modern apps are organized and deployed. And what better way to take it there than to deploy it with Defang itself?\\n\\nThis is part of our ongoing \\"Defang on Defang\\" series, where we show how we\'re using our own tool to deploy all the services that power Defang. In this post, we\'re diving into how we turned our own website into a project to better understand how Defang can be used to deploy a dynamic Next.js apps and how we can improve the experience for developers.\\n\\n---\\n\\n## From S3 + CloudFront to Dynamic, Containerized Deployments\\n\\nOur original site was a Next.js app using [static exports](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) deployed via S3 and fronted by CloudFront. That setup worked for a while\u2014it was fast and simple. But with our brand refresh, we added pages and components where it made sense to use (and test for other developers) some Next.js features that we couldn\'t use with the static export:\\n\\n- [React Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components)\\n- [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations)\\n- [ISR](https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration)\\n\\nThat meant static hosting wouldn\'t cut it. So we decided to run the site as an app in a container.\\n\\nThat being said, our learnings from the previous setup *are* being used to develop the capabilities of Defang. We\'re using the experience to make sure that Defang can handle the deployment of static sites as well as dynamic ones. We\'ll keep you updated when that\'s ready.\\n\\n---\\n\\n## Deploying with Defang (and Why It Was Easy)\\n\\nWe already deploy our other services with Defang using Compose files. In fact, the static website actually already used a Dockerfile and Compose file to manage the build process. So we just had to make some minor changes to the Compose file to take into account new environment variables for features we\'re adding and make a few small changes to the Dockerfile to handle the new build process.\\n\\nSome things we had to change:\\n\\n**Adding [ports](https://docs.defang.io/docs/concepts/compose#ports) to the Compose file**:\\n```yaml\\n    ports:\\n      - mode: ingress\\n        target: 3000\\n        published: 3000\\n```\\n\\n**Adding [domain](https://docs.defang.io/docs/concepts/domains) info the Composer file**:\\n```yaml\\n    domainname: defang.io\\n    networks:\\n      default:\\n        aliases:\\n          - www.defang.io\\n```\\n\\nOne other hiccup was that we used to do www to non-www redirects using S3. There are a few ways to switch that up, but for the time being we decided to use Next.js middleware.\\n\\nPretty soon after that, the site was up and running in an AWS account\u2014with TLS, DNS, and both the `www` and root domains automatically configured. Pretty straightfoward!\\n\\n---\\n\\n## Real-World Lessons That Are Shaping Defang\\n\\nDeploying the website wasn\'t just a checkbox\u2014it helped surface real-world pain points and ideas for improvement.\\n\\n### 1. Static Assets Still Need CDNs\\nEven though the site is dynamic now, we still want assets like `/_next/static` to load quickly from a CDN. This made it clear that CDN support\u2014like CloudFront integration\u2014should be easier to configure in Defang. That\u2019s now on our roadmap. That\'s also going to be useful for other frameworks that use similar asset paths, like Django.\\n\\n### 2. Next.js Env Vars Can Be Tricky in Containers\\nNext.js splits env vars between build-time and runtime, and the rules aren\u2019t always obvious. Some need to be passed as build args, and others as runtime envs. That made us think harder about how Defang could help clarify or streamline this for developers\u2014even if we can\u2019t change that aspect of Next.js itself.\\n\\n### 3. Redirects and Rewrites\\nWe had to add a middleware to handle www to non-www redirects. This is a common need, so we\'re keeping an eye on how we can make this easier to deal with in Defang projects.\\n\\nThese are the kinds of things we only notice by using Defang on real-world projects.\\n\\n---\\n\\n## The Takeaway\\n\\nOur site now runs like the rest of our infrastructure:\\n\\n- Fully containerized\\n- Deployed to our own AWS account\\n- Managed with a Compose file\\n- Deployed with Defang\\n\\nStay tuned for the next post in the series\u2014because this is just one piece of the puzzle."},{"id":"/2025/03/15/feb-product-updates","metadata":{"permalink":"/blog/2025/03/15/feb-product-updates","source":"@site/blog/2025-03-15-feb-product-updates.md","title":"February 2025 Defang Compose Update","description":"Defang Compose Update","date":"2025-03-15T00:00:00.000Z","formattedDate":"March 15, 2025","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"DevOps","permalink":"/blog/tags/dev-ops"},{"label":"Pulumi","permalink":"/blog/tags/pulumi"},{"label":"Compose","permalink":"/blog/tags/compose"},{"label":"OpenAuth","permalink":"/blog/tags/open-auth"},{"label":"Portal","permalink":"/blog/tags/portal"},{"label":"Events","permalink":"/blog/tags/events"}],"readingTime":2.19,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"February 2025 Defang Compose Update","tags":["Cloud","DevOps","Pulumi","Compose","OpenAuth","Portal","Events"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"Deploying Defang with Defang: Part 2","permalink":"/blog/2025/03/26/deploying-defang-with-defang-part-2"},"nextItem":{"title":"Deploying Defang with Defang: Part 1","permalink":"/blog/2025/03/14/deploying-defang-with-defang-part-1"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nWell, that went by quick! Seems like it was just a couple of weeks ago that we published the Jan update, and it\u2019s already time for the next one. Still, we do have some exciting progress to report in this short month!\\n\\n1. **Pulumi Provider:** We are excited to announce a Preview of the [Defang Pulumi Provider](https://github.com/DefangLabs/pulumi-defang/). With the Defang Pulumi Provider, you can leverage all the power of Defang with all of the extensibility of Pulumi. Defang will provision infrastructure to deploy your application straight from your Compose file, while allowing you to connect that deployment with other resources you deploy to your cloud account. The new provider makes it easy to leverage Defang if you\u2019re already using Pulumi, and it also provides an upgrade-path for users who need more configurability than the Compose specification can provide.\\n2. **Portal Update:** We are now fully deploying our portal with Defang alone using the `defang compose up` command. Our original portal architecture was designed before we supported managed storage so we used to use Pulumi to provision and connect external storage. But since we added support in Compose to specify managed storage, we can fully describe our Portal using Compose alone. This has allowed us to rip out hundreds of lines of code and heavily simplify our deployments. To learn more about how we do this, check out our Defang-Deployed-with-Defang (Part 1) [blog](https://docs.defang.io/blog/deploying-defang-with-defang-part-1).\\n3. **Open-Auth Contribution:** In the past couple months we have been communicating with the OpenAuth maintainers and contributors via PRs ([#120](https://github.com/toolbeam/openauth/pull/120), [#156](https://github.com/toolbeam/openauth/pull/156)) and Issues ([#127](https://github.com/toolbeam/openauth/issues/127)) to enable features like local testing with DynamoDB, enabling support for scopes, improving standards alignment, supporting Redis, and more. We are rebuilding our authentication systems around OpenAuth and are excited about the future of the project. \\n\\n**Events and Social Media**\\n\\nFebruary was an exciting month for the Defang team as we continued to engage with the developer community and showcase what\u2019s possible with Defang. We sponsored and demo\u2019ed at the [DevTools Vancouver meetup](https://lu.ma/devtools3), as well as sponsored the [Vancouver.dev IRL: Building AI Startups](https://lu.ma/vandevirl2) event. Also, at the AWS Startup Innovation Showcase in Vancouver, our CTO [Lio](https://www.linkedin.com/in/lionello/)  [demonstrated](https://www.linkedin.com/feed/update/urn:li:activity:7299861024780808193) how Defang makes it effortless to deploy secure, scalable, and cost-efficient serverless apps on AWS! And finally, we had a great response to our [LinkedIn post](https://www.linkedin.com/posts/defanglabs_mcp-docker-anthropic-activity-7298043665883508736-i4dd?utm_source=share&utm_medium=member_desktop&rcm=ACoAAAAQqiEBLsVLYYAzEmBFB9oIl31nQ7kDII0) on the Model Context Protocol, catching the attention of many observers, including some of our key partners.\\n\\nWe are eager to see what you deploy with Defang. Join our [Discord](http://s.defang.io/discord) to ask any questions, see what others are building, and share your own experience with Defang. And stay tuned for more to come in March!"},{"id":"/2025/03/14/deploying-defang-with-defang-part-1","metadata":{"permalink":"/blog/2025/03/14/deploying-defang-with-defang-part-1","source":"@site/blog/2025-03-14-deploying-defang-with-defang-part-1.md","title":"Deploying Defang with Defang: Part 1","description":"Defang Compose Update","date":"2025-03-14T00:00:00.000Z","formattedDate":"March 14, 2025","tags":[{"label":"defang-with-defang","permalink":"/blog/tags/defang-with-defang"},{"label":"deployment","permalink":"/blog/tags/deployment"},{"label":"defang-portal","permalink":"/blog/tags/defang-portal"}],"readingTime":4.29,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Deploying Defang with Defang: Part 1","author":"Defang Team","tags":["defang-with-defang","deployment","defang-portal"]},"unlisted":false,"prevItem":{"title":"February 2025 Defang Compose Update","permalink":"/blog/2025/03/15/feb-product-updates"},"nextItem":{"title":"Introducing Defang\'s New Look: Website & Logo Refresh","permalink":"/blog/2025/03/12/website-logo-refresh-announcement"}},"content":"![Defang Compose Update](/img/defang-on-defang/part-1/header.png)\\n\\nDeploying applications is hard. Deploying complex, multi-service applications is even harder. When we first built the Defang Portal, we quickly recognized the complexity required to deploy it, even with the early Defang tooling helping us simplify it a lot. But we\u2019ve worked a lot to expand Defang\u2019s capabilities over the last year+ so it could take on more of the work and simplify that process.\\n\\nThis evolution wasn\u2019t just based on our own instincts and what we saw in the Portal\u2014it was informed by listening to developers who have been using Defang, as well as our experience building dozens of sample projects for different frameworks and languages. Each time we build a new sample, we learn more about the different requirements of various types of applications and developers and refine Defang\u2019s feature set accordingly. The Portal became an extension of this learning process, serving as both a proving ground and an opportunity to close any remaining gaps, since it\u2019s one of the most complex things we\u2019ve built with Defang.\\n\\nFinally, though, the Defang Portal\u2014an application with six services, including two managed data stores, authentication, and a frontend\u2014is fully deployed using just Docker Compose files and the Defang CLI using GitHub Actions.\\n\\n---\\n\\n## **The Initial Setup: A More Complex Deployment**\\n\\nThe Portal isn\u2019t a simple static website; it\u2019s a **full-stack application** with the following services:\\n\\n- **Next.js frontend** \u2013 Including server components and server actions.\\n- **Hasura (GraphQL API)** \u2013 Serves as a GraphQL layer.\\n- **Hono (TypeScript API)** \u2013 Lightweight API for custom business logic.\\n- **OpenAuth (Authentication Service)** \u2013 Manages authentication flows.\\n- **Redis** \u2013 Used for caching and session storage.\\n- **Postgres** \u2013 The main database.\\n\\nInitially, we provisioned databases and some DNS configurations using Infra-as-Code because Defang couldn\u2019t yet manage them for us. We also deployed the services themselves manually through infrastructure-as-code, requiring us to define each service separately.\\n\\nThis worked, but seemed unnecessarily complex, if we had the right tooling\u2026\\n\\n---\\n\\n## **The Transition: Expanding Defang to Reduce Complexity**\\n\\nWe\u2019ve made it a priority to expand Defang\u2019s capabilities a lot over the last year so it could take on more of the heavy lifting of a more complex application. Over the past year, we\u2019ve added loads of features to handle things like:\\n\\n- **Provisioning databases**, including managing passwords and other secrets securely\\n- **Config interpolation using values stored in AWS SSM**, ensuring the same Compose file works both locally and in the cloud\\n- **Provisioning certs and managing DNS records** from configuration in the Compose file.\\n\\nAs a result, we reached a point where we no longer needed custom infrastructure definitions for most of our deployment.\\n\\n## **What Changed?**\\n\\n- **Previously**: GitHub Actions ran infra-as-code scripts to provision databases, manage DNS, and define services *separately from the Docker Compose file we used for local dev*\\n- **Now**: Our [**Defang GitHub Action**](https://github.com/marketplace/actions/defang-deployment-action) targets normal Compose files and deploys everything, using secrets and variables managed in GitHub Actions environments.\\n- **Result**: We **eliminated hundreds of lines of Infra-as-Code**, making our deployment leaner and easier to manage and reducing the differences between running the Portal locally and running it in the cloud.\\n\\nThis wasn\u2019t just about reducing complexity\u2014it was also a validation exercise. We knew that Defang had evolved enough to take over much of our deployment, but by going through the transition process ourselves, we could identify and close the remaining gaps and make sure our users could really make use of Defang for complex production-ready apps.\\n\\n---\\n\\n## **How Deployment Works Today**\\n\\n### **Config & Secrets Management**\\n\\n- **Sensitive configuration values** (database credentials, API keys) are stored **securely in AWS SSM** using Defang\u2019s [configuration management tooling](https://docs.defang.io/docs/concepts/configuration).\\n- [**Environment variable interpolation**](https://docs.defang.io/docs/concepts/configuration#interpolation) allows these **SSM-stored config values** to be referenced directly in the Compose file, ensuring the same configuration works in local and cloud environments.\\n- **Defang provisions managed Postgres and Redis instances automatically** when using the `x-defang-postgres` and `x-defang-redis` extensions, securely injecting credentials where needed with variable interpolation.\\n\\n### Deployment Modes\\n\\n- [**Deployment modes**](https://docs.defang.io/docs/concepts/deployment-modes) (`development`, `staging`, `production`) adjust infrastructure settings across our dev/staging/prod deployments making sure dev is low cost, and production is secure and resilient.\\n\\n### **DNS & Certs**\\n\\n- When we first set up the portal (before we even released the private beta) DNS and certs had to be managed outside the Defang context. Now, **[we can provision certs using ACM or Let\u2019s Encrypt](https://docs.defang.io/docs/concepts/domains)**.\\n\\n### **CI/CD Integration**\\n\\n- **Previously**: GitHub Actions ran custom infra-as-code scripts.\\n- **Now**: The [**Defang GitHub Action**](https://github.com/DefangLabs/defang-github-action) installs Defang automatically and runs `defang compose up`, simplifying deployment.\\n- **Result**: A streamlined, repeatable CI/CD pipeline.\\n\\n---\\n\\n## **The Takeaway: Why This Matters**\\n\\nBy transitioning to **fully Compose-based deployments**, we:\\n\\n* \u2705 **Eliminated hundreds of lines of Infra-as-Code**\\n* \u2705 **Simplified configuration management** with secure, environment-aware secrets handling\\n* \u2705 **Streamlined CI/CD** with a lightweight GitHub Actions workflow\\n* \u2705 **Simplified DNS and cert management** \\n\\nEvery sample project we built, every conversation we had with developers, and every challenge we encountered with the Portal helped us get to this point where we could focus on closing the gaps last few gaps to deploying everything from a Compose file."},{"id":"/2025/03/12/website-logo-refresh-announcement","metadata":{"permalink":"/blog/2025/03/12/website-logo-refresh-announcement","source":"@site/blog/2025-03-12-website-logo-refresh-announcement.md","title":"Introducing Defang\'s New Look: Website & Logo Refresh","description":"Defang New Look","date":"2025-03-12T00:00:00.000Z","formattedDate":"March 12, 2025","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"branding","permalink":"/blog/tags/branding"},{"label":"refresh","permalink":"/blog/tags/refresh"}],"readingTime":1.675,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Introducing Defang\'s New Look: Website & Logo Refresh","author":"Defang Team","tags":["announcement","branding","refresh"]},"unlisted":false,"prevItem":{"title":"Deploying Defang with Defang: Part 1","permalink":"/blog/2025/03/14/deploying-defang-with-defang-part-1"},"nextItem":{"title":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","permalink":"/blog/2025/02/18/model-context-protocol"}},"content":"![Defang New Look](/img/new-look/new-look.png)\\n\\n# Introducing Defang\'s New Look: Website & Logo Refresh\\n\\nOver the last couple of years, as we have been building Defang, we\'ve learnt a lot about the key needs of developers in deploying their applications to the cloud - the primacy of a simple developer experience, while at the same time providing a flexible and production-ready solution that can work seamlessly with all of the popular cloud platform targets.\\n\\nIn response, we have been constantly evolving our product functionality to address those needs in the simplest yet most powerful way we can come up with. While certainly there is a long way to go, we have definitely come a long way since we started.\\n\\n## Why the Refresh?\\n\\nAs we reflected on our journey, we realized our branding and messaging needed to better reflect Defang\'s current value-proposition. That\'s why today, we\'re excited to unveil our brand refresh, our first since the early days of Defang.\\n\\n## Here\'s what\'s new:\\n\\n### 1. Refining Our Messaging\\n\\nAs Defang evolves, so does our message:\\n\\n- **Our Promise**: Develop Anything, Deploy Anywhere.\\n- **What We Enable**: Any App, Any Stack, Any Cloud.\\n- **How It Works**: Take your app from Docker Compose to a secure, scalable deployment on your favorite cloud in minutes.\\n\\n### 2. A Sleek New Logo\\n\\nWe\'ve modernized our logo while keeping the core hexagonal design. The new look symbolizes Defang\'s role in seamlessly deploying any cloud application to any cloud.\\n\\n### 3. A Redesigned Website\\n\\nWe\'ve refreshed our website with a sleek, intuitive design and a modern user experience to better showcase Defang\'s capabilities.\\n\\n## Rolling Out the Refresh\\n\\nStarting today, you\'ll see these updates across our [Defang.io](https://defang.io) homepage and social media platforms ([Twitter](https://x.com/DefangLabs), [LinkedIn](https://www.linkedin.com/company/defanglabs), [Discord](https://s.defang.io/discord), [BlueSky](https://bsky.app/profile/defanglabs.bsky.social)). In the coming days, we\'ll extend this refresh across all our digital assets.\\n\\n## We\'d Love Your Feedback!\\n\\nCheck out the new look and let us know what you think! And if you haven\'t, please join us on Discord and follow us on social media."},{"id":"/2025/02/18/model-context-protocol","metadata":{"permalink":"/blog/2025/02/18/model-context-protocol","source":"@site/blog/2025-02-18-model-context-protocol.md","title":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","description":"mcp","date":"2025-02-18T00:00:00.000Z","formattedDate":"February 18, 2025","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"GCP","permalink":"/blog/tags/gcp"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"MCP","permalink":"/blog/tags/mcp"},{"label":"Model Context Protocol","permalink":"/blog/tags/model-context-protocol"},{"label":"Chatbot","permalink":"/blog/tags/chatbot"},{"label":"Docker","permalink":"/blog/tags/docker"}],"readingTime":6.54,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","tags":["Cloud","NoDevOps","BYOC","GCP","DigitalOcean","AWS","CLI","AI","MCP","Model Context Protocol","Chatbot","Docker"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"Introducing Defang\'s New Look: Website & Logo Refresh","permalink":"/blog/2025/03/12/website-logo-refresh-announcement"},"nextItem":{"title":"January 2025 Defang Compose Update","permalink":"/blog/2025/02/07/january-product-updates"}},"content":"![mcp](/img/mcp/mcp.png)\\n\\nAnthropic recently unveiled the\xa0[Model Context Protocol](https://www.anthropic.com/news/model-context-protocol)\xa0(MCP), \u201ca new standard for connecting AI assistants to the systems where data lives\u201d. However, as Docker [pointed out](https://www.docker.com/blog/the-model-context-protocol-simplifying-building-ai-apps-with-anthropic-claude-desktop-and-docker/), \u201cpackaging and distributing MCP Servers is very challenging due to complex environment setups across multiple architectures and operating systems\u201d. Docker [helps to solve this problem](https://www.docker.com/blog/the-model-context-protocol-simplifying-building-ai-apps-with-anthropic-claude-desktop-and-docker/) by enabling developers to \u201cencapsulate their development environment into containers, ensuring consistency across all team members\u2019 machines and deployments.\u201d The Docker work includes a list of [reference MCP Servers](https://github.com/modelcontextprotocol/servers) packaged up as containers, which you can deploy locally and test your AI application.\\n\\nHowever, to put such containerized AI applications into production, you need to be able to not only test locally, but also easily deploy the application to the cloud. This is what Defang enables. In this blog and the accompanying [sample](https://github.com/DefangLabs/samples/tree/main/samples/mcp), we show how to build a sample AI application using one of the reference MCP Servers, run and test it locally using Docker, and when ready, to easily deploy it to the cloud of your choice (AWS, GCP, or DigitalOcean) using Defang.\\n\\n## Sample Model Context Protocol Time Chatbot Application\\n\\nUsing [Docker\u2019s `mcp/time` image](https://hub.docker.com/r/mcp/time) and Anthropic Claude, we made a [chatbot application](https://github.com/DefangLabs/samples/tree/main/samples/mcp) that can access time-based resources directly on the user\u2019s local machine and answer time-based questions.\\n\\nThe application is containerized using Docker, enabling a convenient and easy way to get it running locally. We will later demonstrate how we deployed it to the cloud using Defang.\\n\\nLet\u2019s go over the structure of the application in a local environment.\\n\\n![mcp_before](/img/mcp/mcp_before.png)\\n\\n### General Overview\\n\\n1. There are two containerized services, Service 1 and Service 2, that sit on the local machine.\\n    - Service 1 contains a custom-built web server that interacts with an MCP Client.\\n    - Service 2 contains an MCP Server from Docker as a base image for the container, and a custom-built MCP Client we created for interacting with the MCP Server.\\n2. We have a browser on our local machine, which interacts with the web server in Service 1.\\n3. The MCP Server in Service 2 is able to access tools from either a cloud or on our local machine. This configuration is included as a part of the Docker MCP image.\\n4. The MCP Client in Service 2 interacts with the Anthropic API and the web server.\\n\\n### Architecture\\n\\n**Service 1: Web Server**\\n\\nService 1 contains a web server and the UI for a chat application (not shown in the diagram), written in Next.js. The chat UI updates based on user-entered queries and chatbot responses. A POST request is sent to Service 1 every time a user enters a query from the browser. In the web server, a Next.js server action function is used to forward the user queries to the endpoint URL of Service 2 to be processed by the MCP Client.\\n\\n**Service 2: MCP Service Configuration**\\n\\nThe original Docker `mcp/time` image is not designed with the intent of being deployed to the cloud - it is created for a seamless experience with Claude Desktop. To achieve cloud deployment, an HTTP layer is needed in front of the MCP Server. To address this, we\'ve bundled an MCP Client together with the Server into one container. The MCP Client provides the HTTP interface and communicates with the MCP Server via standard input/output ([stdio](https://modelcontextprotocol.io/docs/concepts/transports#standard-input-output-stdio)).\\n\\n**MCP Client**\\n\\nThe [MCP Client](https://modelcontextprotocol.io/quickstart/client) is written in Python, and runs in a [virtual environment](https://docs.python.org/3/library/venv.html) (`/app/.venv/bin`) to accommodate specific package dependencies. The MCP Client is instantiated in a [Quart](https://quart.palletsprojects.com/en/latest/index.html) app, where it connects to the MCP Server and handles POST requests from the web server in Service 1. Additionally, the MCP Client connects to the Anthropic API to request LLM responses.\\n\\n**MCP Server and Tools (from the Docker Image)**\\n\\nThe [MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/time) enables access to tools from an external source, whether it be from a cloud or from the local machine. This configuration is included as a part of the [Docker MCP image](https://hub.docker.com/r/mcp/time). The tools can be accessed indirectly by the MCP Client through the MCP Server. The Docker image is used as a base image for Service 2, and the MCP Client is built in the same container as the MCP Server. Note that the MCP Server also runs in a virtual environment (`/app/.venv/bin`).\\n\\n**Anthropic API**\\n\\nThe MCP Client connects to the [Anthropic API](https://docs.anthropic.com/en/api/getting-started) to request responses from a Claude model. Two requests are sent to Claude for each query. The first request will send the query contents and a list of tools available, and let Claude respond with a selection of the tools needed to craft a response. The MCP Client will then call the tools indirectly through the MCP Server. Once the tool results come back to the Client, a second request is sent to Claude with the query contents and tool results to craft the final response.\\n\\n### Setting Up Dockerfiles\\n\\n**Service 1: Web Server - [Dockerfile](https://github.com/DefangLabs/samples/blob/main/samples/mcp/service-1/Dockerfile)**\\n\\nThe base image for Service 1 is the `node:bookworm-slim` image. We construct the image by copying the server code and setting an entry point command to start the web server. \\n\\n**Service 2: MCP Service Configuration - [Dockerfile](https://github.com/DefangLabs/samples/blob/main/samples/mcp/service-2/Dockerfile)**\\n\\nThe base image for Service 2 is the Docker `mcp/time` image. Since both the MCP Client and Server run in a virtual environment, we activate a `venv` command in the Dockerfile for Service 2 and create a `run.sh` shell script that runs the file containing the MCP Client and Server connection code. We then add the shell script as an entry point command for the container.\\n\\n### Compose File\\nTo define Services 1 and 2 as Docker containers, we\u2019ve written a `compose.yaml` file in the root directory, as shown below. \\n\\n```yaml\\nservices:\\n  service-1: # Web Server and UI\\n    build:\\n      context: ./service-1\\n      dockerfile: Dockerfile\\n    ports:\\n      - target: 3000\\n        published: 3000\\n        mode: ingress\\n    deploy:\\n      resources:\\n        reservations:\\n          memory: 256M\\n    environment:\\n      - MCP_SERVICE_URL=http://service-2:8000\\n    healthcheck:\\n      test: [\\"CMD\\", \\"curl\\", \\"-f\\", \\"http://localhost:3000/\\"]\\n\\n  service-2: # MCP Service (MCP Client and Server)\\n    build:\\n      context: ./service-2\\n      dockerfile: Dockerfile\\n    ports:\\n      - target: 8000\\n        published: 8000\\n        mode: host\\n    environment:\\n      - ANTHROPIC_API_KEY\\n```\\n\\n### Testing and Running on Local Machine\\n\\nNow that we\u2019ve defined our application in Docker containers using a `compose.yaml` file, we can test and run it on our local machine by running the command:\\n\\n```bash\\ndocker compose up --build\\n```\\n\\nOnce the application is started up, it can be easily tested in a local environment. However, to make it easily accessible to others online, we should deploy it to the cloud. Fortunately, deploying the application is a straightforward process using Defang, particularly since the application is [Compose-compatible](https://docs.defang.io/docs/concepts/compose). \\n\\n### Deploying to the Cloud\\n\\nLet\u2019s go over the structure of the application after cloud deployment.\\n\\n![mcp_after](/img/mcp/mcp_after.png)\\n\\nHere we can see what changes if we deploy to the cloud: \\n\\n1. Service 1 and Service 2 are now deployed to the cloud, not on the local machine anymore. \\n2. The only part on the local machine is the browser. \\n\\nUsing the same `compose.yaml` file as shown earlier, we can deploy the containers to the cloud with the [Defang CLI](https://docs.defang.io/docs/getting-started). Once we\u2019ve authenticated and logged in, we can [choose a cloud provider (i.e. AWS, GCP, or DigitalOcean)](https://docs.defang.io/docs/tutorials/deploy-to-your-cloud) and use our own cloud account for deployment. Then, we can set a configuration variable for the Anthropic API key:\\n\\n```bash\\ndefang config set ANTHROPIC_API=<your-api-key-value>\\n```\\n\\nThen, we can run the command:\\n\\n```bash\\ndefang compose up\\n```\\n\\nNow, the [MCP time chatbot application](https://github.com/DefangLabs/samples/tree/main/samples/mcp) will be up and running in the cloud. This means that anyone can access the application online and try it for themselves!\\n\\nFor our case, anyone can use the chatbot to ask for the exact time or convert time zones from their machine, regardless of where they are located.\\n\\n![mcp_time_chatbot](/img/mcp/mcp_time_chatbot.png)\\n\\nMost importantly, this chatbot application can be adapted to use any of the other Docker reference\xa0[MCP Server images](https://hub.docker.com/u/mcp), not just the `mcp/time` server. \\n\\nHave fun building and deploying MCP-based containerized applications to the cloud with Defang!"},{"id":"/2025/02/07/january-product-updates","metadata":{"permalink":"/blog/2025/02/07/january-product-updates","source":"@site/blog/2025-02-07-january-product-updates.md","title":"January 2025 Defang Compose Update","description":"Defang Compose Update","date":"2025-02-07T00:00:00.000Z","formattedDate":"February 7, 2025","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"Postgres","permalink":"/blog/tags/postgres"},{"label":"GCP","permalink":"/blog/tags/gcp"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Debugging","permalink":"/blog/tags/debugging"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2.46,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"January 2025 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","Postgres","GCP","DigitalOcean","AWS","CLI","AI","Debugging","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","permalink":"/blog/2025/02/18/model-context-protocol"},"nextItem":{"title":"Defang is live on Product Hunt!","permalink":"/blog/2024/12/11/product-hunt"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nWelcome to 2025! As we had shared in our early [Dec update](https://docs.defang.io/blog/2024-12-04-launch-week), we reached our V1 milestone with support for GCP and DigitalOcean in Preview and production support for AWS. We were very gratified to see the excitement around our launch, with Defang ending 2024 with twice the number of users as our original goal! \\n\\nWe are excited to build on that momentum going into 2025. And we are off to a great start in Jan, with some key advancements:\\n\\n1. **GCP parity with AWS:** We are really excited to announce that our GCP provider is now feature-complete, with support for key features such as [Managed Postgres](https://docs.defang.io/docs/concepts/managed-storage/managed-postgres), [Managed Redis](https://docs.defang.io/docs/concepts/managed-storage/managed-redis), [BYOD](https://docs.defang.io/docs/concepts/domains#bring-your-own-domain) (Bring-Your-Own-Domain), [GPUs](https://docs.defang.io/docs/tutorials/deploy-with-gpu), AI-assisted [Debugging](https://docs.defang.io/docs/concepts/debug), and more. Install the [latest version of our CLI](https://defang.io/#install) and give it a try! Please let us know your feedback.\\n2. **Defang Deployed with Defang:** In 2025, we are doubling our focus on production use-cases where developers are using Defang every day to deploy their production apps. And where better to start than with Defang itself? We had already been using Defang to deploy portions of our infrastructure (such as our web site), but we are super happy to report that now we are using Defang to deploy **all** our services - including our Portal, Playground, the Defang back-end (aka Fabric) and more. We\u2019ll be sharing more about how we did this, and publishing some of the related artifacts, in a blog post soon - stay tuned.\\n3. **Campus Advocate Program:** One of our key goals for 2025 is to bring Defang to more students and hobbyists. To do this, we are very excited to launch our [Campus Advocate Program](https://defang.io/cap/), a community of student leaders passionate about cloud technology. Our advocates will build communities, host events, and help peers adopt cloud development with Defang. If you\u2019re a student eager to drive cloud innovation on your campus, we\u2019d love to hear from you - you can [apply here](https://s.defang.io/cap?_gl=1*1rx948d*_ga*ODk3NDgzNjU4LjE3MTgxNDc2MjQ.*_ga_QVJVWN44CW*MTczODM2NjYyOC4xMDMuMS4xNzM4MzY4MjI2LjAuMC4w).\\n4. **1-click Deploy instructions:** One of our most popular features is the ability to deploy any of our 50+ samples with [a single click](https://docs.defang.io/docs/tutorials/using-one-click-deploy). We have now published [instructions](https://docs.defang.io/docs/tutorials/adding-custom-one-click-deploy) showing how you can provide a similar experience for your project or sample. We are curious to see what you deploy with this!\\n5. **Model Context Protocol** sample: AI agents are of course the rage nowadays. Recently, Docker published a [blog](https://www.docker.com/blog/the-model-context-protocol-simplifying-building-ai-apps-with-anthropic-claude-desktop-and-docker/) showing how you can use Docker to containerize \u201cservers\u201d following Anthropic\u2019s [Model Context Protocol](https://modelcontextprotocol.io/introduction). We have now published a sample that shows you how to easily deploy such containerized servers to the cloud using Defang - [check it out here](https://github.com/DefangLabs/samples/tree/main/samples/mcp).\\n\\nSo, you can see we have been busy! But that is not all - we have a lot more in the pipeline in the coming months. Stay tuned - it\u2019s going to be an exciting 2025!\\n\\nP.S.: **Defang is now on Bluesky!** [Follow us](https://bsky.app/profile/defanglabs.bsky.social) to stay connected, get the latest updates, and join the conversation. See you there!"},{"id":"/2024/12/11/product-hunt","metadata":{"permalink":"/blog/2024/12/11/product-hunt","source":"@site/blog/2024-12-11-product-hunt.md","title":"Defang is live on Product Hunt!","description":"Defang Compose Update - Product Hunt","date":"2024-12-11T00:00:00.000Z","formattedDate":"December 11, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"V1","permalink":"/blog/tags/v-1"},{"label":"Launch Week","permalink":"/blog/tags/launch-week"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"},{"label":"Product Hunt","permalink":"/blog/tags/product-hunt"}],"readingTime":1.24,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"Defang is live on Product Hunt!","tags":["Cloud","BYOC","V1","Launch Week","Defang Compose Update","Product Hunt"],"author":"Defang Team","image":"https://docs.defang.io/img/product-hunt/product-hunt.png"},"unlisted":false,"prevItem":{"title":"January 2025 Defang Compose Update","permalink":"/blog/2025/02/07/january-product-updates"},"nextItem":{"title":"\ud83d\ude80 Defang V1: Launch Week is Here!","permalink":"/blog/2024/12/04/launch-week"}},"content":"import { Button } from \'@mui/material\';\\n\\n![Defang Compose Update - Product Hunt](/img/product-hunt/product-hunt.png)\\n\\n\\n# **Defang is live on Product Hunt!**\\n\\nThe moment is finally here \u2013 **Defang V1 is officially LIVE on Product Hunt!** \ud83c\udf89\\n\\n<a\\n  href=\\"https://www.producthunt.com/posts/defang?embed=true&utm_source=badge-featured&utm_medium=badge&utm_souce=badge-defang\\"\\n  target=\\"_blank\\"\\n>\\n  <img\\n    src=\\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=689929&theme=light\\"\\n    alt=\\"Defang - Go from idea to your favorite cloud in minutes. | Product Hunt\\"\\n    style={{ width: 250, height: 54, borderRadius: \'0px !important\' }}\\n    className=\\"unstyled\\"\\n    width={250}\\n    height={54}\\n  />\\n</a>\\n\\n\\nOver the past few months, our team has been working tirelessly to create a tool that transforms how developers develop, deploy, and debug cloud apps. With Defang, you can go from idea to your favorite cloud in minutes. \ud83d\ude80\\n\\nToday, we have the opportunity to showcase Defang to a global audience, and your support could make all the difference!\\n\\nIf you already have a Product Hunt account, it\'s super easy.\\n* \u2705\xa0You can support our product if you like what we have built so far\\n* \u2705 You can leave a comment and any feedback you may have (comments are great!)\\n* \u2705 You can leave a review\\n\\nProduct Hunt launches are time sensitive as they last 24 hours, so if you have 30 seconds available right now, it would really mean a lot.\\n\\nIf you don\'t already have a Product Hunt account, please don\'t create one now to upvote (we may get penalized for that).\\n\\nInstead, you can like and share our (e.g. LinkedIn, Twitter, Instagram or Facebook) posts\\n.\\nThank you in advance. Your support means the world."},{"id":"/2024/12/04/launch-week","metadata":{"permalink":"/blog/2024/12/04/launch-week","source":"@site/blog/2024-12-04-launch-week.md","title":"\ud83d\ude80 Defang V1: Launch Week is Here!","description":"Defang Compose Update","date":"2024-12-04T00:00:00.000Z","formattedDate":"December 4, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"V1","permalink":"/blog/tags/v-1"},{"label":"Launch Week","permalink":"/blog/tags/launch-week"},{"label":"GCP","permalink":"/blog/tags/gcp"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Debugging","permalink":"/blog/tags/debugging"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":3.2,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"\ud83d\ude80 Defang V1: Launch Week is Here!","tags":["Cloud","NoDevOps","BYOC","V1","Launch Week","GCP","AWS","DigitalOcean","CLI","AI","Debugging","Defang Compose Update"],"author":"Defang Team","image":"https://docs.defang.io/img/november-update/launch-week.png"},"unlisted":false,"prevItem":{"title":"Defang is live on Product Hunt!","permalink":"/blog/2024/12/11/product-hunt"},"nextItem":{"title":"October 2024 Defang Compose Update","permalink":"/blog/2024/11/13/october-product-updates"}},"content":"import { Button } from \'@mui/material\';\\n\\n![Defang Compose Update](/img/november-update/launch-week.png)\\n\\n# **\ud83d\ude80 Defang V1: Launch Week is Here!**\\n\\nAt **Defang**, we\u2019re enabling developers go from **idea to code to deployment 10x faster**.  We\u2019re thrilled to announce that **Defang V1** is officially launching during our action-packed **Launch Week**, running from **December 4\u201310, 2024**! This marks a major milestone as we officially release the tools and features developers have been waiting for.\\n\\n## **What\u2019s New in Defang CLI V1?**\\n\\n**Defang is a powerful tool that lets you easily develop, deploy, and debug production-ready cloud applications**. With Defang V1, we continue to deliver on our vision to make **cloud development effortlessly simple and portable, with the ability to develop once and deploy anywhere**.\xa0Here\u2019s what\u2019s included in this milestone release:\\n\\n- **Production-Ready Support for AWS**\\n\\nSeamlessly deploy and scale with confidence on [AWS](https://docs.defang.io/docs/providers/aws). Defang is now [WAFR](https://aws.amazon.com/premiumsupport/business-support-well-architected/)-compliant, assuring that your deployments conform to all the best-practices for AWS deployments. Defang is now officially part of the [AWS Partner Network](https://aws.amazon.com/partners/). \\n\\n- **New - Google Cloud Platform ([GCP](https://docs.defang.io/docs/providers/gcp)) in Preview**\\n\\nThis week, we are excited to unveil support for deployments to GCP, in Preview. Start building and exploring and give us feedback as we work to enhance the experience further and move towards production support. Defang is also now officially part of the [Google Cloud Partner Advantage](https://cloud.google.com/partners?hl=en) program.\\n\\n- **Support for DigitalOcean in Preview**\\n\\nDevelopers using [DigitalOcean](https://docs.defang.io/docs/providers/digitalocean) can explore our Preview features, with further enhancements and production support coming soon.\\n\\n**Defang Product Tiers and Introductory Pricing \ud83d\udee0\ufe0f**\\n\\nAs we move into V1, we are also rolling out our differentiated product tiers, along with our special introductory pricing. Fear not, we will always have a free tier for hobbyists - conveniently called the Hobby tier. We now also provide Personal, Pro, and Enterprise tiers for customers with more advanced requirements. Check out what is included in each [here](https://defang.io/pricing/). And as always, the Defang CLI is and remains [open-source](https://github.com/DefangLabs).\\n\\n## **Launch Week Activities**\\n\\nWe\u2019ve lined up an exciting week of activities to showcase the power of **Defang** and bring together our growing community:\\n\\n- **December 4: Vancouver CDW x AWS re:Invent Watch Party**\\n\\nJoin us at the Vancouver [CDW x AWS re:Invent Watch Party](https://lu.ma/1r0zsw76), where we will have a booth showcasing Defang\u2019s capabilities and AWS integration. Stop by to learn more about Defang and see a live demo from the Defang dev team. \\n\\n- **December 5\u20136: GFSA DemoDay and Git Push to 2025: Devs Social Party**\\n\\nHear directly from Defang\u2019s co-founder and CTO, Lio Lunesu, as we unveil Defang\u2019s support for GCP at the Google for Startups Accelerator (GFSA) [DemoDay](https://rsvp.withgoogle.com/events/google-for-startups-accelerator-canada-demo-day) event in Toronto. This event will also be live-streamed [here](https://rsvp.withgoogle.com/events/google-for-startups-accelerator-canada-demo-day/forms/registration).\\n\\nAdditionally, join us on December 5th for the final [meetup](https://lu.ma/x2lridge) of the year for Vancouver\u2019s developer groups, hosted by VanJS in collaboration with other local dev communities.\\n\\n- **December 6 & 7: MLH Global Hack Week (GHW)**\\n\\nJoin us during [MLH Global Hack Week](https://ghw.mlh.io/schedule) for hands-on workshops and learn how to build production-ready cloud applications in minutes with Defang.\\n\\n- **December 7: Cloud Chat**\\n\\nAn IRL event with our team to explore V1 features in depth, answer your questions, and share insights from our journey.\\n\\n- **December 10: Product Hunt Launch**\\n\\nBe part of our Product Hunt debut and show your support as we reach the broader tech community.\\n\\n## **Join the Celebration \ud83c\udf89**\\n\\nThis launch week is not just about us. It is about **you**, our community. Here is how you can get involved:\\n\\n1.\\t**Explore the Platform**: Sign up at [Defang.io](https://defang.io/) and dive into V1.\\n\\n2.\\t**Attend Events**: Mark your calendar for our scheduled activities.\\n\\n3.\\t**Spread the Word**: Follow us on [LinkedIn](https://www.linkedin.com/company/defanglabs/) and [X](https://x.com/defanglabs), share your experiences, and let others know why you love Defang.\\n\\nWe\u2019re excited to celebrate this milestone with all of you. Stay tuned for more updates, and let\u2019s make Launch Week unforgettable!"},{"id":"/2024/11/13/october-product-updates","metadata":{"permalink":"/blog/2024/11/13/october-product-updates","source":"@site/blog/2024-11-13-october-product-updates.md","title":"October 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-11-13T00:00:00.000Z","formattedDate":"November 13, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"Postgres","permalink":"/blog/tags/postgres"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Debugging","permalink":"/blog/tags/debugging"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2.42,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"October 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","Postgres","DigitalOcean","AWS","CLI","AI","Debugging","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"\ud83d\ude80 Defang V1: Launch Week is Here!","permalink":"/blog/2024/12/04/launch-week"},"nextItem":{"title":"Hard Lessons From Hardware","permalink":"/blog/2024/11/12/hard-lessons-from-hardware"}},"content":"import { Button } from \'@mui/material\';\\n\\n![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nHi everyone, \\n\\nWe are a little late getting our monthly update out this time, but we did ship a number of important updates in October that we would like to inform you about. And more is coming\u2026 stay tuned for that!\\n\\n1. **New CLI version 0.6.5**: this was a big release with a number of improvements and bug fixes. You can find details in the release notes [here](https://github.com/DefangLabs/defang/releases/tag/v0.6.5), but to highlight a few: \\n    - `defang --provider aws`\xa0shows improved error message if unauthenticated\\n    - Added `--wait` and `--wait-timeout` flags\\n    - Improved\xa0`generate`\xa0menu: all samples shown (previously these were restricted by language), and we moved the \\"Generate with AI\\" option to now be shown in the search filter.\\n\\n2. **AI Debug for BYOC**: AI Debug feature is incredibly useful in helping users find and fix issues when something goes wrong. Our initial version only worked on Playground, but now we have extended this to BYOC environments. We hope this makes it even easier for you to deploy your apps to AWS, DigitalOcean, etc.\\n\\n3. A range of other **improvements**, including\\n    - Network `aliases`\xa0support\\n    - GDPR Delete Me: You can now delete your Defang account from the Defang Portal\\n    - 30min time-out for the [deployments](https://docs.defang.io/docs/concepts/deployments) to avoid runaway tasks in your account\\n    - Allow Postgres major version upgrade, e.g. changing the image from`postgres:14` to `postgres:16` in your Compose file (Currently, we only support this in `--mode development`, we will explore ways to support in other modes in the future.)\\n    - More feedback logs when containers exit, e.g. failing health-checks\\n    - Fixes for multiple BYOD [domains](https://docs.defang.io/docs/concepts/domains) in a single account\\n\\n## Events and Adoption\\n\\nIn October, the Defang team was actively involved in a range of exciting events. We participated in [MLH Cloud Week](https://ghw.mlh.io/events/cloud), [StormHacks](https://stormhacks.com/), and hosted a DevTools Vancouver [meetup](https://lu.ma/devtools2), bringing together local DevTool founders, engineers, and enthusiasts. It was inspiring to see Defang in action, helping these hackers build their amazing projects.\\n\\n![DevToolsMeetup](/img/october-update/devtools-meetup.jpg)\\n\\nWhen we shipped our Public Beta earlier in 2024, we had a goal to reach **1000 users** by end of year. **We are pleased to announce that we have already reached this milestone a couple of months in advance!** We are excited to see the momentum behind the product and how our users are using Defang for developing and deploying a variety of different applications. Thank you for your support!\\n\\n## The Road Ahead\\n\\nThe team is now heads-down dotting the i\u2019s and crossing the t\u2019s so we can release Defang V1 before end of year. This will enable customers to use Defang for production workloads. We look forward to sharing more in our next monthly update.\\n\\n---\\n\\n<img src=\\"/img/october-update/coffee-chat.png\\" alt=\\"CoffeeChat\\" style={{ width: 300 }} />\\n\\n---\\n\\nAs always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! \ud83d\ude80"},{"id":"/2024/11/12/hard-lessons-from-hardware","metadata":{"permalink":"/blog/2024/11/12/hard-lessons-from-hardware","source":"@site/blog/2024-11-12-hard-lessons-from-hardware.md","title":"Hard Lessons From Hardware","description":"About the author: Linda Lee is an intern at Defang Software Labs who enjoys learning about computer-related things. She wrote this blog post after having fun with hardware at work.","date":"2024-11-12T00:00:00.000Z","formattedDate":"November 12, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"Embedded Systems","permalink":"/blog/tags/embedded-systems"},{"label":"Hardware","permalink":"/blog/tags/hardware"},{"label":"Wifi","permalink":"/blog/tags/wifi"},{"label":"Arduino","permalink":"/blog/tags/arduino"},{"label":"Defang","permalink":"/blog/tags/defang"}],"readingTime":3.67,"hasTruncateMarker":false,"authors":[{"name":"Linda Lee"}],"frontMatter":{"title":"Hard Lessons From Hardware","tags":["Cloud","NoDevOps","Embedded Systems","Hardware","Wifi","Arduino","Defang"],"author":"Linda Lee"},"unlisted":false,"prevItem":{"title":"October 2024 Defang Compose Update","permalink":"/blog/2024/11/13/october-product-updates"},"nextItem":{"title":"September 2024 Defang Compose Update","permalink":"/blog/2024/09/30/september-product-updates"}},"content":"*About the author: Linda Lee is an intern at Defang Software Labs who enjoys learning about computer-related things. She wrote this blog post after having fun with hardware at work.* \\n\\n## My Story of Embedded Systems With Defang\\n\\nHave you ever looked at a touch screen fridge and wondered how it works? Back in my day (not very long ago), a fridge was just a fridge. No fancy built-in interface, no images displayed, and no wifi. But times have changed, and I\u2019ve learned a lot about embedded systems, thanks to Defang! \\n\\n![smart_fridge](/img/hardware-story/smart_fridge.png)\\n\\nFrom my background, I was more into the web development and software side of things. Buffer flushing? Serial monitors? ESP32-S3? These were unheard of. Then one day at Defang, I was suggested to work on a project with a [SenseCAP Indicator](https://wiki.seeedstudio.com/Sensor/SenseCAP/SenseCAP_Indicator/Get_started_with_SenseCAP_Indicator/), a small programmable touch screen device. Everyone wished me good luck when I started. That\u2019s how I knew it wasn\u2019t going to be an easy ride. But here I am, and I\u2019m glad I did it. \\n\\nWhat is embedded systems/programming? It\u2019s combining hardware with software to perform a function, such as interacting with the physical world or accessing cloud services. A common starting point for beginners is an Arduino board, which is what the SenseCAP Indicator has for its hardware. My goal was to make a UI display for this device, and then send its input to a computer, and get that data into the cloud.\\n\\n![hand_typing](/img/hardware-story/hand_typing.png)\\n\\n## The Beginning\\n\\nMy journey kicked off with installing the [Arduino IDE](https://www.arduino.cc/en/software) on my computer. It took me two hours\u2014far longer than I expected\u2014because the software versions I kept trying were not the right ones. Little did I know that I would encounter this issue many times later, such as when downloading [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html), a tool for firmware flashing. Figuring out what not to install had become a highly coveted skill. \\n\\nThe next part was writing software to display images and text. This was slightly less of a problem thanks to forums of users who had done the exact same thing several years ago. One tool I used was [Squareline Studio](https://squareline.io/), a UX/UI design tool for embedded devices. With a bit of trial and error, I got a simple static program displayed onto the device. Not half bad looking either. Here\u2019s what it looked like:\\n\\n![ui_static](/img/hardware-story/ui_static.png)\\n\\n## The Middle\\n\\nNow came the networking part. Over wifi, I set up a Flask (Python) server on my computer to receive network pings from the SenseCAP Indicator. I used a library called [ArduinoHTTPClient](https://github.com/arduino-libraries/ArduinoHttpClient). At first, I wanted to ping the server each time a user touched the screen. Then came driver problems, platform incompatibilities, deprecated libraries\u2026\\n\\n\u2026 After weeks of limited progress due to resurfacing issues, I decided to adjust my goal to send pings on a schedule of every 5 seconds, rather than relying on user input. I changed the UI to be more colorful, and for good reason. Now, each network ping appears with a message on the screen. Can you look closely to see what it says? \\n\\n![ui_wifi](/img/hardware-story/ui_wifi.png)\\n\\nThis is what the Flask server looked like on my computer as it got pinged:\\n\\n![local_server](/img/hardware-story/local_server.png)\\n\\nHooray! Once everything was working, It was time to deploy my Flask code as a cloud service so I could access it from any computer, not just my own. Deployment usually takes several hours due to configuring a ton of cloud provider settings. But I ain\u2019t got time for that. Instead, I used Defang to deploy it within minutes, which took care of all that for me. Saved me a lot of time and tears.\\n\\nHere\u2019s the Flask deployment on Defang\u2019s Portal view: \\n\\n![portal_view](/img/hardware-story/portal_view.png)\\n\\nHere\u2019s the Flask server on the cloud, accessed with a deployment link:\\n\\n![deployed_server](/img/hardware-story/deployed_server.png)\\n\\n## The End\\n\\nAfter two whole months, I finally completed my journey from [start](https://github.com/commit111/defang-arduino-static) to [finish](https://github.com/commit111/defang-arduino-wifi)! This project was an insightful dive into the world of embedded systems, internet networking, and cloud deployment. \\n\\nBefore I let you go, here are the hard lessons from hardware, from yours truly:\\n1. Learning what not to do can be equally as important.\\n2. Some problems are not as unique as you think. \\n3. One way to achieve a goal is by modifying it. \\n4. Choose the simpler way if it is offered.\\n5. That\u2019s where Defang comes in.\\n\\nWant to try deploying to the cloud yourself? You can try it out [here](https://defang.io/samples). Keep on composing up! \ud83d\udcaa"},{"id":"/2024/09/30/september-product-updates","metadata":{"permalink":"/blog/2024/09/30/september-product-updates","source":"@site/blog/2024-09-30-september-product-updates.md","title":"September 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-09-30T00:00:00.000Z","formattedDate":"September 30, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"Postgres","permalink":"/blog/tags/postgres"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Debugging","permalink":"/blog/tags/debugging"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2.745,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"September 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","Postgres","DigitalOcean","CLI","AI","Debugging","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"Hard Lessons From Hardware","permalink":"/blog/2024/11/12/hard-lessons-from-hardware"},"nextItem":{"title":"August 2024 Defang Compose Update","permalink":"/blog/2024/08/30/august-product-updates"}},"content":"import { Button } from \'@mui/material\';\\n\\n\\n![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nHi everyone - you can feel the weather getting cooler, but things are heating up at Defang! Sep was another amazing month, with new features, new users, and new partners. Here is a quick summary:\\n\\n1. **Bring-Your-Own-Cloud (BYOC) DigitalOcean in Preview!** From the very beginning, it has been part of Defang\u2019s vision to not only provide a simpler way to develop, deploy, and debug your cloud applications, but to be able to do so in a portable way. As developers, we all value the flexibility of knowing our application can be deployed to our chosen cloud, even if that choice changes over time. Today, we take a big step in providing that choice with the Preview of BYOC with DigitalOcean! This literally means the same application can be deployed to the Defang Playground, AWS, or DigitalOcean with no changes! Take a look at the [docs](https://docs.defang.io/docs/providers/digitalocean), give it a try and share your feedback on our [Discord](http://s.defang.io/discord).\\n2. **Managed Postgres**: Postgres is one of the fundamental building blocks of many applications, and users wanted us to provide a way to add that to their application in a declarative way. So that\u2019s exactly what we have done. You can now specify the Postgres image in your `compose.yaml`\xa0file and indicate that you want it managed by your cloud provider using\xa0`x-defang-postgres: true`\xa0in your service definition. Defang will automatically provision the appropriate managed Postgres in the target cloud (e.g. RDS on AWS) and do all the heavy lifting to configure and hook things up correctly. Check out the docs [here](https://docs.defang.io/docs/concepts/managed-storage/managed-postgres), give it a try and let us know what you think.\\n3. We continue to improve the **quality and performance** of existing features:\\n    1. We\u2019ve made several improvements to our AI-assistant to increase the robustness of our Develop and Debug modules. For example, we updated generation to comply with latest Compose spec. We also addressed the top issues we saw people facing when deploying, such as out-of-memory errors when building containers. \\n    2. To cope with our growing user-base, we have made several scaling improvements to our Playground and Portal environments.\\n    3. We also made several updates to our documentation and samples to keep up with the changes and enhancements in the Defang product. \\n\\n---\\n\\n![Workshop](/img/september-update/workshop.jpg)\\n\\n## September Events\\n\\nIn Sep, the Defang team participated in a number of events including HacktheNorth, LangaraHacks, MLH Global Hack Week and other MLH hackathons. It\u2019s great to see Defang being put to use by these hackers to build their amazing projects. And we get useful insights from these events that help us improve the product. We will continue to do more of these events in the future - watch our [LinkedIn](https://www.linkedin.com/company/defanglabs) page for announcements.\\n\\n---\\n\\n## Google for Startups Accelerator Canada\\n\\nAlso in Sep, Defang was included in the [Google for Startups Accelerator Canada.](https://www.linkedin.com/posts/irankarimian_ai-startups-dominate-latest-google-for-startups-activity-7241805161411551232-thky?utm_source=share&utm_medium=member_desktop) This is a great recognition of the value Defang is providing to cloud developers. Through our collaboration with Google, we hope to add GCP as another target cloud for Defang in the coming months - stay tuned!\\n\\n---\\n\\n<img src=\\"/img/september-update/coffee-chat.png\\" alt=\\"CoffeeChat\\" style={{ width: 300 }} />\\n\\n---\\n\\nAs always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! \ud83d\ude80"},{"id":"/2024/08/30/august-product-updates","metadata":{"permalink":"/blog/2024/08/30/august-product-updates","source":"@site/blog/2024-08-30-august-product-updates.md","title":"August 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-08-30T00:00:00.000Z","formattedDate":"August 30, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"DigitalOcean","permalink":"/blog/tags/digital-ocean"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Debugging","permalink":"/blog/tags/debugging"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"August 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","DigitalOcean","CLI","AI","Debugging","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"September 2024 Defang Compose Update","permalink":"/blog/2024/09/30/september-product-updates"},"nextItem":{"title":"July 2024 Defang Compose Update","permalink":"/blog/2024/07/31/july-product-updates-2"}},"content":"import { Button } from \'@mui/material\';\\n\\n\\n![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nWow - what a month of August it has been! We made some big strides of progress on our vision of providing a radically simpler way to Develop, Deploy, and Debug _portable_ cloud applications.\\n\\n## Ask Defang\\n\\nWe\'ve just rolled out an initial version of Ask Defang, our AI-driven documentation assistant that can help you navigate the Defang docs and get deploying faster. It\'s deployed with Defang and using a combination of embeddings run on a GPU-powered service, Defang managed Redis, and OpenAI APIs.\\n\\nCheck it out [here](/docs/ask) or head to [ask.defang.io](https://ask.defang.io) to get started!\\n\\n## Enhanced Platform Symmetry\\n\\nWe\'ve been hard at work improving the symmetry between our Playground and BYOC environments as well as `docker compose up` vs `defang compose up` to provide a more seamless experience. You can now use multiple compose files and in BYOC the CLI will subscribe to events to monitor service health during deployments.\\n\\n## AI Features and Debugging Improvements\\n\\nWe\'ve been working on several AI-driven enhancements to make your development process even more efficient. We\'ve addressed key issues, such as file generation failures due to parsing errors and invalid compose files. Also, our Debug Assistant is now more robust, handling context size limits better than before.\\n\\n---\\n\\n![Workshop](/img/august-update/workshop.jpg)\\n\\n## August Events\\n\\nThis month, we hosted an in-person [workshop](https://www.linkedin.com/feed/update/urn:li:activity:7233915052083310595/) to get more developers acquainted with Defang and simplify their cloud app journey. You can view the presentation [here](https://s.defang.io/cloudjam2024). We also held the first-ever DevTools Vancouver [meetup](https://www.linkedin.com/posts/defanglabs_devtoolsmeetup-activity-7234599713751060483-zQsg?utm_source=share&utm_medium=member_desktop), bringing together local DevTool founders, engineers, and enthusiasts.\\n\\nLooking ahead, we\u2019re excited to collaborate with [MLH](https://mlh.io/), [Hack the North](https://hackthenorth.com/), [LangaraHacks](https://lhacks.langaracs.ca/), and more in September. If you\'d like to attend any of these events, be sure to sign up!\\n\\n---\\n\\n<img src=\\"/img/august-update/townhall.png\\" alt=\\"TownHall\\" style={{ width: 300 }} />\\n\\n---\\n\\n## Roadmap\\n\\nWe\'re working on a number of new features to make Defang even better. Here are some of the most exciting ones:\\n\\n- **Managed Postgres**: We\'re working on getting Defang to provision managed Postgres services for you, so you can easily store and query data in your applications.\\n- **DigitalOcean BYOC**: We\'re working on adding DigitalOcean BYOC to give you even more choice over where you deploy your applications.\\n\\n---\\n\\nWe\u2019re excited to keep enhancing Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud applications. Stay tuned for more updates next month! \ud83d\ude80"},{"id":"/2024/07/31/july-product-updates-2","metadata":{"permalink":"/blog/2024/07/31/july-product-updates-2","source":"@site/blog/2024-07-31-july-product-updates-2.md","title":"July 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-07-31T00:00:00.000Z","formattedDate":"July 31, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Debugging","permalink":"/blog/tags/debugging"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2.825,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"July 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","CLI","AI","Debugging","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"August 2024 Defang Compose Update","permalink":"/blog/2024/08/30/august-product-updates"},"nextItem":{"title":"June 2024 Defang Compose Update","permalink":"/blog/2024/07/01/july-product-updates"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nHey folks! We can\u2019t believe a month has gone by already, time flies when you\u2019re having fun! We continued to make progress on our vision of providing a radically simpler way to Develop, Deploy, and Debug cloud applications. In July, we spent time on a couple of key areas:\\n\\n1.  As our user-base grows, we wanted to make sure we\u2019re able to scale our [Playground](https://docs.defang.io/docs/concepts/defang-playground) environment to be able to handle the load. This involved being able to shard the workload across multiple ALBs and being able to dynamically move some workloads  across shards where possible. With these changes, we are now able handle a large number of concurrent users comfortably. The only noticeable change in behavior you would see is that Defang will now ask you to \u201c`compose down`\u201d your previous project before you are able to deploy a new project on Playground.\\n\\n2.  The major news this month was the introduction of our \u201c`debug`\u201d functionality. The motivation for this feature was that while the Defang experience is amazing when everything goes smoothly, we saw users (including our own interns who are helping write all those [samples](https://defang.io/samples)) struggle when they hit an error. The underlying reason for the error could come from a variety of sources: an error in the developer\u2019s application (including in their Dockerfile or Compose file), an issue in the way Defang is processing the application, or an issue in the underlying cloud platform (currently, AWS). To the developer, it is often not obvious what the issue is or how to fix it. That got us thinking how we could make this debugging experience \u201cradically simpler\u201d and thus the idea for `defang debug` was born.\\n\\n    Now (with CLI v0.5.37 if your application encounters an error that leads to a failed deployment, a failed health-check, or a run-time error, Defang will automatically detect the issue. It will then offer to help you debug it by running the `defang debug`  command. If you choose to proceed, Defang will apply an LLM model to try to determine the precise cause of the error, with the context of your application source, logs, error code etc. And it will try to come up with one or more actionable insights on how to fix the error. For an example, see the case below:\\n\\n\\n\\n    Behind the scenes, Defang is having a conversation on your behalf with the LLM to narrow down to the cause of the error.  We would love for you to try the `debug` feature and give us your feedback so we can improve it further. One future improvement already on our list is the ability to, with user consent, automatically apply a chosen fix and re-try. We are also looking for way to improve the range of failures we are able to diagnose successfully.\\n\\n## Townhall\\n\\nIf you\'re excited about what\'s coming next and want to hear more about our vision for the future, join us for our Townhall on August 21st. We\'ll be sharing more about our roadmap and what we\'re working on next. We\'ll also be making sure to take time to answer any questions you have, hear your feedback, and learn more about what you want from Defang!\\n\\n**[Register here](https://lu.ma/rlj13eq5)**\\n\\n---\\n\\nWe\u2019re excited to keep improving Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud application. Stay tuned for more updates next month."},{"id":"/2024/07/01/july-product-updates","metadata":{"permalink":"/blog/2024/07/01/july-product-updates","source":"@site/blog/2024-07-01-july-product-updates.md","title":"June 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-07-01T00:00:00.000Z","formattedDate":"July 1, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"Windows","permalink":"/blog/tags/windows"},{"label":"Managed Redis","permalink":"/blog/tags/managed-redis"},{"label":"CLI","permalink":"/blog/tags/cli"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":2.475,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"June 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","Windows","Managed Redis","CLI","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"July 2024 Defang Compose Update","permalink":"/blog/2024/07/31/july-product-updates-2"},"nextItem":{"title":"May 2024 Defang Compose Update","permalink":"/blog/2024/06/01/june-product-updates"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nHey folks! We\'ve got another batch of updates to share with you about what the Defang team has been working on over the past month. We\'re committed to improving your deployment experience, so let\'s take a look at what\'s new.\\n\\n## Windows Experience Improvements\\n\\nFor our Windows users out there, we\'ve made some changes to make your Defang experience even smoother:\\n\\n* You can now install Defang using `winget`, the Windows Package Manager, for a streamlined setup\\n* We\'ve introduced a signed binary for added security and peace of mind\\n\\nDeploying your apps from Windows just got a little bit nicer.\\n\\n## One-click Deploy\\n\\nWe\'ve added a new feature that will make it even easier to get started with Defang. We\'ve created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It\'s a great way to get started with Defang and start experimenting with your own projects.\\n\\nTry it now [from our portal](https://portal.defang.dev/sample)!\\n\\n![screenshot of 1-click deploy UI in portal](/img/july-update/1-click-deploy.png)\\n\\n## Managed Redis Updates\\n\\nWe first introduced this last month, but we\'ve since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: [BullMQ with Redis](https://github.com/DefangSamples/sample-bullmq-bullboard-redis-template). It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang.\\n\\n## Updated Samples\\n\\nWe\'ve updated our sample projects to showcase how to use them with Defang, including:\\n\\n* [ASP.NET Core](https://github.com/DefangSamples/sample-csharp-dotnet-template)\\n* [Feathers.js](https://github.com/DefangSamples/sample-feathersjs-template)\\n* [Flask & LangChain](https://github.com/DefangSamples/sample-langchain-template)\\n* [BullMQ with Redis](https://github.com/DefangSamples/sample-bullmq-bullboard-redis-template)\\n\\nCheck them out if you\'re looking for some inspiration or a starting point for your own projects.\\n\\n## CLI Updates\\n\\nWe\'re always looking for ways to enhance the CLI experience. Here\'s what\'s new:\\n\\n* `npx defang` automatically checks to always have the latest version of the CLI\\n* The output during `defang compose up` has been streamlined to focus on the most important information\\n* `defang tail` now supports listening to specific services, making it easier to troubleshoot issues\\n* We\'ve improved hints and error messages to better guide you when something goes wrong\\n* The CLI now has improved color support for light theme terminals, making it easier on the eyes\\n\\nIt\'s the small refinements that can make a big difference in your workflow.\\n\\n## Other Updates\\n\\nHere are a few more things that didn\'t quite fit with the rest:\\n\\n* Visibility into ECS deployment events in BYOC tail logs\\n* Improvements to ACME certificate generation\\n\\nKeep an eye out for these updates in the near future.\\n\\n---\\n\\nAs always, we\'d love your help shaping the future of Defang, so let us know what you\'d like to see next. Happy deploying! \ud83d\ude80"},{"id":"/2024/06/01/june-product-updates","metadata":{"permalink":"/blog/2024/06/01/june-product-updates","source":"@site/blog/2024-06-01-june-product-updates.md","title":"May 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-06-01T00:00:00.000Z","formattedDate":"June 1, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"Playground","permalink":"/blog/tags/playground"},{"label":"Load Testing","permalink":"/blog/tags/load-testing"},{"label":"ACME","permalink":"/blog/tags/acme"},{"label":"Managed Redis","permalink":"/blog/tags/managed-redis"},{"label":"Kaniko","permalink":"/blog/tags/kaniko"},{"label":"Postgres","permalink":"/blog/tags/postgres"},{"label":"ECS","permalink":"/blog/tags/ecs"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":3.19,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"May 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","Playground","Load Testing","ACME","Managed Redis","Kaniko","Postgres","ECS","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"June 2024 Defang Compose Update","permalink":"/blog/2024/07/01/july-product-updates"},"nextItem":{"title":"April 2024 Defang Compose Update","permalink":"/blog/2024/05/01/may-product-updates"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nHey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month:\\n\\n\\n## Samples, samples, samples!\\n\\nWe\'ve been cranking out samples like there\'s no tomorrow. We\'ve published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the [Defang homepage](https://defang.io/#deploy). Check out our video about all the [new samples and functionality](https://www.youtube.com/watch?v=8wIU_af-sX8).\\n\\n### Start from a sample in seconds\\n\\nWith all this work we\'ve been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run `defang generate` you\'ll be able to filter through the samples and choose one. You can also filter through the samples on the [Defang homepage](https://defang.io/#deploy) and clone any of them with a simple command like `defang new sveltekit`.\\n\\n### Sample templates\\n\\nIf you look through our [GitHub organization](https://github.com/DefangLabs), you\'ll start seeing loads of repos with the structure `sample-<sample_name>-template`. If you open them, you can create a new repo by clicking this button:\\n\\n![screenshot of github UI pointing towards template button](https://github.com/DefangLabs/defang-docs/assets/910895/97d33d90-43b9-499a-b139-e114b701adcb)\\n\\n\\nNot only will that create a new repo based on the sample in your account, but if you\'ve used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately.\\n\\n## ACME for BYOD\\n\\nWe\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let\'s Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy.\\n\\n## Warnings for Stateful Services\\n\\nTo help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn\'t actually be deploying anything stateful with Defang. For example, we\'ll warn you if you try to deploy services with images like `postgres:<version>`, `redis:<version>`, `minio:<version>`, etc. \\n\\nIn the near future we will be offering ways to run some stateful services using cloud providers\' managed offerings. For example Redis, Postgres, and S3. Speaking of which...\\n\\n## Managed Redis!\\n\\nRedis is such a versatile tool that can help with so many different use cases. So we\'ve introduced Managed Redis! You can now specify the Redis image in your `compose.yaml` file and indicate that you want it managed by your cloud provider using `x-defang-redis: true` in your service definition. \\n\\n## Load Testing\\n\\nTo make sure Defang is ready for loads of new users, we\'ve been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly.\\n\\n## Upgraded Kaniko\\n\\nWe\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications.\\n\\n## Upcoming Features\\n\\nWe\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon:\\n\\n### Managed Postgres\\n\\nBuilding on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment!\\n\\n### BYOC ECS Lifecycle Events\\n\\nDefang runs your services with ECS, and we\'re working on making it clearer what\'s happening under the hood. \\n\\n---\\n\\nStay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"},{"id":"/2024/05/01/may-product-updates","metadata":{"permalink":"/blog/2024/05/01/may-product-updates","source":"@site/blog/2024-05-01-may-product-updates.md","title":"April 2024 Defang Compose Update","description":"Defang Compose Update","date":"2024-05-01T00:00:00.000Z","formattedDate":"May 1, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"AWS ECS","permalink":"/blog/tags/aws-ecs"},{"label":"defang compose up","permalink":"/blog/tags/defang-compose-up"},{"label":"Defang Compose Update","permalink":"/blog/tags/defang-compose-update"}],"readingTime":1.82,"hasTruncateMarker":false,"authors":[{"name":"Defang Team"}],"frontMatter":{"title":"April 2024 Defang Compose Update","tags":["Cloud","NoDevOps","BYOC","AWS ECS","defang compose up","Defang Compose Update"],"author":"Defang Team"},"unlisted":false,"prevItem":{"title":"May 2024 Defang Compose Update","permalink":"/blog/2024/06/01/june-product-updates"},"nextItem":{"title":"Deploy a Go-powered slackbot with Defang","permalink":"/blog/2024/03/28/slackbot-sample"}},"content":"![Defang Compose Update](/img/defang-compose-update.webp)\\n\\nHey folks! There is a lot going on at Defang and we\'re excited to share our latest product updates with you. Over the last month, we\'ve been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here\'s a quick overview of what we\'ve been up to:\\n\\n## npx defang\\n\\nWe know a lot of you are using Defang for the first time. To make it easier to get started, we\'ve added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally by running:\\n\\n```bash\\nnpx defang@latest\\n```\\n\\nThis will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!\\n\\n## (coming soon) Bring Your Own Domain with Let\'s Encrypt\\n\\nPreviously you could bring your own domain with <a href=\\"/docs/concepts/defang-byoc\\">Defang BYOC</a>... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we\'ll take care of the rest. We\'ll help generate a Let\'s Encrypt certificate for your domain and automatically renew it for you.\\n\\n## Windows Support\\n\\nSome of you use Defang from a Windows PC and previously a few features didn\'t work correctly on Windows. Some stuff we\'ve fixed:\\n* ansi color codes in logs\\n* handle ctrl-c when tailing logs\\n\\n## Improved CLI\\n\\nWe\'ve made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable.\\n* log messages have been made more clear\\n* adding more progress information during compose up\\n\\n## Stability and Reliability\\n\\nDefang is still in Beta and we know we\'ve got to be rock solid by the time we release V1, so we\'ve been working hard to improve the stability and reliability of the Defang architecture. We\'ve been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:\\n* capacity improvements in build queues\\n* improvements in log availability"},{"id":"/2024/03/28/slackbot-sample","metadata":{"permalink":"/blog/2024/03/28/slackbot-sample","source":"@site/blog/2024-03-28-slackbot-sample.md","title":"Deploy a Go-powered slackbot with Defang","description":"Hey folks! Today, I\'m going to share one of our code samples that will show you how to deploy a simple Slack bot. If you\'re looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We\'ll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang.","date":"2024-03-28T00:00:00.000Z","formattedDate":"March 28, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"AWS ECS","permalink":"/blog/tags/aws-ecs"},{"label":"defang compose up","permalink":"/blog/tags/defang-compose-up"},{"label":"Slack API","permalink":"/blog/tags/slack-api"}],"readingTime":2.595,"hasTruncateMarker":false,"authors":[{"name":"Rapha\xebl Titsworth-Morin"}],"frontMatter":{"title":"Deploy a Go-powered slackbot with Defang","tags":["Cloud","NoDevOps","BYOC","AWS ECS","defang compose up","Slack API"],"author":"Rapha\xebl Titsworth-Morin"},"unlisted":false,"prevItem":{"title":"April 2024 Defang Compose Update","permalink":"/blog/2024/05/01/may-product-updates"},"nextItem":{"title":"Add Defang to your developer environments instantly","permalink":"/blog/2024/03/20/dev-environments"}},"content":"Hey folks! Today, I\'m going to share one of our code samples that will show you how to deploy a simple Slack bot. If you\'re looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We\'ll walk through a step-by-step process of writing a Go program using the [github.com/slack-go/slack](https://github.com/slack-go/slack) library to interact with the Slack API and easily deploy it using Defang.\\n\\n## Prerequisites\\n\\nBefore we dive into the details, let\'s make sure you have everything you need to get started:\\n\\n1.  **Install Defang CLI:** Simplify your deployment process by installing the Defang CLI tool. Follow the instructions [here](https://docs.defang.io/docs/getting-started#install-the-defang-cli) to get it up and running quickly.\\n\\n2.  **Slack API Token:** Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\xa0bot `chat:write`\xa0scope.\\n![screenshot of the slack admin UI showing the bot scopes](/img/slackbot-sample/scopes.png)\\n\\n3. **Install the app in your workspace:** You\'ll need to install the app in your workspace for it to work. Click the \\"Install to Workspace\\" button in the Slack admin UI to do this. Mine says \\"Reinstall\\" because I\'ve already installed it.\\n![screenshot of the slack admin UI showing the install button](/img/slackbot-sample/install-app.png)\\n\\n4. **Copy the Bot User OAuth Access Token:** This token will authenticate your Slackbot with the Slack API.\\n![screenshot of the slack admin UI showing the auth token field](/img/slackbot-sample/token.png)\\n\\n5. **Invite the Bot to a Channel:** To enable your Slackbot, invite it to the desired channel using the\xa0`@<botname>`\xa0command. In the screenshot below, my bot\'s name actually starts with the word invite, but if your bot is called `mycoolbot` you would invite it with `@mycoolbot`. This ensures your Slackbot has the required permissions to interact with the channel.\\n![screenshot of the slack chat UI showing me inviting my bot](/img/slackbot-sample/invite.png)\\n\\n6. **Clone the Sample Code:** Clone the Defang repository and navigate to the\xa0`samples/golang/slackbot`\xa0directory. This directory contains the sample code for the Slackbot.\\n\\n```bash\\ngit clone https://github.com/DefangLabs/defang\\ncd defang/samples/golang/slackbot\\n```\\n\\n## Deployment Steps\\n\\nNow that we have everything set up, let\'s dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:\\n\\n1.  **Set Up Secrets:** Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI\'s\xa0`defang config set`\xa0command to set the\xa0`SLACK_TOKEN`\xa0and `SLACK_CHANNEL_ID`\xa0configs.\\n    Replace\xa0`your_slack_token`\xa0and\xa0`your_slack_channel_id`\xa0with the respective values:\\n\\n    ```bash\\n    defang config set --name SLACK_TOKEN --value your_slack_token\\n    defang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id\\n    ```\\n\\n2.  **Deploy the Slackbot:**  Use the Defang CLI\'s\xa0`defang compose up`\xa0command to deploy.\\n\\n## Usage\\nWith your Slackbot up and running, let\'s explore how to make the most of it. Let\'s send a POST request to the\xa0`/`\xa0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:\\n\\n```bash\\ncurl \'https://raphaeltm-bot--8080.prod1.defang.dev/\' \\\\\\n  -H \'content-type: application/json\' \\\\\\n  --data-raw $\'{\\"message\\":\\"This is your bot speaking. We\\\\\'ll be landing in 10 minutes. Please fasten your seatbelts.\\"}\'\\n```\\n\\n## Takeaways\\nCongratulations! You\'ve successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless!"},{"id":"/2024/03/20/dev-environments","metadata":{"permalink":"/blog/2024/03/20/dev-environments","source":"@site/blog/2024-03-20-dev-environments.mdx","title":"Add Defang to your developer environments instantly","description":"Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command.","date":"2024-03-20T00:00:00.000Z","formattedDate":"March 20, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"AWS ECS","permalink":"/blog/tags/aws-ecs"},{"label":"defang compose up","permalink":"/blog/tags/defang-compose-up"},{"label":"developer environments","permalink":"/blog/tags/developer-environments"},{"label":"Cloud IDEs","permalink":"/blog/tags/cloud-id-es"},{"label":"CDE","permalink":"/blog/tags/cde"}],"readingTime":1.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Add Defang to your developer environments instantly","tags":["Cloud","NoDevOps","BYOC","AWS ECS","defang compose up","developer environments","Cloud IDEs","CDE"]},"unlisted":false,"prevItem":{"title":"Deploy a Go-powered slackbot with Defang","permalink":"/blog/2024/03/28/slackbot-sample"},"nextItem":{"title":"About my Journey Deploying my First Web Application","permalink":"/blog/2024/03/04/about-my-journey-deploying-my-first-web-application"}},"content":"Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications [to your own cloud](https://docs.defang.io/docs/concepts/defang-byoc) with a single command.\\n\\nWe want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container.\\n\\n<iframe style={{\\n    width: \'100%\',\\n    aspectRatio: \'560/315\',\\n}} src=\\"https://www.youtube.com/embed/71pmCfLdxTg?si=7hRL-4uyTDANLe78\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n## Codespaces\\n\\nIf you want to get started with Codespaces, you can just fork [this repo](https://github.com/DefangLabs/github-codespace). It comes with the Defang CLI pre-installed so you can start playing with it immediately. It\'s set up using the Defang CLI [Dev Container Feature](https://github.com/DefangLabs/devcontainer-feature/pkgs/container/devcontainer-feature%2Fdefang-cli).\\n\\n## Dev Containers\\n\\n[Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers) are a cool way to provision and configure development environments and share that configuration with other people you are working with. It\'s a spec that is supported by [VS Code](https://code.visualstudio.com/docs/devcontainers/containers), [Visual Studio](https://devblogs.microsoft.com/cppblog/dev-containers-for-c-in-visual-studio/), the JetBrains IDEs like [IntelliJ](https://www.jetbrains.com/help/idea/connect-to-devcontainer.html) and [PyCharm](https://www.jetbrains.com/help/pycharm/connect-to-devcontainer.html), [DevPod](https://devpod.sh/docs/developing-in-workspaces/devcontainer-json) and others.\\n\\n## Gitpod\\n\\nGitpod is another Cloud IDE, a bit like GitHub Codespaces. If prefer Gitpod, you can try Defang in a Gitpod environment by using [this repo](https://github.com/DefangLabs/gitpod-workspace/tree/main)."},{"id":"/2024/03/04/about-my-journey-deploying-my-first-web-application","metadata":{"permalink":"/blog/2024/03/04/about-my-journey-deploying-my-first-web-application","source":"@site/blog/2024-03-04-about-my-journey-deploying-my-first-web-application.mdx","title":"About my Journey Deploying my First Web Application","description":"About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang.","date":"2024-03-04T00:00:00.000Z","formattedDate":"March 4, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"AWS ECS","permalink":"/blog/tags/aws-ecs"},{"label":"defang compose up","permalink":"/blog/tags/defang-compose-up"}],"readingTime":3.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"About my Journey Deploying my First Web Application","tags":["Cloud","NoDevOps","BYOC","AWS ECS","defang compose up"]},"unlisted":false,"prevItem":{"title":"Add Defang to your developer environments instantly","permalink":"/blog/2024/03/20/dev-environments"},"nextItem":{"title":"Announcing the Defang Public Beta","permalink":"/blog/2024/02/12/announcing-defang-public-beta"}},"content":"<div align=\\"center\\">\\n    <em>About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang.</em>\\n</div>\\n<br/>\\n\\nAs a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost.\\n\\nStarting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \\"ECS clusters,\\" \\"task definitions,\\" and \\"IAM roles\\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers.\\n\\nIt was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn\'t fully prepare me for the hands-on challenges of real-life implementation. It\'s one thing to follow along with a guide when everything goes right; it\'s another to adapt when things don\'t quite match up to the tutorial\u2019s scenarios.\\n\\n\\n<div align=\\"center\\">\\n    <img src=\\"/img/how-AWS-looks.png\\" alt=\\"Example banner\\" width=\\"550px\\"/>\\n</div>\\n\\n<div align=\\"center\\">\\n   <em>It could be confusing if you are new to this area</em>\\n</div>\\n<br/>\\n\\nI ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating.\\n\\n<div align=\\"center\\">\\n    <img src=\\"/img/error-AWS.png\\" alt=\\"error-AWS\\" width=\\"550px\\"/>\\n</div>\\n\\n<div align=\\"center\\">\\n    <em>I have this scary screen when trying to delete the service I created; this is merely one of the many errors I faced</em>\\n</div>\\n<br/>\\n\\nThen I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project.\\n\\n\\n<div align=\\"center\\">\\n    <img src=\\"/img/defang-compose-up.png\\" alt=\\"defang-compose-up\\" width=\\"550px\\"/>\\n</div>\\n\\n<div align=\\"center\\">\\n    <em>with just a single command in the CLI</em>\\n</div>\\n<br/>\\n\\nWith Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started.\\n\\n\\n<div align=\\"center\\">\\n    <img src=\\"/img/sample-result.png\\" alt=\\"sample-result\\" width=\\"550px\\"/>\\n</div>\\n\\n<div align=\\"center\\">\\n   <em>It is deployed to the internet! (arorschach is my username)</em>\\n</div>\\n<br/>\\n\\nTry it yourself!\\n\\nSample Code: [Restaurant Homepage](https://github.com/HongchenY/Sample-Restaurant-Homepage)\\n\\nDefang Docs: [Docs](https://docs.defang.io/docs/intro)"},{"id":"/2024/02/12/announcing-defang-public-beta","metadata":{"permalink":"/blog/2024/02/12/announcing-defang-public-beta","source":"@site/blog/2024-02-12-announcing-defang-public-beta.md","title":"Announcing the Defang Public Beta","description":"Announcing the Defang Public Beta","date":"2024-02-12T00:00:00.000Z","formattedDate":"February 12, 2024","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"GenerativeAI","permalink":"/blog/tags/generative-ai"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"},{"label":"BYOC","permalink":"/blog/tags/byoc"},{"label":"AWS","permalink":"/blog/tags/aws"}],"readingTime":1.61,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Announcing the Defang Public Beta","tags":["Cloud","GenerativeAI","NoDevOps","BYOC","AWS"]},"unlisted":false,"prevItem":{"title":"About my Journey Deploying my First Web Application","permalink":"/blog/2024/03/04/about-my-journey-deploying-my-first-web-application"},"nextItem":{"title":"Announcing the Private Beta for the Defang Opinionated Platform","permalink":"/blog/2023/06/29/Announcing-the-Private-Beta-for-the-DOP"}},"content":"**Announcing the Defang Public Beta**\\n\\n**A radically simpler way for developers to create, deploy, and manage cloud applications.**\\n\\nEver since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more.\\n\\nAnd so, today with our Public Beta, we are addressing this request. With today\u2019s release of [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc) (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang **and** deploy applications to your own AWS account! Our Private Beta experience is still available as [Defang Playground](https://docs.defang.io/docs/concepts/defang-playground) for you to quickly and easily prototype applications and deploy them to our hosted environment.\\n\\nYou can learn more about Defang [here](https://docs.defang.io/docs/intro). Also check out our [tutorials](https://docs.defang.io/docs/category/tutorials), [samples](https://defang.io/samples), and [FAQ](https://docs.defang.io/docs/category/faq) to know more.\\n\\n**Try the Public Beta!**\\n\\nTo try the Public Beta, please go to [defang.io](http://defang.io) and click on [Download](https://github.com/DefangLabs/defang/releases/latest) to download the CLI and [get started](https://docs.defang.io/docs/getting-started). We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file [GitHub issues here](https://github.com/DefangLabs/defang/issues).\\n\\n**Stay Tuned for More**\\n\\nWhile the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!"},{"id":"/2023/06/29/Announcing-the-Private-Beta-for-the-DOP","metadata":{"permalink":"/blog/2023/06/29/Announcing-the-Private-Beta-for-the-DOP","source":"@site/blog/2023-06-29-Announcing-the-Private-Beta-for-the-DOP.md","title":"Announcing the Private Beta for the Defang Opinionated Platform","description":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization","date":"2023-06-29T00:00:00.000Z","formattedDate":"June 29, 2023","tags":[{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"GenerativeAI","permalink":"/blog/tags/generative-ai"},{"label":"NoDevOps","permalink":"/blog/tags/no-dev-ops"}],"readingTime":2.055,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Announcing the Private Beta for the Defang Opinionated Platform","tags":["Cloud","GenerativeAI","NoDevOps"]},"unlisted":false,"prevItem":{"title":"Announcing the Defang Public Beta","permalink":"/blog/2024/02/12/announcing-defang-public-beta"}},"content":"**Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization**\\n\\nWe\'re thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way.\\n\\nWe realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables **AI-assisted development**, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP **simplifies CI-CD** by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the **DOP pre-provisions properly secured and configured staging and production environments** for your application, optimized for security, scaling, and cost.\\n\\n**Try the Private Beta!**\\n\\nTo try the Private Beta, please go to [portal.defang.dev](https://portal.defang.dev) and register. We would love to have you kick the tires and give us your feedback! You can also check out our [documentation](https://docs.defang.io/docs/intro), [samples](https://docs.defang.io/docs/intro), and our [GitHub repository](https://github.com/DefangLabs).\\n\\n**Stay Tuned for More**\\n\\nWhile the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"}]}')}}]);