"use strict";(self.webpackChunkdefang_docs=self.webpackChunkdefang_docs||[]).push([[540],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(96540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}},74116:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorials/generate-new-code-using-ai","title":"Generate Project Outlines With AI","description":"This tutorial will show you how to use Defang\'s AI agent to generate a project outline, and then deploy that project to the cloud using Defang.","source":"@site/docs/tutorials/generate-new-code-using-ai.mdx","sourceDirName":"tutorials","slug":"/tutorials/generate-new-code-using-ai","permalink":"/docs/tutorials/generate-new-code-using-ai","draft":false,"unlisted":false,"editUrl":"https://github.com/DefangLabs/defang-docs/tree/main/docs/tutorials/generate-new-code-using-ai.mdx","tags":[],"version":"current","frontMatter":{"title":"Generate Project Outlines With AI"},"sidebar":"tutorialsSidebar","previous":{"title":"Estimating GCP Deployment Costs","permalink":"/docs/tutorials/estimating-gcp-deployment-costs"},"next":{"title":"Migrating from Heroku","permalink":"/docs/tutorials/migrating-from-heroku"}}');var r=n(74848),i=n(28453);const s={title:"Generate Project Outlines With AI"},a="Generate Project Outlines With AI",l={},c=[{value:"Step 1 - Use the <code>defang generate</code> command in the CLI",id:"step-1---use-the-defang-generate-command-in-the-cli",level:2},{value:"Step 2 - Review the Code",id:"step-2---review-the-code",level:2},{value:"Step 3 - Build and Deploy",id:"step-3---build-and-deploy",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"generate-project-outlines-with-ai",children:"Generate Project Outlines With AI"})}),"\n",(0,r.jsxs)(t.p,{children:["This tutorial will show you how to use Defang's AI agent to ",(0,r.jsx)(t.a,{href:"/docs/concepts/generate",children:"generate"})," a project outline, and then deploy that project to the cloud using Defang."]}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/afglsBYieuc?si=GCvHhBu3H9ktMDHA",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,r.jsxs)(t.h2,{id:"step-1---use-the-defang-generate-command-in-the-cli",children:["Step 1 - Use the ",(0,r.jsx)(t.code,{children:"defang generate"})," command in the CLI"]}),"\n",(0,r.jsxs)(t.p,{children:["Here you can describe what you would like the service to do and the ",(0,r.jsx)(t.a,{href:"/docs/intro/getting-started#install-the-defang-cli",children:"CLI"})," will then ",(0,r.jsx)(t.a,{href:"/docs/concepts/generate",children:"generate"})," a project outline with all the files required to make it deployable with Defang."]}),"\n",(0,r.jsx)(t.p,{children:"In this tutorial, we'll use the following prompt to describe our service:"}),"\n",(0,r.jsxs)(t.p,{children:['"A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: ',(0,r.jsx)(t.code,{children:'{ "status": "OK" }'}),'. The /echo endpoint will echo back all request parameters in the response."']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'defang generate\n\n? Choose the language you\'d like to use:  [Use arrows to move, type to filter, ? for more help]\n> Nodejs\n  Golang\n  Python\n\n? Choose a sample service:\nGenerate with AI\n\n? Please describe the service you\'d like to build: [? for help]\nA basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { "status": "OK" }. The /echo endpoint will echo back all request parameters in the response.\n\n? What folder would you like to create the service in? [? for help] (service1)\nproject1\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This will ",(0,r.jsx)(t.a,{href:"/docs/concepts/generate",children:"generate"})," the different files required to start your project based on your prompt and the language selected."]}),"\n",(0,r.jsx)(t.h2,{id:"step-2---review-the-code",children:"Step 2 - Review the Code"}),"\n",(0,r.jsx)(t.p,{children:"Change into the new project folder:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"cd project1\n"})}),"\n",(0,r.jsx)(t.p,{children:"You can open the files in a code editor to review or make changes as needed before deploying the service."}),"\n",(0,r.jsx)(t.h2,{id:"step-3---build-and-deploy",children:"Step 3 - Build and Deploy"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"defang compose up\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);