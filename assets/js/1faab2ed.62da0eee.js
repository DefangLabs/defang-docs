"use strict";(self.webpackChunkdefang_docs=self.webpackChunkdefang_docs||[]).push([[7939],{2234:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=o(4848),s=o(8453);const i={title:"Deployment",description:"Defang will build your services in the cloud and manage the deployment process for you.",sidebar_position:500},r="Deployment",d={id:"concepts/deployments",title:"Deployment",description:"Defang will build your services in the cloud and manage the deployment process for you.",source:"@site/docs/concepts/deployments.md",sourceDirName:"concepts",slug:"/concepts/deployments",permalink:"/docs/concepts/deployments",draft:!1,unlisted:!1,editUrl:"https://github.com/DefangLabs/defang-docs/tree/main/docs/concepts/deployments.md",tags:[],version:"current",sidebarPosition:500,frontMatter:{title:"Deployment",description:"Defang will build your services in the cloud and manage the deployment process for you.",sidebar_position:500},sidebar:"docsSidebar",previous:{title:"Managed Storage",permalink:"/docs/concepts/managed-storage"},next:{title:"Observability",permalink:"/docs/concepts/observability"}},a={},c=[{value:"Deploying Updates",id:"deploying-updates",level:2},{value:"Instance Types",id:"instance-types",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"deployment",children:"Deployment"}),"\n",(0,t.jsxs)(n.p,{children:["When you deploy using Defang, whether it's with ",(0,t.jsx)(n.code,{children:"defang compose up"})," with a ",(0,t.jsx)(n.a,{href:"/docs/concepts/compose",children:"compose file"})," or using a ",(0,t.jsx)(n.a,{href:"/docs/concepts/pulumi",children:"Pulumi program"}),", Defang will build your services in the cloud and manage the deployment process for you. If you provide a Dockerfile and build context, Defang will upload the files found within the build context to the cloud (either yours in ",(0,t.jsx)(n.a,{href:"/docs/concepts/defang-byoc",children:"Defang BYOC"})," or ours in ",(0,t.jsx)(n.a,{href:"/docs/concepts/defang-playground",children:"Defang Playground"}),"), build the image, and store it in the cloud provider's container registry."]}),"\n",(0,t.jsx)(n.h2,{id:"deploying-updates",children:"Deploying Updates"}),"\n",(0,t.jsx)(n.p,{children:"When you run a deployment to update one or more services, Defang will also make sure to get your new services up and running before deprovisioning any old services so you don't have to worry about downtime."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.a,{href:"/docs/concepts/defang-byoc",children:"Defang BYOC"}),", Defang will use your cloud provider account to build and store your images. In ",(0,t.jsx)(n.a,{href:"/docs/concepts/defang-playground",children:"Defang Playground"})," we will build and store your images for you."]})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates."})}),"\n",(0,t.jsx)(n.h2,{id:"instance-types",children:"Instance Types"}),"\n",(0,t.jsxs)(n.p,{children:['Defang defaults to "spot" instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the ',(0,t.jsx)(n.a,{href:"https://12factor.net/",children:"12 Factor"})," principle of ",(0,t.jsx)(n.a,{href:"https://12factor.net/disposability",children:"disposability"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:'In the future, we may provide a way to use "on-demand" instances for workloads that require more stability.'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);