"use strict";(self.webpackChunkdefang_docs=self.webpackChunkdefang_docs||[]).push([[1144],{9044:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=o(7624),s=o(2172);const i={title:"Build and deploy code",sidebar_position:100},r="Deploy Code Using a Docker Compose File",a={id:"tutorials/deploy-code-compose",title:"Build and deploy code",description:"This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder.",source:"@site/docs/tutorials/deploy-code-compose.mdx",sourceDirName:"tutorials",slug:"/tutorials/deploy-code-compose",permalink:"/docs/tutorials/deploy-code-compose",draft:!1,unlisted:!1,editUrl:"https://github.com/defang-io/defang-docs/tree/main/docs/tutorials/deploy-code-compose.mdx",tags:[],version:"current",sidebarPosition:100,frontMatter:{title:"Build and deploy code",sidebar_position:100},sidebar:"docsSidebar",previous:{title:"Create an outline using AI",permalink:"/docs/tutorials/generate-new-code-using-ai"},next:{title:"Deploy pre-built container",permalink:"/docs/tutorials/deploy-container-using-the-cli"}},c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"deploy-code-using-a-docker-compose-file",children:"Deploy Code Using a Docker Compose File"}),"\n",(0,t.jsx)(n.p,{children:"This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder."}),"\n",(0,t.jsx)(n.p,{children:"If you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file."}),"\n",(0,t.jsx)(n.h1,{id:"step-1---create-mainjs",children:"Step 1 - Create main.js"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called ",(0,t.jsx)(n.code,{children:"main.js"})," with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Welcome to Defang\\n');\n});\n\nserver.listen(3000, '0.0.0.0', () => {\n    console.log('Server running at http://127.0.0.1:3000/');\n});\n"})}),"\n",(0,t.jsx)(n.h1,{id:"step-2---create-dockerfile",children:"Step 2 - Create Dockerfile"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called ",(0,t.jsx)(n.code,{children:"Dockerfile"})," with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Use an official Node runtime based on Alpine as a parent image\nFROM node:18-alpine\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Run the app when the container launches\nENTRYPOINT [ "node", "main.js" ]\n'})}),"\n",(0,t.jsx)(n.h1,{id:"step-3---create-docker-composeyml",children:"Step 3 - Create docker-compose.yml"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a Docker Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"version: '3.9'\nservices:\n  minimal:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - mode: ingress\n        target: 3000\t\t\n"})}),"\n",(0,t.jsx)(n.h1,{id:"step-4---deploy",children:"Step 4 - Deploy"}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have the code and the Docker Compose file, we can deploy the service using the ",(0,t.jsx)(n.code,{children:"defang compose up"})," command. This will bundle the code into a container and deploy it with Defang. If you have ",(0,t.jsx)(n.a,{href:"../concepts/defang-byoc",children:"cloud credentials configured"}),", the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to ",(0,t.jsx)(n.a,{href:"../concepts/defang-playground",children:"Defang Playground"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"defang compose up\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},2172:(e,n,o)=>{o.d(n,{I:()=>a,M:()=>r});var t=o(1504);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);