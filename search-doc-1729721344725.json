{"searchDocs":[{"title":"July 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-07-31-product-update","content":"","keywords":"","version":null},{"title":"Townhall​","type":1,"pageTitle":"July 2024 Defang Compose Update","url":"/blog/2024-07-31-product-update#townhall","content":" If you're excited about what's coming next and want to hear more about our vision for the future, join us for our Townhall on August 21st. We'll be sharing more about our roadmap and what we're working on next. We'll also be making sure to take time to answer any questions you have, hear your feedback, and learn more about what you want from Defang!  Register here    We’re excited to keep improving Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud application. Stay tuned for more updates next month. ","version":null,"tagName":"h2"},{"title":"August 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-08-31-product-update","content":"","keywords":"","version":null},{"title":"Ask Defang​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#ask-defang","content":" We've just rolled out an initial version of Ask Defang, our AI-driven documentation assistant that can help you navigate the Defang docs and get deploying faster. It's deployed with Defang and using a combination of embeddings run on a GPU-powered service, Defang managed Redis, and OpenAI APIs.  Check it out here or head to ask.defang.io to get started!  ","version":null,"tagName":"h2"},{"title":"Enhanced Platform Symmetry​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#enhanced-platform-symmetry","content":" We've been hard at work improving the symmetry between our Playground and BYOC environments as well as docker compose up vs defang compose up to provide a more seamless experience. You can now use multiple compose files and in BYOC the CLI will subscribe to events to monitor service health during deployments.  ","version":null,"tagName":"h2"},{"title":"AI Features and Debugging Improvements​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#ai-features-and-debugging-improvements","content":" We've been working on several AI-driven enhancements to make your development process even more efficient. We've addressed key issues, such as file generation failures due to parsing errors and invalid compose files. Also, our Debug Assistant is now more robust, handling context size limits better than before.      ","version":null,"tagName":"h2"},{"title":"August Events​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#august-events","content":" This month, we hosted an in-person workshop to get more developers acquainted with Defang and simplify their cloud app journey. You can view the presentation here. We also held the first-ever DevTools Vancouver meetup, bringing together local DevTool founders, engineers, and enthusiasts.  Looking ahead, we’re excited to collaborate with MLH, Hack the North, LangaraHacks, and more in September. If you'd like to attend any of these events, be sure to sign up!      ","version":null,"tagName":"h2"},{"title":"Townhall​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#townhall","content":" Mark your calendars! If you’re eager to learn more about what’s coming next, join us for our Townhall on September 25th. We’ll be sharing our future roadmap, answering your questions, and gathering your feedback.  .css-s4g7hi{font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-s4g7hi:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-s4g7hi:hover{background-color:#1976d2;}}.css-s4g7hi:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} .css-110xwq5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;background-color:transparent;outline:0;border:0;margin:0;border-radius:0;padding:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;-moz-appearance:none;-webkit-appearance:none;-webkit-text-decoration:none;text-decoration:none;color:inherit;font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-110xwq5::-moz-focus-inner{border-style:none;}.css-110xwq5.Mui-disabled{pointer-events:none;cursor:default;}@media print{.css-110xwq5{-webkit-print-color-adjust:exact;color-adjust:exact;}}.css-110xwq5:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-110xwq5:hover{background-color:#1976d2;}}.css-110xwq5:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-110xwq5.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-110xwq5.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} Register here!    ","version":null,"tagName":"h2"},{"title":"Roadmap​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#roadmap","content":" We're working on a number of new features to make Defang even better. Here are some of the most exciting ones:  Managed Postgres: We're working on getting Defang to provision managed Postgres services for you, so you can easily store and query data in your applications.Digital Ocean BYOC: We're working on adding Digital Ocean BYOC to give you even more choice over where you deploy your applications.    We’re excited to keep enhancing Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud applications. Stay tuned for more updates next month! 🚀 ","version":null,"tagName":"h2"},{"title":"About my Journey Deploying my First Web Application","type":0,"sectionRef":"#","url":"/blog/about-my-journey-deploying-my-first-web-application","content":"About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors’ instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like &quot;ECS clusters,&quot; &quot;task definitions,&quot; and &quot;IAM roles&quot; were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial’s scenarios. It could be confusing if you are new to this area I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. I have this scary screen when trying to delete the service I created; this is merely one of the many errors I faced Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. with just a single command in the CLI With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. It is deployed to the internet! (arorschach is my username) Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs","keywords":"","version":null},{"title":"Announcing the Private Beta for the Defang Opinionated Platform","type":0,"sectionRef":"#","url":"/blog/announcement","content":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"September 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-09-30-product-update","content":"","keywords":"","version":null},{"title":"September Events​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024-09-30-product-update#september-events","content":" In Sep, the Defang team participated in a number of events including HacktheNorth, LangaraHacks, MLH Global Hack Week and other MLH hackathons. It’s great to see Defang being put to use by these hackers to build their amazing projects. And we get useful insights from these events that help us improve the product. We will continue to do more of these events in the future - watch our LinkedIn page for announcements.    ","version":null,"tagName":"h2"},{"title":"Google for Startups Accelerator Canada​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024-09-30-product-update#google-for-startups-accelerator-canada","content":" Also in Sep, Defang was included in the Google for Startups Accelerator Canada. This is a great recognition of the value Defang is providing to cloud developers. Through our collaboration with Google, we hope to add GCP as another target cloud for Defang in the coming months - stay tuned!      ","version":null,"tagName":"h2"},{"title":"Defang Coffee Chat​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024-09-30-product-update#defang-coffee-chat","content":" Mark your calendars! If you’re eager to learn more about what’s coming next, join us for our Defang Coffee Chat on Oct 23rd. We’ll be sharing our future roadmap, answering your questions, and gathering your feedback.  .css-s4g7hi{font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-s4g7hi:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-s4g7hi:hover{background-color:#1976d2;}}.css-s4g7hi:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} .css-110xwq5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;background-color:transparent;outline:0;border:0;margin:0;border-radius:0;padding:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;-moz-appearance:none;-webkit-appearance:none;-webkit-text-decoration:none;text-decoration:none;color:inherit;font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-110xwq5::-moz-focus-inner{border-style:none;}.css-110xwq5.Mui-disabled{pointer-events:none;cursor:default;}@media print{.css-110xwq5{-webkit-print-color-adjust:exact;color-adjust:exact;}}.css-110xwq5:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-110xwq5:hover{background-color:#1976d2;}}.css-110xwq5:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-110xwq5.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-110xwq5.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} Register here!    As always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! 🚀 ","version":null,"tagName":"h2"},{"title":"Announcing the Defang Public Beta","type":0,"sectionRef":"#","url":"/blog/announcing-defang-public-beta","content":"Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today’s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you’ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Add Defang to your developer environments instantly","type":0,"sectionRef":"#","url":"/blog/dev-environments","content":"","keywords":"","version":null},{"title":"Codespaces​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#codespaces","content":" If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature.  ","version":null,"tagName":"h2"},{"title":"Dev Containers​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#dev-containers","content":" Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others.  ","version":null,"tagName":"h2"},{"title":"GitPod​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#gitpod","content":" GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. ","version":null,"tagName":"h2"},{"title":"April 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/may-2024-product-update","content":"","keywords":"","version":null},{"title":"npx defang​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#npx-defang","content":" We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run:  npx defang@latest   This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!  ","version":null,"tagName":"h2"},{"title":"(coming soon) Bring Your Own Domain with Let's Encrypt​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#coming-soon-bring-your-own-domain-with-lets-encrypt","content":" Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you.  ","version":null,"tagName":"h2"},{"title":"Windows Support​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#windows-support","content":" Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed:  ansi color codes in logshandle ctrl-c when tailing logs  ","version":null,"tagName":"h2"},{"title":"Improved CLI​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#improved-cli","content":" We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable.  log messages have been made more clearadding more progress information during compose up  ","version":null,"tagName":"h2"},{"title":"Stability and Reliability​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#stability-and-reliability","content":" Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:  capacity improvements in build queuesimprovements in log availability ","version":null,"tagName":"h2"},{"title":"Deploy a Go-powered slackbot with Defang","type":0,"sectionRef":"#","url":"/blog/slackbot-sample","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#prerequisites","content":" Before we dive into the details, let's make sure you have everything you need to get started:  Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the bot chat:write scope. Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the &quot;Install to Workspace&quot; button in the Slack admin UI to do this. Mine says &quot;Reinstall&quot; because I've already installed it. Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API. Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the @&lt;botname&gt; command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel. Clone the Sample Code: Clone the Defang repository and navigate to the samples/golang/slackbot directory. This directory contains the sample code for the Slackbot.  git clone https://github.com/DefangLabs/defang cd defang/samples/golang/slackbot   ","version":null,"tagName":"h2"},{"title":"Deployment Steps​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#deployment-steps","content":" Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:  Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's defang config set command to set the SLACK_TOKEN and SLACK_CHANNEL_ID configs. Replace your_slack_token and your_slack_channel_id with the respective values: defang config set --name SLACK_TOKEN --value your_slack_token defang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id Deploy the Slackbot: Use the Defang CLI's defang compose up command to deploy.  ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#usage","content":" With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the / endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:  curl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\ -H 'content-type: application/json' \\ --data-raw $'{&quot;message&quot;:&quot;This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.&quot;}'   ","version":null,"tagName":"h2"},{"title":"Takeaways​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#takeaways","content":" Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! ","version":null,"tagName":"h2"},{"title":"May 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/june-2024-product-update","content":"","keywords":"","version":null},{"title":"Samples, samples, samples!​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#samples-samples-samples","content":" We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality.  ","version":null,"tagName":"h2"},{"title":"Start from a sample in seconds​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#start-from-a-sample-in-seconds","content":" With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit.  ","version":null,"tagName":"h3"},{"title":"Sample templates​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#sample-templates","content":" If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-&lt;sample_name&gt;-template. If you open them, you can create a new repo by clicking this button:    Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately.  ","version":null,"tagName":"h3"},{"title":"ACME for BYOD​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#acme-for-byod","content":" We’re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy.  ","version":null,"tagName":"h2"},{"title":"Warnings for Stateful Services​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#warnings-for-stateful-services","content":" To help you avoid potential pitfalls, we’ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:&lt;version&gt;, redis:&lt;version&gt;, minio:&lt;version&gt;, etc.  In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which...  ","version":null,"tagName":"h2"},{"title":"Managed Redis!​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#managed-redis","content":" Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition.  ","version":null,"tagName":"h2"},{"title":"Load Testing​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#load-testing","content":" To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly.  ","version":null,"tagName":"h2"},{"title":"Upgraded Kaniko​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#upgraded-kaniko","content":" We’ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications.  ","version":null,"tagName":"h2"},{"title":"Upcoming Features​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#upcoming-features","content":" We’re not stopping here! Here’s a sneak peek at what’s coming soon:  ","version":null,"tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#managed-postgres","content":" Building on the momentum of Managed Redis, we’re introducing Managed Postgres. Soon you’ll be able to easily integrate a managed Postgres database into your deployment!  ","version":null,"tagName":"h3"},{"title":"BYOC ECS Lifecycle Events​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#byoc-ecs-lifecycle-events","content":" Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood.    Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! 🚀 ","version":null,"tagName":"h3"},{"title":"June 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/july-2024-product-update","content":"","keywords":"","version":null},{"title":"Windows Experience Improvements​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#windows-experience-improvements","content":" For our Windows users out there, we've made some changes to make your Defang experience even smoother:  You can now install Defang using winget, the Windows Package Manager, for a streamlined setupWe've introduced a signed binary for added security and peace of mind  Deploying your apps from Windows just got a little bit nicer.  ","version":null,"tagName":"h2"},{"title":"One-click Deploy​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#one-click-deploy","content":" We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects.  Try it now from our portal!    ","version":null,"tagName":"h2"},{"title":"Managed Redis Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#managed-redis-updates","content":" We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang.  ","version":null,"tagName":"h2"},{"title":"Updated Samples​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#updated-samples","content":" We've updated our sample projects to showcase how to use them with Defang, including:  ASP.NET CoreFeathers.jsFlask &amp; LangChainBullMQ with Redis  Check them out if you're looking for some inspiration or a starting point for your own projects.  ","version":null,"tagName":"h2"},{"title":"CLI Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#cli-updates","content":" We're always looking for ways to enhance the CLI experience. Here's what's new:  npx defang automatically checks to always have the latest version of the CLIThe output during defang compose up has been streamlined to focus on the most important informationdefang tail now supports listening to specific services, making it easier to troubleshoot issuesWe've improved hints and error messages to better guide you when something goes wrongThe CLI now has improved color support for light theme terminals, making it easier on the eyes  It's the small refinements that can make a big difference in your workflow.  ","version":null,"tagName":"h2"},{"title":"Other Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#other-updates","content":" Here are a few more things that didn't quite fit with the rest:  Visibility into ECS deployment events in BYOC tail logsImprovements to ACME certificate generation  Keep an eye out for these updates in the near future.    As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! 🚀 ","version":null,"tagName":"h2"},{"title":"Ask Defang","type":0,"sectionRef":"#","url":"/docs/ask","content":"Ask Defang","keywords":"","version":"Next"},{"title":"defang","type":0,"sectionRef":"#","url":"/docs/cli/defang","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#options","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -h, --help help for defang -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#see-also","content":" defang cert - Manage certificatesdefang compose - Work with local Compose filesdefang config - Add, update, or delete service configdefang down - Reads a Compose file and deprovisions its servicesdefang generate - Generate a sample Defang projectdefang login - Authenticate to Defangdefang logout - Log outdefang new - Create a new Defang project from a sampledefang restart - Restart one or more servicesdefang services - Get list of services in the projectdefang tail - Tail logs from one or more servicesdefang terms - Read and/or agree the Defang terms of servicedefang token - Manage personal access tokensdefang up - Reads a Compose file and deploy a new project or update an existing projectdefang upgrade - Upgrade the Defang CLI to the latest versiondefang version - Get version information for the CLI and Fabric servicedefang whoami - Show the current user  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cert","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options","content":"  -h, --help help for cert   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang cert generate - Generate a TLS certificate  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose","content":"","keywords":"","version":"Next"},{"title":"Synopsis​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#synopsis","content":" Define and deploy multi-container applications with Defang. Most compose commands require a &quot;compose.yaml&quot; file. The simplest &quot;compose.yaml&quot; file with a single service is:  services: app: # the name of the service build: . # the folder with the Dockerfile and app sources (. means current folder) ports:  80 # the port the service listens on for HTTP requests  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options","content":"  -h, --help help for compose   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang compose config - Reads a Compose file and shows the generated configdefang compose down - Reads a Compose file and deprovisions its servicesdefang compose logs - Tail logs from one or more servicesdefang compose ps - Get list of services in the projectdefang compose restart - Reads a Compose file and restarts its servicesdefang compose start - Reads a Compose file and deploys services to the clusterdefang compose stop - Reads a Compose file and stops its servicesdefang compose up - Reads a Compose file and deploy a new project or update an existing project  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cert generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#see-also","content":" defang cert - Manage certificates  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose down","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_down","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options","content":"  -d, --detach run in detached mode -h, --help help for down   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose logs","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_logs","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#options","content":"  --etag string deployment ID (ETag) of the service -h, --help help for logs -n, --name string name of the service -r, --raw show raw (unparsed) logs -S, --since string show logs since duration/time --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose config","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose ps","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_ps","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#options","content":"  -h, --help help for ps -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose start","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_start","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose start","url":"/docs/cli/defang_compose_start#options","content":"  --force force a build of the image even if nothing has changed -h, --help help for start   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose start","url":"/docs/cli/defang_compose_start#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose start","url":"/docs/cli/defang_compose_start#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose stop","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_stop","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose stop","url":"/docs/cli/defang_compose_stop#options","content":"  -h, --help help for stop   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose stop","url":"/docs/cli/defang_compose_stop#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose stop","url":"/docs/cli/defang_compose_stop#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose up","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_up","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options","content":"  -d, --detach run in detached mode --force force a build of the image even if nothing has changed -h, --help help for up -m, --mode mode deployment mode, possible values: production, development, staging (default development) --wait-timeout int maximum duration to wait for the project to be running|healthy (default -1)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config","type":0,"sectionRef":"#","url":"/docs/cli/defang_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang config create - Adds or updates a sensitive config valuedefang config ls - List configsdefang config rm - Removes one or more config values  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose restart","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_restart","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose restart","url":"/docs/cli/defang_compose_restart#options","content":"  -h, --help help for restart   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose restart","url":"/docs/cli/defang_compose_restart#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose restart","url":"/docs/cli/defang_compose_restart#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config create","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_create","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options","content":"  -e, --env set the config from an environment variable -h, --help help for create   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config rm","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_rm","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options","content":"  -h, --help help for rm   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config ls","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_ls","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options","content":"  -h, --help help for ls   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang logout","type":0,"sectionRef":"#","url":"/docs/cli/defang_logout","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options","content":"  -h, --help help for logout   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang down","type":0,"sectionRef":"#","url":"/docs/cli/defang_down","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang down","url":"/docs/cli/defang_down#options","content":"  -d, --detach run in detached mode -h, --help help for down   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang down","url":"/docs/cli/defang_down#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang down","url":"/docs/cli/defang_down#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang login","type":0,"sectionRef":"#","url":"/docs/cli/defang_login","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options","content":"  -h, --help help for login   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang services","type":0,"sectionRef":"#","url":"/docs/cli/defang_services","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options","content":"  -h, --help help for services -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang restart","type":0,"sectionRef":"#","url":"/docs/cli/defang_restart","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang restart","url":"/docs/cli/defang_restart#options","content":"  -h, --help help for restart   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang restart","url":"/docs/cli/defang_restart#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang restart","url":"/docs/cli/defang_restart#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang tail","type":0,"sectionRef":"#","url":"/docs/cli/defang_tail","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options","content":"  --etag string deployment ID (ETag) of the service -h, --help help for tail -n, --name string name of the service -r, --raw show raw (unparsed) logs -S, --since string show logs since duration/time --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang new","type":0,"sectionRef":"#","url":"/docs/cli/defang_new","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang new","url":"/docs/cli/defang_new#options","content":"  -h, --help help for new   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang new","url":"/docs/cli/defang_new#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang new","url":"/docs/cli/defang_new#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang token","type":0,"sectionRef":"#","url":"/docs/cli/defang_token","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options","content":"  --expires duration validity duration of the token (default 24h0m0s) -h, --help help for token --scope string scope of the token; one of [admin delete read tail delete] (required)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang upgrade","type":0,"sectionRef":"#","url":"/docs/cli/defang_upgrade","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#options","content":"  -h, --help help for upgrade   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang terms","type":0,"sectionRef":"#","url":"/docs/cli/defang_terms","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options","content":"  --agree-tos agree to the Defang terms of service -h, --help help for terms   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang up","type":0,"sectionRef":"#","url":"/docs/cli/defang_up","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang up","url":"/docs/cli/defang_up#options","content":"  -d, --detach run in detached mode --force force a build of the image even if nothing has changed -h, --help help for up -m, --mode mode deployment mode, possible values: staging, production, development (default development) --wait-timeout int maximum duration to wait for the project to be running|healthy (default -1)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang up","url":"/docs/cli/defang_up#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang up","url":"/docs/cli/defang_up#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang version","type":0,"sectionRef":"#","url":"/docs/cli/defang_version","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options","content":"  -h, --help help for version   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"defang whoami","type":0,"sectionRef":"#","url":"/docs/cli/defang_whoami","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options","content":"  -h, --help help for whoami   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 23-Oct-2024​ ","version":"Next","tagName":"h3"},{"title":"Accounts","type":0,"sectionRef":"#","url":"/docs/concepts/accounts","content":"","keywords":"","version":"Next"},{"title":"Creating an Account​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#creating-an-account","content":" To create an account, simply login to Defang and accept the terms of service using the CLI.  At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#structure","content":" Your GitHub username will be used as your Defang username and your Defang username is used to group all your services and to generate domains for your services with the following structure:  &lt;username&gt;-&lt;servicename&gt;--&lt;port&gt;.prod1.defang.dev   warning Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.  info We plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future. ","version":"Next","tagName":"h2"},{"title":"Compose","type":0,"sectionRef":"#","url":"/docs/concepts/compose","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#how-it-works","content":" You can define your services using a compose.yaml file in the root of your project, or use the defang generate command to generate one (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services.  When you run defang compose up, Defang will read your compose.yaml file and deploy the services named in that file to the cloud.  ","version":"Next","tagName":"h2"},{"title":"Service Name Resolution​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#service-name-resolution","content":" One thing to keep in mind is that, at the time of this writing, Defang identifies services by the user/account name and the service name (as defined in the compose.yaml file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#configuration","content":" If you have a service that depends on a secret like an api key, you can set that secret using the CLI:  defang config set --name MY_API_KEY   and then connect it to the service by specifying it in the compose.yaml:  services: my-service: secrets: - MY_API_KEY secrets: MY_API_KEY: external: true   Configuration &amp; Secrets Read more about configuration in the configuration page. ","version":"Next","tagName":"h2"},{"title":"Debug","type":0,"sectionRef":"#","url":"/docs/concepts/debug","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Debug","url":"/docs/concepts/debug#how-it-works","content":" When you deploy a service to the Defang Playground, the Defang CLI will wait for the service's status to switch to healthy. If the service fails to deploy, the AI debugger will kick in. It will analyze the logs and files in your project to identify the issue and provide you with a suggested fix.  warning The AI debugger currently only works in Playground. We plan to expand this to BYOC providers in the near future.  info The AI debugger only kicks in when the service fails to deploy. This could be because of a build failure, healthchecks failing, or a variety of other issues. At the moment, we do not offer any way to trigger the AI debugger manually. ","version":"Next","tagName":"h2"},{"title":"Defang BYOC","type":0,"sectionRef":"#","url":"/docs/concepts/defang-byoc","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#configuration","content":" The Defang CLI can be configured to deploy to a cloud provider either by using the --provider flag or by setting the DEFANG_PROVIDER environment variable. For example:  # Supported provider values: auto, aws, defang, digitalocean # Default is auto, which deploys to the Defang Playground but warns if it detects cloud credentials $ defang up --provider=aws # or $ export DEFANG_PROVIDER=digitalocean   ","version":"Next","tagName":"h3"},{"title":"AWS​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#aws","content":" info The Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024.  Please read the AWS Provider documentation for more details about how the AWS provider works and how to get started.  ","version":"Next","tagName":"h2"},{"title":"DigitalOcean​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#digitalocean","content":" info The Public Preview of the v1 Defang BYOC DigitalOcean Provider as of October 1 2024.  Please read the DigitalOcean Provider documentation for more details about how the DigitalOcean provider works and how to get started.  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#gcp","content":" info We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue.  ","version":"Next","tagName":"h2"},{"title":"Azure​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#azure","content":" info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue. ","version":"Next","tagName":"h2"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/concepts/configuration","content":"","keywords":"","version":"Next"},{"title":"Interpolation​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#interpolation","content":" Environment variables are set within the environment section of a service in a compose.yaml file. Any variables declared here will become available within the service container.  Variables can be set by assigning a literal value, a reference to a configuration value, or a mix of literal and variable references. Variable references are declared using either ${variable_name} or $variable_name forms. It is recommended to use the bracketed form. By interpolating over variable references within a string we can construct complex strings. Interpolation may be particularly useful when constructing connection strings to other services.  service: environment: - USER_PASSWORD // configuration variable - USER_NAME // configuration variable - CONNECT=dbservice:${USER_NAME}:${USER_PASSWORD}@example.com:9876   In the example above, if we assume the value of the configuration variable USER_PASSWORD is password then the value assigned to CONNECT will resolve to dbservice:alice:password@example.com:9876  During defang compose up all variable references will be replaced with the actual value and made available in the container. If any referenced variable is not found the defang compose up command will be canceled.  ","version":"Next","tagName":"h2"},{"title":"Connecting Services​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#connecting-services","content":" If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi.  Sample You can find a sample of how to set sensitive config values here.  ","version":"Next","tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#providers","content":" Here are the different ways sensitive config values are stored depending on the provider you are using:  AWS ","version":"Next","tagName":"h2"},{"title":"Defang Playground","type":0,"sectionRef":"#","url":"/docs/concepts/defang-playground","content":"","keywords":"","version":"Next"},{"title":"Limitations​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#limitations","content":" There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC.  ","version":"Next","tagName":"h2"},{"title":"No Custom Domain Support​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#no-custom-domain-support","content":" When you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own domains to Defang Playground services.  ","version":"Next","tagName":"h3"},{"title":"Max Resources​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#max-resources","content":" Services: 4CPUs: 2Memory: 8GBReplicas: 2 ","version":"Next","tagName":"h3"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/docs/concepts/deployments","content":"","keywords":"","version":"Next"},{"title":"Deploying Updates​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#deploying-updates","content":" When you run a deployment to update one or more services, Defang will also make sure to get your new services up and running before deprovisioning any old services so you don't have to worry about downtime.  info In Defang BYOC, Defang will use your cloud provider account to build and store your images. In Defang Playground we will build and store your images for you.  warning Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates.  ","version":"Next","tagName":"h2"},{"title":"Instance Types​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#instance-types","content":" Defang defaults to &quot;spot&quot; instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the 12 Factor principle of disposability.  info In the future, we may provide a way to use &quot;on-demand&quot; instances for workloads that require more stability. ","version":"Next","tagName":"h2"},{"title":"Generate","type":0,"sectionRef":"#","url":"/docs/concepts/generate","content":"","keywords":"","version":"Next"},{"title":"Example Prompts​","type":1,"pageTitle":"Generate","url":"/docs/concepts/generate#example-prompts","content":" Here are some example prompts that the AI assistant can help you with:  A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.   A simple service that runs in the cloud and serves a web page   A simple flask app with one route that responds with a json object   A simple next.js app that serves a static page   A simple api with a single route built on express   An HTTP GET endpoint that returns an HTML with a random meme from the imgflip API   An example of a more complex prompt  A service that uses bullmq and redis. The compose file should also include a redis service. The code should setup a queue. It should also expose three endpoints with express: one to add a job to the queue, another to check how many tasks are in the queue, and a last one that runs on / which is just a healthcheck. The code should also include a worker that processes the queue by logging what's in each task. Use environment variables to configure the redis connection. No password.  ","version":"Next","tagName":"h2"},{"title":"Managed Storage","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage","content":"Managed Storage Defang helps you provision the infrastructure you need to run your services. That infrastructure is designed to scale in and out without persistent storage, so you can build highly scalable services. But Defang can also help you provision managed services to store and persist your data, like caches, databases, and object storage.","keywords":"","version":"Next"},{"title":"Domains","type":0,"sectionRef":"#","url":"/docs/concepts/domains","content":"","keywords":"","version":"Next"},{"title":"Defang-hosted Domains​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#defang-hosted-domains","content":" To make your service accessible from the public internet with Defang-hosted domains (under defang.app), you simply expose ports in your service definition.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#structure","content":" Defang-hosted domains use a structure that is based on your username and service name.  PlaygroundBYOC If you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the Defang Playground, your domain will be structured as follows: https://&lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.defang.dev   ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration","content":" ComposePulumi services: # [...] serviceName: ports: - mode: ingress target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Bring Your Own Domain​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#bring-your-own-domain","content":" You can also bring your own domain to a Defang project. This allows you to use your own domain name to access your services, and varies a little bit depending on your setup.  ","version":"Next","tagName":"h2"},{"title":"BYOC or Defang Playground​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#byoc-or-defang-playground","content":" If you are using Defang BYOC and do not have your domain's DNS hosted with your cloud provider, or if you are using the Defang Playground, you will need to follow this flow:  Add the domainname to your service definition.Run defang compose up to deploy your project.Run defang cert generate to generate an SSL certificate. This command will provide instructions for where to point your domain's DNS before the certificate can be issued.  ","version":"Next","tagName":"h3"},{"title":"BYOC​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#byoc","content":" If you are using Defang BYOC and the DNS for your domain is hosted with your cloud provider (i.e. a Hosted Zone in Route 53, if you're using AWS), all you need to do is specify the domainname in your service definition, as in the example below.  warning For the time being, you can only use one domain per service. If you need to use multiple domains, please vote on this issue.  ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration-1","content":" ComposePulumi services: # [...] serviceName: domainname: example.com ports: - mode: ingress target: 3000 protocol: http  ","version":"Next","tagName":"h3"},{"title":"Managed Object Storage","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-object-storage","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Object Storage","url":"/docs/concepts/managed-storage/managed-object-storage#current-support","content":" Provider\tManaged Object StoragePlayground\t❌ AWS\t❌ DigitalOcean\t❌ ","version":"Next","tagName":"h2"},{"title":"Observability","type":0,"sectionRef":"#","url":"/docs/concepts/observability","content":"","keywords":"","version":"Next"},{"title":"Tail​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#tail","content":" The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service.  defang tail --name my-service defang tail --etag ua119053ehi2   ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#architecture","content":" In BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed. ","version":"Next","tagName":"h2"},{"title":"Managed Redis","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-redis","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#current-support","content":" Provider\tManaged RedisPlayground\t❌ AWS\t✅ DigitalOcean\t❌  ","version":"Next","tagName":"h2"},{"title":"How to use Managed Redis​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#how-to-use-managed-redis","content":" To use managed Redis, in your compose.yaml file, use the x-defang-redis extension to define your Redis service. Adding the extension will tell Defang to provision a managed instance, rather than running Redis as a service. Defang will use the image tag to determine the version to provision from your cloud provider. Here's an example:  cache: image: redis:6.2 x-defang-redis: true restart: unless-stopped ports: - mode: host target: 6379  ","version":"Next","tagName":"h2"},{"title":"Managed Postgres","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-postgres","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#current-support","content":" Provider\tManaged PostgresPlayground\t❌ AWS\t✅ DigitalOcean\t❌  ","version":"Next","tagName":"h2"},{"title":"How to use Managed Postgres​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#how-to-use-managed-postgres","content":" To use managed Postgres, in your compose.yaml file, use the x-defang-postgres extension to define your Postgres service. Adding the extension will tell Defang to provision a managed instance, rather than running Postgres as a service.  ","version":"Next","tagName":"h2"},{"title":"Required Configuration​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#required-configuration","content":" When using managed Postgres, you must set a password for the database using defang config set POSTGRES_PASSWORD. If you do not provide the password, the deployment will fail.  POSTGRES_PASSWORD: You can can assign the password in the service's environment variables. To learn more about how this works, read about configuration.  ","version":"Next","tagName":"h3"},{"title":"Optional Configuration​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#optional-configuration","content":" You can also set the following optional environment variables to configure the managed Postgres instance:  POSTGRES_USER: The user for the managed Postgres instance. The default is postgres.POSTGRES_DB: The database name for the managed Postgres instance. The default is postgres.  ","version":"Next","tagName":"h3"},{"title":"Connecting to Managed Postgres​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#connecting-to-managed-postgres","content":" You can connect to the managed Postgres instance using the name of your service as the hostname, POSTGRES_USER, POSTGRES_DB, and POSTGRES_PASSWORD environment variables.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#example","content":"  app: # [...] environment: POSTGRES_HOST: database POSTGRES_USER: postgres POSTGRES_DB: postgres # Note: by leaving the value empty, Defang will use the # value set using `defang config set POSTGRES_PASSWORD` POSTGRES_PASSWORD: # Note: you can create a connection string by using interpolation, # reference config variables by using ${&lt;config name&gt;} CONNECTURL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB} database: image: postgres:15 x-defang-postgres: true ports: - mode: host target: 5432 environment: # Note: by leaving the value empty, Defang will use the # value set using `defang config set POSTGRES_PASSWORD` POSTGRES_PASSWORD:  ","version":"Next","tagName":"h3"},{"title":"Networking","type":0,"sectionRef":"#","url":"/docs/concepts/networking","content":"","keywords":"","version":"Next"},{"title":"Internal Communication​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-communication","content":" You can expose ports in your service definition to allow other services to communicate with it. Similar to public communication, you can use the ports section of your service definition, but set the mode to host instead of ingress to allow other services to communicate with it through the internal network.  ","version":"Next","tagName":"h2"},{"title":"Sample Configuration​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#sample-configuration","content":" ComposePulumi services: # [...] service1: ports: - mode: host target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Internal DNS​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-dns","content":" Internal communication is handled slightly differently between the Defang Playground and Defang BYOC.  PlaygroundBYOC Internal communication between services in the Defang Playground follows the following pattern: http://&lt;username&gt;-&lt;service-name&gt;:&lt;port&gt;  ","version":"Next","tagName":"h3"},{"title":"Portal","type":0,"sectionRef":"#","url":"/docs/concepts/portal","content":"Portal You can log into the Defang portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications. You can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. info We will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, beyond defang tail to view logs, but we're working on it!","keywords":"","version":"Next"},{"title":"Projects","type":0,"sectionRef":"#","url":"/docs/concepts/projects","content":"","keywords":"","version":"Next"},{"title":"Project Names​","type":1,"pageTitle":"Projects","url":"/docs/concepts/projects#project-names","content":" The project name can be defined in the compose file with the name property, otherwise the base name of the project directory will be used.  The project name may then be used when performing project-wide operations such as listing services, tailing logs, or deprovisioning. For example:  defang services --project-name &lt;project-name&gt; defang tail --project-name &lt;project-name&gt; defang compose down --project-name &lt;project-name&gt;   By default defang will use the project name from the compose.yaml file in the working directory. The --project-name CLI flag may be used when running defang from outside the working directory. ","version":"Next","tagName":"h2"},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/concepts/services","content":"Services Defang allows you deploy services defined as containers. You can define your services using a compose file or a Pulumi program. Services can be exposed to the internet or kept private, and can communicate between themselves using the following conventions for hostnames: &lt;username&gt;-&lt;service-name&gt; You can learn more about accounts and usernames in the accounts page. Service Names Service names are defined in your compose file or your Pulumi program. You can learn more about about how to define services with compose files here and services with Pulumi here. You can learn more about how services are deployed in the deployment page. info While this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions.","keywords":"","version":"Next"},{"title":"Security","type":0,"sectionRef":"#","url":"/docs/concepts/security","content":"","keywords":"","version":"Next"},{"title":"Roles & Permissions​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#roles--permissions","content":" Defang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more.  ","version":"Next","tagName":"h2"},{"title":"Networking​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#networking","content":" Defang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required.  ","version":"Next","tagName":"h2"},{"title":"SSL​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#ssl","content":" Defang automates the process of obtaining and renewing SSL certificates for your services using AWS Certificate Manager.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#secrets","content":" Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS). ","version":"Next","tagName":"h2"},{"title":"Pulumi","type":0,"sectionRef":"#","url":"/docs/concepts/pulumi","content":"","keywords":"","version":"Next"},{"title":"Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defang-pulumi-provider","content":" To get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project:  npmpnpmyarn npm i @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"Sample​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#sample","content":" The following is a minimal example of a Pulumi program that defines a Defang service:  import * as defang from &quot;@defang-io/pulumi-defang/lib&quot;; const service = new defang.DefangService(&quot;my-service&quot;, { image: &quot;strm/helloworld-http:latest&quot;, ports: [{ target: 80, mode: &quot;ingress&quot;, protocol: &quot;http&quot;, }], });  ","version":"Next","tagName":"h2"},{"title":"Resources","type":0,"sectionRef":"#","url":"/docs/concepts/resources","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#docker-compose","content":" services: gpu-service: deploy: replicas: 3 resources: reservations: cpus: '1.0' memory: 2048M devices: - capabilities: [&quot;gpu&quot;]   ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#pulumi","content":" const service = new defang.DefangService(&quot;gpu-service&quot;, { deploy: { replicas: 3, resources: { reservations: { cpu: 1.0, memory: 2048, devices: [{capabilities: ['gpu']}] } } } });   GPUs If you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the docker-compose documentation. This is the only supported value in the deploy.resources.reservations.devices section. ","version":"Next","tagName":"h3"},{"title":"Authenticating","type":0,"sectionRef":"#","url":"/docs/getting-started/authenticating","content":"Authenticating To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command: defang login This will prompt you to open a browser and log into your Defang account. For now, the only way to login is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in. warning Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.","keywords":"","version":"Next"},{"title":"Build and Deploy Services","type":0,"sectionRef":"#","url":"/docs/getting-started/build-and-deploy","content":"Build and Deploy Services Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail: Create an outline using AIBuild and deploy your codeDeploy an existing containerDeploy using Pulumi","keywords":"","version":"Next"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Install the CLI​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#install-the-cli","content":" First, you'll need to install the Defang CLI. The CLI is the primary way to interact with Defang. It allows you to create, deploy, and manage your services. You can find the different installation methods here.  ","version":"Next","tagName":"h2"},{"title":"Generate a project​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#generate-a-project","content":" $ defang generate nodejs-http   You should see the following prompt:  ? What folder would you like to create the project in?   Type in the name of the folder you'd like to use for your new project and press ENTER.  I'll type &quot;welcome-to-defang&quot;. Now, you'll see the following output:  ? What folder would you like to create the project in? welcome-to-defang * Fetching sample from the Defang repository... * Writing files to disk... - .github/ - .github/workflows/ - .github/workflows/deploy.yaml - README.md - app/ - app/Dockerfile - app/main.js - compose.yaml * Code generated successfully in folder welcome-to-defang Check the files in your favorite editor. To deploy the service, do `cd welcome-to-defang` and defang compose up   Now, navigate to the folder you just created:  $ cd welcome-to-defang   You can open the folder in your favorite editor and see the files that were generated for you:  The app folder contains the code for your service.The Dockerfile is used to build the container image for your service.The compose.yaml file is used to define the services you want to deploy.  ","version":"Next","tagName":"h2"},{"title":"Deploy to the playground​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#deploy-to-the-playground","content":" Go back to your shell and type the following:  $ defang up   If you have not used defang before, you'll be prompted to log in.   ! Please log in to continue. Please visit http://127.0.0.1:49154 and log in. (Right click the URL or press ENTER to open browser)   info To learn more about how authentication works in defang, check out the authenticating page.  When you do this, you should see something similar to the output below:   * Uploading build context for app * Deploying service app * Monitor your services' status in the defang portal - https://portal.defang.dev/service/app * Tailing logs for deployment ID o59k89vk3qc8 ; press Ctrl+C to detach: * Press V to toggle verbose mode 2024-09-19T10:50:53.572443-07:00 cd Update started for stack jordanstephens-prod1 2024-09-19T10:51:05.536299-07:00 cd Update succeeded in 11.99769745s ; provisioning... 2024-09-19T10:51:39.419693-07:00 app Server running at http://0.0.0.0:3000/ * Service app is in state DEPLOYMENT_COMPLETED and will be available at: - https://jordanstephens-app--3000.prod1.defang.dev * Done.   Now we can go to https://portal.defang.dev/service/app to see our service listed in the defang portal.    ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#next-steps","content":" Congratulations! You've successfully deployed your first service with Defang. Now, where do you go from here?  Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  Update the code and redeployMonitor your servicesDeploy an outline using AIBuild and deploy your codeDeploy existing containersDeploy using Pulumi  Choose the direction that seems the most interesting. If you have any questions, join the Defang Discord and we'll be happy to help you out. ","version":"Next","tagName":"h2"},{"title":"Monitor a Service","type":0,"sectionRef":"#","url":"/docs/getting-started/monitor","content":"Monitor a Service By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service. From the CLI: defang tail --name service1 From the Defang Portal: https://portal.defang.dev/ info To learn more about observability in Defang, check out the observability page.Note that the Defang Portal only displays services deployed to Defang Playground.","keywords":"","version":"Next"},{"title":"Update Services","type":0,"sectionRef":"#","url":"/docs/getting-started/update","content":"Update Services To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped. info If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.","keywords":"","version":"Next"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/docs/faq","content":"","keywords":"","version":"Next"},{"title":"Which cloud/region is the app being deployed to?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#which-cloudregion-is-the-app-being-deployed-to","content":" In the Defang Playground the app is deployed to AWS us-west-2. In the Defang BYOC model, the region is determined by your Defang BYOC Provider settings.  ","version":"Next","tagName":"h3"},{"title":"Can I bring my own AWS or other cloud account?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-bring-my-own-aws-or-other-cloud-account","content":" Yes! Please check out the Defang BYOC documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"On AWS, can I deploy to services such as EC2, EKS, or Lambda?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#on-aws-can-i-deploy-to-services-such-as-ec2-eks-or-lambda","content":" The current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources.  ","version":"Next","tagName":"h3"},{"title":"Can I access AWS storage services such as S3 or database services such as RDS? How?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-access-aws-storage-services-such-as-s3-or-database-services-such-as-rds-how","content":" Yes, you can access whatever other resources exist in the cloud account you are using as a Defang BYOC Provider.  ","version":"Next","tagName":"h3"},{"title":"Do you plan to support other clouds?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#do-you-plan-to-support-other-clouds","content":" While we currently support AWS as a Defang BYOC Provider, we plan to support other clouds in future releases, such as Azure and GCP.  ","version":"Next","tagName":"h3"},{"title":"Can I run production apps with Defang?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-run-production-apps-with-defang","content":" The Defang Playground is meant for testing and trial purposes only. Deployment of productions apps with Defang BYOC is not yet supported and disallowed by the Terms of Service. If you are interested in running production apps, please contact us.  ","version":"Next","tagName":"h3"},{"title":"I'm having trouble running the binary on my Mac. What should I do?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#im-having-trouble-running-the-binary-on-my-mac-what-should-i-do","content":" MacOS users will need to allow the binary to run due to security settings: Attempt to run the binary. You'll see a security prompt preventing you from running it.Go to System Preferences &gt; Privacy &amp; Security &gt; General.In the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.Alternatively, select the option &quot;App Store and identified developers&quot; to allow all applications from the App Store and identified developers to run.  ","version":"Next","tagName":"h3"},{"title":"Warnings​","type":1,"pageTitle":"FAQ","url":"/docs/faq#warnings","content":" ","version":"Next","tagName":"h2"},{"title":"\"The folder is not empty. Files may be overwritten.\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#the-folder-is-not-empty-files-may-be-overwritten","content":" This message is displayed when you run defang generate and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running defang generate or pick a different target folder.  ","version":"Next","tagName":"h3"},{"title":"\"environment variable not found\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#environment-variable-not-found","content":" This message is displayed when you run defang compose up and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run defang compose up.  ","version":"Next","tagName":"h3"},{"title":"\"Unsupported platform\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#unsupported-platform","content":" This message is displayed when you run defang compose up and the Compose file references a platform that is not supported by Defang. Defang Beta only supports Linux operating systems.  ","version":"Next","tagName":"h3"},{"title":"\"not logged in\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#not-logged-in","content":" This message is displayed when you run defang compose config but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using defang login.  ","version":"Next","tagName":"h3"},{"title":"\"No port mode was specified; assuming 'host'\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#no-port-mode-was-specified-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port that does not specify a port mode. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the mode as ingress:  services: service1: … ports: - target: 80 mode: ingress   ","version":"Next","tagName":"h3"},{"title":"\"Published ports are not supported in ingress mode; assuming 'host'\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#published-ports-are-not-supported-in-ingress-mode-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and published set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the mode as ingress and remove the published setting.  ","version":"Next","tagName":"h3"},{"title":"\"TCP ingress is not supported; assuming HTTP\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#tcp-ingress-is-not-supported-assuming-http","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and protocol set to tcp. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the protocol setting.  ","version":"Next","tagName":"h3"},{"title":"\"unsupported compose directive\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#unsupported-compose-directive","content":" This message is displayed when you run defang compose up and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior.  ","version":"Next","tagName":"h3"},{"title":"\"no reservations specified; using limits as reservations\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#no-reservations-specified-using-limits-as-reservations","content":" This message is displayed when you run defang compose up and the Compose file declares a resource with limits but no reservations. Defang will use the limits as reservations to ensure the container has enough resources. Specify reservations if you want to silence the warning or reserve a different amount of resources:  services: service1: … deploy: resources: reservations: cpus: 0.5 memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"ingress port without healthcheck defaults to GET / HTTP/1.1\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#ingress-port-without-healthcheck-defaults-to-get--http11","content":" This message is displayed when you run defang compose up and the Compose file declares an ingress with a port but no healthcheck. Defang will assume the default healthcheck of GET / HTTP/1.1 to ensure the port is healthy. Specify a healthcheck if you want to silence the warning or use a different healthcheck:  services: service1: … deploy: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]   ","version":"Next","tagName":"h3"},{"title":"\"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#missing-memory-reservation-specify-deployresourcesreservationsmemory-to-avoid-out-of-memory-errors","content":" This message is displayed when you run defang compose up and the Compose file doesn't specify a memory reservation. If available, Defang will use the memory limit as the memory reservation. Specify a memory reservation if you want to silence the warning or reserve a different amount of memory:  services: service1: … deploy: resources: reservations: memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"The build context contains more than 10 files\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#the-build-context-contains-more-than-10-files","content":" This message is displayed when you run defang compose up and the Compose file declares a build with a context that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the context as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the context.  ","version":"Next","tagName":"h3"},{"title":"\"AWS provider was selected, but AWS environment variables are not set\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#aws-provider-was-selected-but-aws-environment-variables-are-not-set","content":" This message is displayed when you run defang compose up with the --provider=aws but none of the AWS environment variables were set. If you proceed, the deployment might fail, unless you have defined defined default credentials in the AWS configuration files or are running on an AWS instance.  ","version":"Next","tagName":"h3"},{"title":"\"Using Defang provider, but AWS environment variables were detected\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#using-defang-provider-but-aws-environment-variables-were-detected","content":" This message is displayed when you run defang compose up with the --provider=defang but AWS environment variables were detected. The AWS environment variables will be ignored.  ","version":"Next","tagName":"h3"},{"title":"Errors​","type":1,"pageTitle":"FAQ","url":"/docs/faq#errors","content":" ","version":"Next","tagName":"h2"},{"title":"\"Stack:… is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#stack-is-in-update_complete_cleanup_in_progress-state-and-cannot-be-updated","content":" This happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using defang version.  ","version":"Next","tagName":"h3"},{"title":"\"invalid healthcheck: ingress ports require an HTTP healthcheck on localhost.​","type":1,"pageTitle":"FAQ","url":"/docs/faq#invalid-healthcheck-ingress-ports-require-an-http-healthcheck-on-localhost","content":" This message is displayed when defang compose up tries to deploy a service with an &quot;ingress&quot; port, if the service does not have a healthcheck which mentions localhost. Defang routes a load balancer to your service's ingress ports, and the loadbalancer needs to be able to check the health of the service. To solve this issue, ask yourself these two questions:  Should my service be public? It's common to declare your container's ports using the Compose file &quot;shorthand&quot; syntax (1234:1234). This syntax can be understood as [HOST:]CONTAINER. If your service is not intended to be public, you do not need to declare a HOST port. For example: services: my-service: image: my-image ports: - - &quot;1234:1234&quot; + - &quot;1234&quot; Does my healthcheck include the string localhost? It is very common to define a healthcheck by using curl or wget to make a request to localhost. So common, in fact, that defang will look for the string localhost in your healthcheck definition. For example, this healthcheck is valid: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:1234/health&quot;] This healthcheck is not valid for ingress ports: healthcheck: test: [&quot;CMD&quot;, &quot;./my-healthcheck&quot;]   ","version":"Next","tagName":"h3"},{"title":"The build aborted with OutOfMemoryError: Container killed due to memory usage​","type":1,"pageTitle":"FAQ","url":"/docs/faq#the-build-aborted-with-outofmemoryerror-container-killed-due-to-memory-usage","content":" The image build might fail if the build process uses too much memory. The first thing to try is to limit the size of your project by excluding unnecessary files: the easiest way is to create a .dockerignore file that excludes irrelevatn files. Note that Defang will use a default .dockerignore file if you don't have one, but that default might not work for some projects and it's always better to make a .dockerignore file specific to your project.  If that doesn't work, you can try to increase the memory available to the build process by adding a field shm_size to the build section in your compose.yaml file:  services: service1: build: context: . shm_size: 16g  ","version":"Next","tagName":"h3"},{"title":"AWS","type":0,"sectionRef":"#","url":"/docs/providers/aws","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#getting-started","content":" Getting started with the Defang BYOC AWS Provider is easy. The first step is to authenticate your shell with AWS as an admin user. The authenticated user should be an IAM admin because Defang will need permission to create resources and IAM roles in your account.  tip If you have the aws CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID.  Use the --provider=aws flag to tell the Defang CLI to use the AWS Provider or set the DEFANG_PROVIDER environment variable to aws.  $ defang up --provider=aws # or $ export DEFANG_PROVIDER=aws   warning Because Defang creates roles, you need to have the appropriate permissions to create roles in your cloud provider account, typically the AdministratorAccess policy in AWS.  tip The Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail.  ","version":"Next","tagName":"h2"},{"title":"Region​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#region","content":" The Defang BYOC AWS Provider will use the region specified in the AWS_REGION environment variable, or a profile in the ~/.aws/config file exactly as the AWS CLI would.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#secrets","content":" Defang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#runtime","content":" The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services.  ","version":"Next","tagName":"h3"},{"title":"Managed Storage​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#managed-storage","content":" Defang can help you provision managed storage services. The following managed storage services are supported on AWS:  ","version":"Next","tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#managed-postgres","content":" When using Managed Postgres, the Defang CLI provisions an RDS Postgres instance in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed Redis​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#managed-redis","content":" When using Managed Redis, the Defang CLI provisions an ElastiCache Redis cluster in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed Resources​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#managed-resources","content":" Defang will create and manage the following resources in your AWS account from its bootstrap CloudFormation template:  Resource Type\tExample Resource Names3/Bucket\tdefang-cd-bucket-cbpbzz8hzm7 ecs/ClusterCapacityProviderAssociations\tdefang-cd-Cluster-pqFhjwuklvm ecs/Cluster\tdefang-cd-ClusterpJqFhjwuklvm iam/Role\tdefang-cd-ExeutionRole-XE7RbQDfeEwx ec2/InternetGateway\tigw-05bd7adc92541ec3 ec2/VPCGatewayAttachment\tIGW logs/LogGroup\tdefang-cd-Logroup-6LSZet3tFnEy ecr/PullThroughCacheRule\tdefang-cd-ecrpublic ec2/Route\trtb-08f3f5afc9e6c8c8 ec2/RouteTable\trtb-08f3f5ffc9e6c8c8 ec2/VPCEndpoint\tvpce-02175d8d4f47d0c9 ec2/SecurityGroup\tsg-032b839c63e70e49 ec2/Subnet\tsubnet-086bead399ddc8a0 ec2/SubnetRouteTableAssociation\trtbassoc-02e200d45e7227fe ecs/TaskDefinition\tarn:aws:ecsus-west-2:381492210770:task-definition/defang-cd-TaskDefinition-RXd5tf9TaN38:1 iam/Role\tdefang-cd-askRole-gsEeDPd6sPQY ec2/VPC\tvpc-0cbca64f13435695  Then, for each project you deploy, defang will create and manage the following resources:  Resource Type\tExample Resource Nameecr/Repository\tproject1/kaniko-build ecr/LifecyclePolicy\tproject1/kaniko-build acm/Certificate\t*.project1.tenant1.defang.app ecr/Repository\tproject1/kaniko-build/cache ecr/LifecyclePolicy\tproject1/kaniko-build/cache iam/InstanceProfile\tecs-agent-profile iam/Role\tecs-task-execution-role cloudwatch/EventRule\tproject1-ecs-lifecycle-rule cloudwatch/EventTarget\tproject1-ecs-event-cw-target route53/Record\tvalidation-project1.tenant1.defang.app acm/CertificateValidation\t*.project1.tenant1.defang.appValidation ec2/VpcDhcpOptionsAssociation\tdhcp-options-association cloudwatch/LogGroup\tbuilds iam/Role\tkaniko-task-role ecs/TaskDefinition\tkanikoTaskDefArm64 ecs/TaskDefinition\tkanikoTaskDefAmd64 s3/Bucket\tdefang-build s3/BucketPublicAccessBlock\tdefang-build-block ecs/Cluster\tcluster ecs/ClusterCapacityProviders\tcluster-capacity-providers ec2/SecurityGroup\tproject1_app-sg ec2/SecurityGroup\tbootstrap ec2/VpcDhcpOptions\tdhcp-options cloudwatch/LogGroup\tlogs ","version":"Next","tagName":"h3"},{"title":"How to Install Defang","type":0,"sectionRef":"#","url":"/docs/getting-started/installing","content":"How to Install Defang Defang doesn't require installing anything in your cloud, but you will need to install the open source Defang command line interface (CLI) to interact with your Defang resources and account. We offer a few different ways to install the Defang CLI. You can use a bash script, Homebrew, Winget, or you can download the binary directly. BashHomebrewWingetNixDirect Download Using Homebrew You can easily install the Defang CLI using Homebrew. Run the following command in your terminal: brew install DefangLabs/defang/defang ","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is Defang?​","type":1,"pageTitle":"Overview","url":"/docs/intro#what-is-defang","content":" Defang is a radically simpler way for developers to develop, deploy, and debug their cloud applications. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly with AI-assisted tooling.  The Defang CLI includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine.Defang can automatically build and deploy your project with a single command. If you’re new to Defang, you can try deploying to the Defang Playground, a hosted environment to learn to use Defang with non-production workloads.Once you’re ready, you can deploy it to your own cloud account - we call this Defang BYOC. Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer. You can also use Defang to easily publish updates to your deployed application with zero downtime.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Overview","url":"/docs/intro#features","content":" Defang provides a streamlined experience to develop, deploy, observe, and update your cloud applications. Defang includes the following features:  Support for various types of applications: Web services and APIs, mobile app backends, ML services, hosting LLMs, etc.Support for your programming language of choice: Node.js, Python, Golang, or anything else you can package in a Dockerfile.Built-in AI assistant to go from natural language prompt to an outline projectBuilt-in AI assistant to help you debug your cloud applicationsAutomated Dockerfile buildsSupport for pre-built Docker containers, from public or private image registriesAbility to express your project configuration using a Docker Compose YAML fileAbility to manage encrypted configuration valuesPre-configured environments with built-in security, networking, and observabilityOne-command deploymentsSupport for GPUsSupport for Infra-as-Code via the Defang Pulumi provider ","version":"Next","tagName":"h3"},{"title":"Azure","type":0,"sectionRef":"#","url":"/docs/providers/azure","content":"Azure info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.","keywords":"","version":"Next"},{"title":"GCP","type":0,"sectionRef":"#","url":"/docs/providers/gcp","content":"GCP info We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue.","keywords":"","version":"Next"},{"title":"Playground","type":0,"sectionRef":"#","url":"/docs/providers/playground","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Playground","url":"/docs/providers/playground#overview","content":" Overall, the Defang Playground is very similar to deploying to your own cloud account. The Playground runs on a Defang-managed AWS account, so you can expect it to work similarly to deploying to AWS. ","version":"Next","tagName":"h2"},{"title":"DigitalOcean","type":0,"sectionRef":"#","url":"/docs/providers/digitalocean","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#getting-started","content":" To get started with the Defang BYOC DigitalOcean Provider, first install the latest version of the Defang CLI. Next make sure you have signed up for a DigitalOcean account.  After signing up for your account, be sure to setup your personal access token as well as your Spaces access key. Next, save these values as environment variables with the names DIGITALOCEAN_TOKEN, SPACES_ACCESS_KEY_ID, and SPACES_SECRET_ACCESS_KEY.  export DIGITALOCEAN_TOKEN=&lt;your-token&gt; export SPACES_ACCESS_KEY_ID=&lt;your-key-id&gt; export SPACES_SECRET_ACCESS_KEY=&lt;your-key&gt;   The Defang CLI will automatically check if they are set before running. Once you are ready to go, add the --provider=digitalocean to your command to tell the Defang CLI to use the DigitalOcean provider.  $ defang up --provider=digitalocean # or $ export DEFANG_PROVIDER=digitalocean   ","version":"Next","tagName":"h2"},{"title":"Region​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#region","content":" The Defang BYOC DigitalOcean Provider will use the region specified in the REGION environment variable. For a list of regions available in DigitalOcean, see the region documentation.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for DigitalOcean, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Deployment​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to a Spaces Object Storage bucket in your account. The CLI then deploys an App Platform App that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#runtime","content":" The Provider runs your workloads using the DigitalOcean App Platform.  ","version":"Next","tagName":"h3"},{"title":"Secrets​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#secrets","content":" Defang allows you to configure your services with sensitive config values. Sensitive values are added and stored with encryption in your app once it has been deployed.  ","version":"Next","tagName":"h3"},{"title":"Future Improvements​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#future-improvements","content":" The following features are still in development for DigitalOcean:  Custom DomainsManaged RedisManaged Postgres  Stayed tuned for future updates! ","version":"Next","tagName":"h3"},{"title":"Samples","type":0,"sectionRef":"#","url":"/docs/samples","content":"Samples Check out our sample projects here to get some inspiration and get a sense of how defang works. Search samples Loading samples...","keywords":"","version":"Next"},{"title":"Deploy Code Using a Docker Compose File","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-code-compose","content":"Deploy Code Using a Docker Compose File This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder. If you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file. Step 1 - Create main.js Let's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called main.js with the following content: const http = require('http'); const server = http.createServer((req, res) =&gt; { res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Welcome to Defang\\n'); }); server.listen(3000, '0.0.0.0', () =&gt; { console.log('Server running at http://127.0.0.1:3000/'); }); Step 2 - Create Dockerfile Let's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called Dockerfile with the following content: # Use an official Node runtime based on Alpine as a parent image FROM node:18-alpine # Set the working directory to /app WORKDIR /app # Copy the current directory contents into the container at /app COPY . . # Run the app when the container launches ENTRYPOINT [ &quot;node&quot;, &quot;main.js&quot; ] Step 3 - Create compose.yaml Let's create a Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called compose.yaml with the following content: version: '3.9' services: minimal: build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 3000 Step 4 - Deploy Now that we have the code and the Docker Compose file, we can deploy the service using the defang compose up command. This will bundle the code into a container and deploy it with Defang. If you have cloud credentials configured, the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to Defang Playground. defang compose up ","keywords":"","version":"Next"},{"title":"Deploy container using the CLI","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-container-using-the-cli","content":"Deploy container using the CLI This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang. Step 1 - Docker Compose If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this: version: '3.9' services: service1: # This is just an example, replace with the image you want image: &quot;docker.io/nginx:latest&quot; ports: - mode: ingress target: 3000 Step 2 - Deploy defang compose up ","keywords":"","version":"Next"},{"title":"Deploy an outline using AI","type":0,"sectionRef":"#","url":"/docs/tutorials/generate-new-code-using-ai","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Use the CLI generate command​","type":1,"pageTitle":"Deploy an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-1---use-the-cli-generate-command","content":" defang generate ? Choose the language you'd like to use: [Use arrows to move, type to filter, ? for more help] &gt; Nodejs Golang Python ? Choose a sample service: Generate with AI ? Please describe the service you'd like to build: [? for help] A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response. ? What folder would you like to create the service in? [? for help] (service1) project1   This will generate the different files required to start your project based on your prompt and the language selected.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Review the Code​","type":1,"pageTitle":"Deploy an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-2---review-the-code","content":" Change into the new project folder:  cd project1   You can open the files in a code editor to review or make changes as needed before deploying the service.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Build and Deploy​","type":1,"pageTitle":"Deploy an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-3---build-and-deploy","content":" defang compose up  ","version":"Next","tagName":"h2"},{"title":"How to Use Your Own Domain","type":0,"sectionRef":"#","url":"/docs/tutorials/use-your-own-domain-name","content":"","keywords":"","version":"Next"},{"title":"Step 1 : Check your Defang BYOC settings​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-1--check-your-defang-byoc-settings","content":" Make sure you install the latest version of the Defang CLIThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.  If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode):  aws sts get-caller-identity   ","version":"Next","tagName":"h2"},{"title":"Step 2: Setup a Hosted Zone in AWS Route 53​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-2-setup-a-hosted-zone-in-aws-route-53","content":" info If you purchased your domain with AWS, you can skip this step.  For Defang to be able to manage your domain, you need to create a public hosted zone in AWS Route 53. It should list four AWS nameservers and should look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 3: Configure your DNS settings in your domain registrar​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-3-configure-your-dns-settings-in-your-domain-registrar","content":" info If you purchased your domain with AWS, you can skip this step.  You'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 4: Set up Your Compose File​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-4-set-up-your-compose-file","content":" In your compose file, specify the domain name you want to use, for example  services: web: domainname: nextjs.defang.chewydemos.com build: context: ./web dockerfile: Dockerfile ports: target: 3000 mode: ingress   ","version":"Next","tagName":"h2"},{"title":"Step 5: Deploy​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-5-deploy","content":" Run the following command to deploy your service:  defang compose up   This will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your compose file.   ","version":"Next","tagName":"h2"},{"title":"Deploy a GPU-powered application with Defang","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-with-gpu","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#prerequisites","content":" ","version":"Next","tagName":"h2"},{"title":"AWS Account with GPU Access​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#aws-account-with-gpu-access","content":" For any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the &quot;Service Quotas&quot; console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are &quot;All G and VT spot instances&quot;.  Timing This process can take a few days for AWS to approve.    ","version":"Next","tagName":"h3"},{"title":"HuggingFace Token​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#huggingface-token","content":" This sample requires a HugoingFace token to download the model. You can get a token by signing up at HuggingFace and then going to your settings to get your token.  ","version":"Next","tagName":"h3"},{"title":"Step 1: Clone the sample project​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-1-clone-the-sample-project","content":" You'll need to clone this sample to go through this tutorial.  ","version":"Next","tagName":"h2"},{"title":"Step 2: Check your Defang BYOC settings​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-2-check-your-defang-byoc-settings","content":" Make sure you install the latest version of the Defang CLIThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.  If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode):  aws sts get-caller-identity   ","version":"Next","tagName":"h2"},{"title":"Step 2: Prepare your Environment​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-2-prepare-your-environment","content":" Log into your Defang account  defang login   Set the HuggingFace token using the defang config command  defang config set --name HF_TOKEN   Configuration stores your sensitive information such as API keys, passwords, and other credentials for you.  ","version":"Next","tagName":"h2"},{"title":"Step 3: Explore the Compose File​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-3-explore-the-compose-file","content":" The compose.yml file is where you define your services and their configurations.  ","version":"Next","tagName":"h2"},{"title":"The Mistral Service​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#the-mistral-service","content":" In there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects.  services: mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest ports: - mode: host target: 8000 command: [&quot;--host&quot;,&quot;0.0.0.0&quot;,&quot;--model&quot;,&quot;TheBloke/Mistral-7B-Instruct-v0.2-AWQ&quot;,&quot;--quantization&quot;,&quot;awq&quot;,&quot;--dtype&quot;,&quot;auto&quot;,&quot;--tensor-parallel-size&quot;,&quot;1&quot;,&quot;--gpu-memory-utilization&quot;,&quot;.95&quot;,&quot;--max-model-len&quot;,&quot;8000&quot;] deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;] healthcheck: test: [&quot;CMD&quot;,&quot;curl&quot;,&quot;http://localhost:8000/v1/models&quot;] interval: 5m timeout: 30s retries: 10 environment: - HF_TOKEN   Let's break it down.  We start with the latest vLLM docker image provided by Mistral AI.  mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest   We specify that we require a GPU to run our application.  deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;]   The Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the HF_TOKEN configuration value from Defang.  Specifying the HF_TOKEN in the environment section of the service in the compose.yml file tells Defang to fetch the value from the encrypted configuration store.  environment: - HF_TOKEN   ","version":"Next","tagName":"h3"},{"title":"The UI Service​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#the-ui-service","content":" In this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000.  Networking You can see here how Defang's networking works. The mistral service is available at http://mistral:8000, exactly as it would be in a local docker-compose environment.   ui: restart: unless-stopped build: context: ui dockerfile: Dockerfile ports: - mode: ingress target: 3000 deploy: resources: reservations: memory: 256M healthcheck: test: [&quot;CMD&quot;,&quot;wget&quot;,&quot;--spider&quot;,&quot;http://localhost:3000&quot;] interval: 10s timeout: 2s retries: 10 environment: - OPENAI_BASE_URL=http://mistral:8000/v1/   ","version":"Next","tagName":"h3"},{"title":"Step 4: Deploy to Your Own AWS Account with Defang​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-4-deploy-to-your-own-aws-account-with-defang","content":" Run the following command to deploy your service:  defang compose up  ","version":"Next","tagName":"h2"},{"title":"Deploy using Pulumi","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-using-pulumi","content":"","keywords":"","version":"Next"},{"title":"Installing Dependencies​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#installing-dependencies","content":" Make sure to install the Pulumi CLI and the Defang CLI.  Make sure you are logged into the Defang CLI. Don't worry about the Pulumi CLI for now.  ","version":"Next","tagName":"h2"},{"title":"Project Directory Setup​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#project-directory-setup","content":" Create a new directory for your project and navigate to it.  mkdir project &amp;&amp; cd project   If you're familiar with Pulumi and/or are already logged in with the Pulumi CLI, you can skip the next step.  If you are new to pulumi and/or don't have an account, you can &quot;login&quot; to the filesystem by running the following command:  pulumi login file://./   This will make the Pulumi CLI store the state of your infrastructure in the current directory.  ","version":"Next","tagName":"h2"},{"title":"Initialize the Project​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#initialize-the-project","content":" Run the following command to set your encryption passphrase for this terminal session:  export PULUMI_CONFIG_PASSPHRASE=&quot;super-secure-passphrase&quot;   Now let's initialize the Pulumi project:  pulumi new typescript -y --force   This will create a new Pulumi project in the current directory and will create a Pulumi stack called dev by default. We use the --force flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI).  Run the following command to add to the .gitignore file:  echo &quot;.pulumi&quot; &gt;&gt; .gitignore   ","version":"Next","tagName":"h2"},{"title":"Install the Defang Provider​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#install-the-defang-provider","content":" Run the following command to install the Defang provider:  npm install @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"Write the Pulumi Code​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#write-the-pulumi-code","content":" Your index.ts file should look like this:  import * as defang from '@defang-io/pulumi-defang/lib'; export const service = new defang.DefangService('minio', { name: 'minio', image: 'quay.io/minio/minio', // starts the server with the console address set to :9001 command: ['server', '--console-address', ':9001', '/data'], // Set the root username environment: { MINIO_ROOT_USER: 'minio', }, secrets: [ // Set the root password as a secret which will be encrypted at rest { source: 'MINIO_ROOT_PASSWORD', value: 'minio123', }, ], // Run a healthcheck every 30 seconds healthcheck: { test: ['CMD', 'curl', 'http://localhost:9000/minio/health/live'], interval: 30, timeout: 5, retries: 3, }, // Expose the server on port 9000 and the console on port 9001 ports: [ { target: 9000, protocol: 'http', mode: 'ingress', }, { target: 9001, protocol: 'http', mode: 'ingress', }, ], });   ","version":"Next","tagName":"h2"},{"title":"Deploy to Defang​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#deploy-to-defang","content":" warning At the time of writing, the Defang Pulumi Provider only works with Defang Playground. We are working on BYOC support.  Run the following command to deploy your service:  pulumi up --stack=dev   ","version":"Next","tagName":"h2"},{"title":"Monitor the Deployment​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#monitor-the-deployment","content":" You can monitor the deployment by running the following command:  defang tail --name minio   ","version":"Next","tagName":"h2"},{"title":"Logging Into Minio​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#logging-into-minio","content":" The Defang Playground will give you a domain, which you can obtain by running the following command:  defang ls | grep 'minio.*9001'   If you navigate to the domain in your browser, you will be prompted to log in. Use the username minio and the password minio123.  ","version":"Next","tagName":"h2"},{"title":"Clean Up​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#clean-up","content":" To clean up the deployment, run the following command:  pulumi destroy --stack=dev  ","version":"Next","tagName":"h2"},{"title":"Defang with Codespaces and GitPod","type":0,"sectionRef":"#","url":"/docs/tutorials/using-codespaces-gitpod","content":"","keywords":"","version":"Next"},{"title":"Getting Started with Github Codespaces and Defang​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#getting-started-with-github-codespaces-and-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Clone the Defang Codespace Project​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-1-clone-the-defang-codespace-project","content":" Start by cloning the Defang Github-Codespace repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Create a Codespace​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-2-create-a-codespace","content":" Once you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.    ","version":"Next","tagName":"h3"},{"title":"Step 3: Open in VS Code Desktop​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-3-open-in-vs-code-desktop","content":" For the defang login command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.    ","version":"Next","tagName":"h3"},{"title":"Step 4: Run Defang Login​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-4-run-defang-login","content":" Within a VS Code desktop terminal, execute the following command.  defang login   Although it may initially refuse to connect on your localhost, going back will show a &quot;successfully logged in&quot; message, confirming that you're logged into Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 5: Verify Running Services​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-5-verify-running-services","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services.  ","version":"Next","tagName":"h3"},{"title":"Getting Started with GitPod Workspace with Defang​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#getting-started-with-gitpod-workspace-with-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Clone the Defang GitPod Workspace Project​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-1-clone-the-defang-gitpod-workspace-project","content":" Start by cloning the Defang Gitpod-Workspace repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Initialize GitPod Workspace​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-2-initialize-gitpod-workspace","content":" Navigate https://gitpod.io/#&lt;your-repo-url&gt; to create your new workspace. In the repository, we have a yaml file indicating that we are using a pre-built dockerfile which installs Defang CLI for you.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Lauch VS Code from GitPod​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-3-lauch-vs-code-from-gitpod","content":" Open VS Code from GitPod, you will likely need to have the GitPod VS Code extension installed.      ","version":"Next","tagName":"h3"},{"title":"Step 4: Run Defang Login​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-4-run-defang-login-1","content":" Within a VS Code desktop terminal, execute the following command.  defang login   ","version":"Next","tagName":"h3"},{"title":"Step 5: Verify Running Services​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-5-verify-running-services-1","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services. ","version":"Next","tagName":"h3"},{"title":"Use Cases","type":0,"sectionRef":"#","url":"/docs/use-cases","content":"","keywords":"","version":"Next"},{"title":"Web Services and APIs​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#web-services-and-apis","content":" Defang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI assistant to help you get started.  Defang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring networking, security, and observability, and will give you a nice, horizontally scalable deployment.  If you are using Defang BYOC, you can easily connect to databases, storage, and other services that you have running in your cloud account.  ","version":"Next","tagName":"h2"},{"title":"Mobile App Backends​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#mobile-app-backends","content":" A mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend.  ","version":"Next","tagName":"h2"},{"title":"Hosting LLMs​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#hosting-llms","content":" LLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy.  Anti-patterns  While Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are 12 Factor anti-patterns. Here are some examples:  ","version":"Next","tagName":"h2"},{"title":"Stateful Services​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#stateful-services","content":" Some applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because containers are ephemeral and can be replaced at any time.  ","version":"Next","tagName":"h2"},{"title":"Data Stores​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#data-stores","content":" Defang is not a good fit for data stores like databases, caches, and message queues. These types of services are designed to be long-lived and to store data. Defang is primarily designed for stateless workloads, and it's not a good fit for stateful workloads: if a container is replaced, all the data in it is lost. You could probably coerce a data store to work in a stateless environment with certain replication strategies, but it's not a good fit. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}