[
  {
    "name": "AWS S3",
    "category": "golang",
    "readme": "\n## Setup\nThis sample requires an API key to access AWS S3. The name of the config value is referenced in the docker-compose.yml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name AWS_ACCESS_KEY\ndefang config set --name AWS_SECRET_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\ncurl -X POST -H 'Content-Type: application/json' -d '{ \"first_name\" : \"jane\", \"last_name\" : \"doe\" }' https://xxxxxx/upload\ncurl https://xxxxxx/download\n"
  },
  {
    "name": "Basic Service",
    "category": "golang",
    "readme": "# HTTP Echo Server\n\nA very simple example of a Go service that listens on a port and returns information about the request."
  },
  {
    "name": "ChatGPT API",
    "category": "golang",
    "readme": "\n## Setup\nThis sample requires an API key to access the OpenAI API. The name of the config value is referenced in the docker-compose.yml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name OPENAI_KEY\n```\n\nand then enter the value when prompted.\n\n\n## Testing\n```\necho \"Hello\" | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\nor\n```\ncat prompt.txt | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```"
  },
  {
    "name": "Fetch and Return JSON",
    "category": "golang",
    "readme": "# Go HTTP Server with Fiscal Data API\n\nThis is a simple HTTP server written in Go that serves two endpoints: / and /rates. The / endpoint responds with a JSON object containing the status, while the /rates endpoint fetches data from the Fiscal Data Treasury API and returns the response to the client."
  },
  {
    "name": "Web Page and Form Post",
    "category": "golang",
    "readme": "# Go Simple Form Submission App\nThis Go application demonstrates a simple form submission using the standard net/http library. Users can input their first name into a form, and upon submission, they will be greeted personally by the application.\n\n## Features\n\n1. Simple form to submit a user's first name.\n2. Personalized greeting displayed in response to the form submission\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "go-mongodb-atlas",
    "category": "golang",
    "readme": "# Go MongoDB Atlas sample\n## Overview\nThis sample is is a web-based task manager designed to help users manage their tasks efficiently. It allows users to add, delete, and view tasks in a simple and intuitive interface. This application is ideal for anyone looking to enhance their productivity by keeping track of their daily activities. There is a go.mod file that includes dependencies for the Dockerfile to install\n\n## Features\nCreate Tasks: Users can add new tasks with descriptions.\nDelete Tasks: Users can remove tasks when they are completed or no longer needed.\nView Tasks: Users can view a list of their current tasks.\n## Technology\nBackend: The application is built with Go (Golang), utilizing the powerful net/http standard library for handling HTTP requests and responses.\nDatabase: MongoDB is used for storing tasks. It is a NoSQL database that offers high performance, high availability, and easy scalability.\nFrontend: Basic HTML and JavaScript are used for the frontend to interact with the backend via API calls.\nEnvironment: Designed to run in containerized environments using Docker, which ensures consistency across different development and production environments.\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set all environment variables up\n3. There is a environment variable named MONGO_URI for the MONGODB connection string, in the compose file, be sure to put your mongodb URI, i.e. \nmongodb+srv://<username>:<pwd>@host\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "slackbot",
    "category": "golang",
    "readme": "# Slackbot\n\nThis is a simple slackbot that takes a request and posts the message from the body to a slack channel.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/intro/getting-started).\n\n### Slack API Token\n\nYou'll need to head to https://api.slack.com/apps to create a Slack App.\n\nMake sure to:\n * Give it the bot `chat:write` scope\n * Install the app to your workspace\n * Copy the Bot User OAuth Access Token\n * Invite your bot to the channel you want it to post to using the `@botname` command in the channel (this will allow you to invite it)\n\n## Configure\n\nBefore deploying the Slackbot, you need to set up some config values. These config values are environment variables that the Slackbot needs to function correctly. The values are:\n\n- `SLACK_TOKEN`: This is the token you copied previously for the Slack API.\n- `SLACK_CHANNEL_ID`: This is the ID of the Slack channel where the bot will post messages.\n\nYou can set these config parameters using the `defang config set` command. Here's how:\n\n```sh\ndefang config set --name SLACK_TOKEN --value your_slack_token\ndefang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id\n```\n\n## Deploy\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang playground.\n\n```sh\ndefang compose up\n```\n\n## Usage\n\nOnce the Slackbot is deployed, you can send a POST request to the `/` endpoint with a JSON body containing the message you want to post to the Slack channel. Here's an example:\n\n```sh\ncurl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\\n  -H 'content-type: application/json' \\\n  --data-raw $'{\"message\":\"This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.\"}'\n```"
  },
  {
    "name": "AWS S3",
    "category": "nodejs",
    "readme": "\n## Setup\nThis sample requires an API key to access AWS S3. The name of the config value is referenced in the docker-compose.yml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name AWS_ACCESS_KEY\ndefang config set --name AWS_SECRET_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\ncurl -X POST -H 'Content-Type: application/json' -d '{ \"first_name\" : \"jane\", \"last_name\" : \"doe\" }' https://xxxxxx/upload\ncurl https://xxxxxx/download\n"
  },
  {
    "name": "Basic Service",
    "category": "nodejs",
    "readme": "# Express Request Inspector\nThis Node.js application, built with Express.js, is designed to inspect and display detailed information about incoming HTTP requests. It supports all HTTP methods and provides insights into the request path, method, headers, query parameters, and body. Note alongside your project, you should also include a package.json file that includes the relevant metadata such as package dependencies, scripts, project verrsions so that the Dockerfile can install necessary dependencies. \n\n\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "ChatGPT API",
    "category": "nodejs",
    "readme": "\n## Setup\nThis sample requires an API key to access the OpenAI API. The name of the config value is referenced in the docker-compose.yml file.\nTo provide a value for it, you can use the Defang CLI like this:\n```\n\ndefang config set --name OPENAI_KEY\n```\n\nand then enter the value when prompted.\n\n\n## Testing\n```\necho \"Hello\" | curl -H \"Content-Type: text/plain\" -d @- https://xxxxxxxx/prompt\n```\nor\n```\ncat prompt.txt | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```"
  },
  {
    "name": "Fetch and Return JSON",
    "category": "nodejs",
    "readme": "# Fetch and Return JSON"
  },
  {
    "name": "Web Page and Form Post",
    "category": "nodejs",
    "readme": "# Go Simple Form Submission App\nThis is a basic Node.js application using the Express framework to demonstrate handling a form submission. The application serves an HTML form where users can input their first name and then greets them personally upon submission. Note alongside your project, you should also include a package.json file that includes the relevant metadata such as package dependencies, scripts, project verrsions so that the Dockerfile can install necessary dependencies. \n\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "blogstarter",
    "category": "nodejs",
    "readme": "This template is a starter project developed using Next.js designed to make it easy to launch a blog. It offers an excellent starting point to help you publish your content by simply modifying the MDX files included in `_posts` directory. We have prepared all the necessary files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a> to describe the basic image of your applications.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">docker-compose file</a> to define and run multi-container Docker applications.\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> file to comply with the size limit (10MB).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n1. Edit your content in the `_posts` directory\n2. Open the terminal and type `defang login`\n3. Type `defang compose up` in the CLI\n4. Now your application will be launched\n"
  },
  {
    "name": "chat",
    "category": "nodejs",
    "readme": "# Minimal Chat App\n\nThis is a minimal chat application that shows how to use Socket.IO with Node.js with minimal code deployed with Defang.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/intro/getting-started).\n\n## Build and run the application\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang cloud.\n\n```sh\ndefang compose up\n```"
  },
  {
    "name": "document-starter",
    "category": "nodejs",
    "readme": "This template is a documentation starter project developed using Nextra, designed to streamline the creation of your documentation and quickly build a digital knowledgebase. You can add content easily by simply adding markdown files. This code-free solution requires no adjustments to the basic structure. We have prepared all the essential files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a> to describe the basic image of your applications.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">docker-compose file</a> to define and run multi-container Docker applications.\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> file to comply with the size limit (10MB).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Now your application will be launched\n"
  },
  {
    "name": "minimal",
    "category": "nodejs",
    "readme": "# Minimal Node.js example\n\nThis example shows how to build a minimal Node.js application using the [Node.js](https://nodejs.org/) runtime.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/intro/getting-started).\n\n## Build and run the application\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang cloud.\n\n```sh\ndefang compose up\n```"
  },
  {
    "name": "nextjs",
    "category": "nodejs",
    "readme": "# Next.js × Defang\n\nA basic Next.js app with a Dockerfile and docker-compose ready to deploy to AWS with [Defang](https://defang.io).\n\n## Steps\n\n1. [Install Defang](https://docs.defang.io/docs/intro/getting-started#install-the-defang-cli)\n2. [Authenticate with Defang](https://docs.defang.io/docs/concepts/authentication)\n3. (optional) [Authenticate with AWS](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n4. Run `defang compose up` in the root of this project"
  },
  {
    "name": "nextjs-boilerplate",
    "category": "nodejs",
    "readme": "This template is a boilerplate project developed using Next.js, offering a starting point to help you quickly build your website. We have prepared all the necessary files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a> to describe the basic image of your applications.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">docker-compose file</a> to define and run multi-container Docker applications.\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> file to comply with the size limit (10MB).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Now your application will be launched\n"
  },
  {
    "name": "nextjs-github-actions",
    "category": "nodejs",
    "readme": "# Next.js × Defang\n\nA basic Next.js app with a Dockerfile and docker-compose ready to deploy to AWS with [Defang](https://defang.io).\n\n## Steps\n\n1. [Install Defang](https://docs.defang.io/docs/intro/getting-started#install-the-defang-cli)\n2. [Authenticate with Defang](https://docs.defang.io/docs/concepts/authentication)\n3. (optional) [Authenticate with AWS](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n4. Run `defang compose up` in the root of this project"
  },
  {
    "name": "remix-aiven-postgres",
    "category": "nodejs",
    "readme": "# Full Stack Defang + Pulumi Example\n\nIn this example, we run a Remix application connected to a Postgres database using Prisma as an ORM. When we deploy our service to [Defang](https://defang.io/), we also deploy a Postgres service and database using [Aiven](https://aiven.io/) so we can run our full application in the cloud.\n\n## Running Locally\n\n\nTo run this example locally, you'll need to have a Postgres database. You can run one locally with Docker:\n\n```\ndocker run -p 5432:5432 -e POSTGRES_PASSWORD=password -d postgres\n```\n\nCreate a `.env` file with the following:\n\n```\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/postgres?schema=public\"\n```\n\nThen run `npm install` and `npm run dev` in the `remix` directory to start the application.\n\n\n## Deploying to Defang\n\nFirst, `cd` into the `pulumi` directory and make sure you're logged into Defang with `defang login` and into Pulumi with `pulumi login`.\n\nNext, head to your Aiven account and create an api token, then run the following command to store it in your Pulumi stack config:\n\n```\npulumi config set --secret aiven:apiToken <YourToken>\n```\n\nYou'll also need to make sure you have an Aiven organization with a billing method attached to a billing group. Get the organization id and the billing group id and add them to your config with the following commands:\n\n```\npulumi config set --secret aivenOrganizationId <OrgId>\npulumi config set --secret aivenBillingGroupId <BillingGroupId>\n```\n\nNow, run `pulumi up` to deploy your application to Defang and Aiven! Head to the [portal](https://portal.defang.dev) to check on status, or run `defang services`.\n\n"
  },
  {
    "name": "hasura",
    "category": "other",
    "readme": "# GraphQL API with Hasura + Postgres\n\nThis sample project demonstrates how to deploy Hasura with Defang and connect it to a Postgres database. We also demonstrate how to run a Postgres container during development and how to switch over to a managed postgres service like RDS, Neon, or others in production. If you want to get a compatible database ready to go really quickly for free, [Neon](https://neon.tech/) is a quick and easy way to go. The sample populates the database with some sample data so you can quickly start playing with the Hasura console. It sets wide open permissions on the tables as well so you can start querying or mutating the data right away.\n\n## Prerequisites\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. Have a managed database service configured and have the connection string ready.\n3. (optional) If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>.\n4. (optional) [Install the Hasura CLI](https://hasura.io/docs/latest/hasura-cli/install-hasura-cli/) to create migrations and update metadata for your Hasura GraphQL api.\n\n## Development\n\nFor development, we use a Postgres container. The Postgres container is defined in the `compose.dev.yml` file. The Hasura container is defined in the `compose.yml` file, with some overrides in the `compose.dev.yml` file so it can correctly connect to the development database container. \n\nTo start the development environment, run `docker compose -f ./compose.yml -f ./compose.dev.yml up`. This will start the Postgres container and the Hasura container. The Hasura console will be available at `http://localhost:8080` with the password `password`. \n**Note:** _If you want to make changes to your database, permissions, etc. you should use the Hasura console and the Hasura CLI to make those changes. See the next section for more information._\n\n### Editing the database/permissions etc.\n\nIf you want to edit the database, permissions, or any other Hasura settings such that you can deploy them to production, you should [install the Hasura CLI](https://hasura.io/docs/latest/hasura-cli/install-hasura-cli/). Then, after starting the development environment, you can run `hasura console` _inside the `./hasura` directory_. This will open the Hasura console in your browser. Any changes you make in the console will be saved to the `migrations` and `metadata` directories. When you run `defang compose up` these changes will be applied to the production environment.\n\n## Deploying\n1. Open the terminal and type `defang login`\n2. Add your connection string as a defang config value by typing `defang config set HASURA_GRAPHQL_DATABASE_URL` and pasting your connection string (which should be in the format `postgres://username:password@host:port/dbname`)\n3. Setup a password for hasura by typing `defang config set HASURA_GRAPHQL_ADMIN_SECRET` and adding a password you would like to login with.\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n"
  },
  {
    "name": "imgproxy",
    "category": "other",
    "readme": "# ImgProxy\n\nImgProxy is a fast and secure standalone server for resizing and converting remote images. It's can be deployed using their official Docker image, as documented [here](https://docs.imgproxy.net/installation#docker).\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/intro/getting-started).\n\n## Build and run the application\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang cloud.\n\n```sh\ndefang compose up\n```\n"
  },
  {
    "name": "pulumi",
    "category": "other",
    "readme": "# pulumi"
  },
  {
    "name": "vllm",
    "category": "other",
    "readme": "\n# Deploying Mistral with vLLM\n\nThis guide demonstrates how to deploy Mistral using VLM. You'll need a Hugging Face token to begin.\n\n## Prerequisites\n\n- Hugging Face token\n\n## Steps\n\n1. **Set the Hugging Face Token**\n\n   First, set the Hugging Face token using the `defang config` command.\n\n   ```bash\n   defang config set --name HF_TOKEN\n   ```\n\n2. **Launch with Defang Compose**\n\n   Run the following command to start the services:\n\n   ```bash\n   defang compose up\n   ```\n\n   The provided `docker-compose.yml` file includes the Mistral service. It's configured to run on an AWS instance with GPU support. The file also includes a UI service built with Next.js, utilizing Vercel's AI SDK.\n\n   > **OpenAI SDK:** We use the OpenAI sdk, but set the `baseURL` to our Mistral endpoint.\n\n   > **Note:** The API route does not use a system prompt, as the Mistral model we're deploying currently does not support this feature. To get around this we inject a couple messages at the front of the conversation providing the context (see the `ui/src/app/api/chat/route.ts` file). Other than that, the integration with the OpenAI SDK should be structured as expected.\n\n   > **Changing the content:** The content for the bot is set in the `ui/src/app/api/chat/route.ts` file. You can edit the prompt in there to change the behaviour. You'll notice that it also pulls from `ui/src/app/docs.md` to provide content for the bot to use. You can edit this file to change its \"knowledge\".\n\n## Configuration\n\n- The Docker Compose file is ready to deploy Mistral and the UI service.\n- The UI uses Next.js and Vercel's AI SDK for seamless integration.\n\nBy following these steps, you should be able to deploy Mistral along with a custom UI on AWS, using GPU capabilities for enhanced performance.\n"
  },
  {
    "name": "AI-ML Music",
    "category": "python",
    "readme": "# Music Recommendation API\nThis Music Recommendation API provides artist recommendations based on collaborative filtering using the Alternating Least Squares (ALS) algorithm from the implicit library. The dataset utilized is from Last.fm. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. \n\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "AWS S3",
    "category": "python",
    "readme": "\n## Setup\nThis sample requires an API key to access AWS S3. The name of the config values is referenced in the docker-compose.yml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name AWS_ACCESS_KEY\ndefang config set --name AWS_SECRET_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\ncurl -X POST -H 'Content-Type: application/json' -d '{ \"first_name\" : \"jane\", \"last_name\" : \"doe\" }' https://xxxxxx/upload\ncurl https://xxxxxx/download\n"
  },
  {
    "name": "Basic Service",
    "category": "python",
    "readme": "# Flask Request Inspector API\n\nThis Flask application is designed to inspect and return detailed information about HTTP requests. It supports both GET and POST methods, providing insights into the request path, method, headers, query parameters, and body. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. \n\n## Features\n\n1. Support both GET and POST HTTP methods\n2. Detailed information about the request, including path, method, headers, query parameters, and body.\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "ChatGPT API",
    "category": "python",
    "readme": "\n## Setup\nThis sample requires an API key to access the OpenAI API. The name of the config value is referenced in the docker-compose.yml file. To provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name OPENAI_KEY\n```\n\nand then enter the value when prompted.\n\n\n## Testing\n```\necho \"Hello\" | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\nor\n```\ncat prompt.txt | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```"
  },
  {
    "name": "Fetch and Return JSON",
    "category": "python",
    "readme": "# Fetch and Return JSON\n\nThis Flask application fetches average interest rates from the Fiscal Data Treasury API. It provides endpoints to check the status of the API and to retrieve the latest average interest rates. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. \n\n## Features\nEndpoint to check API status.\nEndpoint to fetch average interest rates from the Fiscal Data Treasury API.\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). This is optional\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "Web Page and Form Post",
    "category": "python",
    "readme": "# Simple Form Submission Flask App\n\nThis Flask application provides a basic example of handling form submissions. It displays an HTML form where users can input their first name. Upon submission, the application greets the user by name on a new page. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. \n\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a>\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "django",
    "category": "python",
    "readme": "This is a simple example of how to run Django on Defang. It is a simple Todo app that uses SQLite as the database (so data is *not* persisted between deployments). We will be putting together an example with a managed database soon.\n\nThe app includes a management command which is run on startup to create a superuser with the username `admin` and password `admin`. This means you can login to the admin interface at `/admin/` and see the Django admin interface without any additional steps. The `example_app` is already registered and the `Todo` model is already set up to be managed in the admin interface.\n\nThe Dockerfile and compose files are already set up for you and are ready to be deployed. Serving is done using [Gunicorn](https://gunicorn.org/) and uses [WhiteNoise](https://whitenoise.readthedocs.io/en/latest/) for static files. The `CSRF_TRUSTED_ORIGINS` setting is configured to allow the app to run on a `defang.dev` subdomain.\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a> to describe the basic image of your applications.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">docker-compose file</a> to define and run multi-container Docker applications.\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> file to comply with the size limit (10MB).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n1. (optional) If you are using Defang BYOC, make sure to update the `CSRF_TRUSTED_ORIGINS` setting in the `settings.py` file to include an appropriate domain.\n2. Open the terminal and type `defang login`\n3. Type `defang compose up` in the CLI\n4. Now your application will be launched\n"
  },
  {
    "name": "django-postgresql",
    "category": "python",
    "readme": "\nThis template is a customer relationship management list project developed using Python Django framework, offering a starting point to help you quickly build your customer management system. We use PostgreSQL as the database. We have prepared all the essential files for deployment. By spending less than 10 minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live to the world!\n\n## NOTE\n1. This sample showcases how you could deploy a full-stack application with Defang and Django. However, it deploys postgres as a defang service. Defang [services](https://12factor.net/processes) are ephemeral and should not be used to run stateful workloads in production as they will be reset on every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. If you stick to Rail's default SQLite database, your stored data will be lost on every deployment, and in some other situations. In the future, Defang will help you provision and connect to managed databases.\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a> to describe the basic image of your applications.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">docker-compose file</a> to define and run multi-container Docker applications.\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> file to comply with the size limit (10MB).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Now your application will be launched\n"
  },
  {
    "name": "flask",
    "category": "python",
    "readme": "# A Simple Flask App\n\nThis is a sample of a basic Flask TODO app. The items are stored in memory and are lost when the server is restarted, but it should give you a basic idea of how to get started with Flask on Defang. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. \n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a>.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">compose file</a> to define and run multi-container Docker applications (this is how Defang identifies services to be deployed).\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> to ignore files that are not needed in the Docker image or will be generated during the build process.\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account (optional)</a> \n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n"
  },
  {
    "name": "rails",
    "category": "ruby",
    "readme": "\nThis template is a member list project developed using Ruby on Rails, offering a starting point to help you quickly build your team management system. We have prepared all the essential files for deployment. By spending less than 10 minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live to the world!\n\n## NOTE\n1. This sample showcases how you could deploy a full-stack application with Defang in Ruby on Rails. However, it uses a SQLite database, which isn't production-ready and will be reset with every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. If you stick to Rail's default SQLite database, your stored data will be lost on every deployment, and in some other cases. In the future, Defang will help you provision and connect to managed databases.\n\n## Essential Setup Files\n1. A <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">Dockerfile</a> to describe the basic image of your applications.\n2. A <a href=\"https://docs.defang.io/docs/concepts/compose\">docker-compose file</a> to define and run multi-container Docker applications.\n3. A <a href=\"https://docs.docker.com/build/building/context/#dockerignore-files\">.dockerignore</a> file to comply with the size limit (10MB).\n\n## Prerequisite\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>\nPlus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Now your application will be launched\n"
  }
]
