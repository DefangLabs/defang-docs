{"searchDocs":[{"title":"Announcing the Private Beta for the Defang Opinionated Platform","type":0,"sectionRef":"#","url":"/blog/2023/06/29/Announcing-the-Private-Beta-for-the-DOP","content":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our GitHub repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Announcing the Defang Public Beta","type":0,"sectionRef":"#","url":"/blog/2024/02/12/announcing-defang-public-beta","content":"Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today’s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you’ll receive an invitation to our Slack support channel in email. You are also welcome to file GitHub issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"About my Journey Deploying my First Web Application","type":0,"sectionRef":"#","url":"/blog/2024/03/04/about-my-journey-deploying-my-first-web-application","content":"About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors’ instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like &quot;ECS clusters,&quot; &quot;task definitions,&quot; and &quot;IAM roles&quot; were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial’s scenarios. It could be confusing if you are new to this area I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. I have this scary screen when trying to delete the service I created; this is merely one of the many errors I faced Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. with just a single command in the CLI With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. It is deployed to the internet! (arorschach is my username) Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs","keywords":"","version":null},{"title":"Add Defang to your developer environments instantly","type":0,"sectionRef":"#","url":"/blog/2024/03/20/dev-environments","content":"","keywords":"","version":null},{"title":"Codespaces​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/2024/03/20/dev-environments#codespaces","content":" If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's set up using the Defang CLI Dev Container Feature.  ","version":null,"tagName":"h2"},{"title":"Dev Containers​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/2024/03/20/dev-environments#dev-containers","content":" Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others.  ","version":null,"tagName":"h2"},{"title":"Gitpod​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/2024/03/20/dev-environments#gitpod","content":" Gitpod is another Cloud IDE, a bit like GitHub Codespaces. If prefer Gitpod, you can try Defang in a Gitpod environment by using this repo. ","version":null,"tagName":"h2"},{"title":"June 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/07/01/july-product-updates","content":"","keywords":"","version":null},{"title":"Windows Experience Improvements​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/2024/07/01/july-product-updates#windows-experience-improvements","content":" For our Windows users out there, we've made some changes to make your Defang experience even smoother:  You can now install Defang using winget, the Windows Package Manager, for a streamlined setupWe've introduced a signed binary for added security and peace of mind  Deploying your apps from Windows just got a little bit nicer.  ","version":null,"tagName":"h2"},{"title":"One-click Deploy​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/2024/07/01/july-product-updates#one-click-deploy","content":" We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects.  Try it now from our portal!    ","version":null,"tagName":"h2"},{"title":"Managed Redis Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/2024/07/01/july-product-updates#managed-redis-updates","content":" We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang.  ","version":null,"tagName":"h2"},{"title":"Updated Samples​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/2024/07/01/july-product-updates#updated-samples","content":" We've updated our sample projects to showcase how to use them with Defang, including:  ASP.NET CoreFeathers.jsFlask &amp; LangChainBullMQ with Redis  Check them out if you're looking for some inspiration or a starting point for your own projects.  ","version":null,"tagName":"h2"},{"title":"CLI Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/2024/07/01/july-product-updates#cli-updates","content":" We're always looking for ways to enhance the CLI experience. Here's what's new:  npx defang automatically checks to always have the latest version of the CLIThe output during defang compose up has been streamlined to focus on the most important informationdefang tail now supports listening to specific services, making it easier to troubleshoot issuesWe've improved hints and error messages to better guide you when something goes wrongThe CLI now has improved color support for light theme terminals, making it easier on the eyes  It's the small refinements that can make a big difference in your workflow.  ","version":null,"tagName":"h2"},{"title":"Other Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/2024/07/01/july-product-updates#other-updates","content":" Here are a few more things that didn't quite fit with the rest:  Visibility into ECS deployment events in BYOC tail logsImprovements to ACME certificate generation  Keep an eye out for these updates in the near future.    As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! 🚀 ","version":null,"tagName":"h2"},{"title":"May 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/06/01/june-product-updates","content":"","keywords":"","version":null},{"title":"Samples, samples, samples!​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#samples-samples-samples","content":" We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality.  ","version":null,"tagName":"h2"},{"title":"Start from a sample in seconds​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#start-from-a-sample-in-seconds","content":" With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit.  ","version":null,"tagName":"h3"},{"title":"Sample templates​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#sample-templates","content":" If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-&lt;sample_name&gt;-template. If you open them, you can create a new repo by clicking this button:    Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately.  ","version":null,"tagName":"h3"},{"title":"ACME for BYOD​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#acme-for-byod","content":" We’re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy.  ","version":null,"tagName":"h2"},{"title":"Warnings for Stateful Services​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#warnings-for-stateful-services","content":" To help you avoid potential pitfalls, we’ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:&lt;version&gt;, redis:&lt;version&gt;, minio:&lt;version&gt;, etc.  In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which...  ","version":null,"tagName":"h2"},{"title":"Managed Redis!​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#managed-redis","content":" Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition.  ","version":null,"tagName":"h2"},{"title":"Load Testing​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#load-testing","content":" To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly.  ","version":null,"tagName":"h2"},{"title":"Upgraded Kaniko​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#upgraded-kaniko","content":" We’ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications.  ","version":null,"tagName":"h2"},{"title":"Upcoming Features​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#upcoming-features","content":" We’re not stopping here! Here’s a sneak peek at what’s coming soon:  ","version":null,"tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#managed-postgres","content":" Building on the momentum of Managed Redis, we’re introducing Managed Postgres. Soon you’ll be able to easily integrate a managed Postgres database into your deployment!  ","version":null,"tagName":"h3"},{"title":"BYOC ECS Lifecycle Events​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/2024/06/01/june-product-updates#byoc-ecs-lifecycle-events","content":" Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood.    Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! 🚀 ","version":null,"tagName":"h3"},{"title":"April 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/05/01/may-product-updates","content":"","keywords":"","version":null},{"title":"npx defang​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/2024/05/01/may-product-updates#npx-defang","content":" We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally by running:  npx defang@latest   This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!  ","version":null,"tagName":"h2"},{"title":"(coming soon) Bring Your Own Domain with Let's Encrypt​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/2024/05/01/may-product-updates#coming-soon-bring-your-own-domain-with-lets-encrypt","content":" Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you.  ","version":null,"tagName":"h2"},{"title":"Windows Support​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/2024/05/01/may-product-updates#windows-support","content":" Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed:  ansi color codes in logshandle ctrl-c when tailing logs  ","version":null,"tagName":"h2"},{"title":"Improved CLI​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/2024/05/01/may-product-updates#improved-cli","content":" We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable.  log messages have been made more clearadding more progress information during compose up  ","version":null,"tagName":"h2"},{"title":"Stability and Reliability​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/2024/05/01/may-product-updates#stability-and-reliability","content":" Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:  capacity improvements in build queuesimprovements in log availability ","version":null,"tagName":"h2"},{"title":"July 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/07/31/july-product-updates-2","content":"","keywords":"","version":null},{"title":"Townhall​","type":1,"pageTitle":"July 2024 Defang Compose Update","url":"/blog/2024/07/31/july-product-updates-2#townhall","content":" If you're excited about what's coming next and want to hear more about our vision for the future, join us for our Townhall on August 21st. We'll be sharing more about our roadmap and what we're working on next. We'll also be making sure to take time to answer any questions you have, hear your feedback, and learn more about what you want from Defang!  Register here    We’re excited to keep improving Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud application. Stay tuned for more updates next month. ","version":null,"tagName":"h2"},{"title":"Deploy a Go-powered slackbot with Defang","type":0,"sectionRef":"#","url":"/blog/2024/03/28/slackbot-sample","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/2024/03/28/slackbot-sample#prerequisites","content":" Before we dive into the details, let's make sure you have everything you need to get started:  Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the bot chat:write scope. Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the &quot;Install to Workspace&quot; button in the Slack admin UI to do this. Mine says &quot;Reinstall&quot; because I've already installed it. Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API. Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the @&lt;botname&gt; command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel. Clone the Sample Code: Clone the Defang repository and navigate to the samples/golang/slackbot directory. This directory contains the sample code for the Slackbot.  git clone https://github.com/DefangLabs/defang cd defang/samples/golang/slackbot   ","version":null,"tagName":"h2"},{"title":"Deployment Steps​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/2024/03/28/slackbot-sample#deployment-steps","content":" Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:  Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's defang config set command to set the SLACK_TOKEN and SLACK_CHANNEL_ID configs. Replace your_slack_token and your_slack_channel_id with the respective values: defang config set --name SLACK_TOKEN --value your_slack_token defang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id Deploy the Slackbot: Use the Defang CLI's defang compose up command to deploy.  ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/2024/03/28/slackbot-sample#usage","content":" With your Slackbot up and running, let's explore how to make the most of it. Let's send a POST request to the / endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:  curl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\ -H 'content-type: application/json' \\ --data-raw $'{&quot;message&quot;:&quot;This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.&quot;}'   ","version":null,"tagName":"h2"},{"title":"Takeaways​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/2024/03/28/slackbot-sample#takeaways","content":" Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! ","version":null,"tagName":"h2"},{"title":"Hard Lessons From Hardware","type":0,"sectionRef":"#","url":"/blog/2024/11/12/hard-lessons-from-hardware","content":"","keywords":"","version":null},{"title":"My Story of Embedded Systems With Defang​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/2024/11/12/hard-lessons-from-hardware#my-story-of-embedded-systems-with-defang","content":" Have you ever looked at a touch screen fridge and wondered how it works? Back in my day (not very long ago), a fridge was just a fridge. No fancy built-in interface, no images displayed, and no wifi. But times have changed, and I’ve learned a lot about embedded systems, thanks to Defang!    From my background, I was more into the web development and software side of things. Buffer flushing? Serial monitors? ESP32-S3? These were unheard of. Then one day at Defang, I was suggested to work on a project with a SenseCAP Indicator, a small programmable touch screen device. Everyone wished me good luck when I started. That’s how I knew it wasn’t going to be an easy ride. But here I am, and I’m glad I did it.  What is embedded systems/programming? It’s combining hardware with software to perform a function, such as interacting with the physical world or accessing cloud services. A common starting point for beginners is an Arduino board, which is what the SenseCAP Indicator has for its hardware. My goal was to make a UI display for this device, and then send its input to a computer, and get that data into the cloud.    ","version":null,"tagName":"h2"},{"title":"The Beginning​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/2024/11/12/hard-lessons-from-hardware#the-beginning","content":" My journey kicked off with installing the Arduino IDE on my computer. It took me two hours—far longer than I expected—because the software versions I kept trying were not the right ones. Little did I know that I would encounter this issue many times later, such as when downloading ESP-IDF, a tool for firmware flashing. Figuring out what not to install had become a highly coveted skill.  The next part was writing software to display images and text. This was slightly less of a problem thanks to forums of users who had done the exact same thing several years ago. One tool I used was Squareline Studio, a UX/UI design tool for embedded devices. With a bit of trial and error, I got a simple static program displayed onto the device. Not half bad looking either. Here’s what it looked like:    ","version":null,"tagName":"h2"},{"title":"The Middle​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/2024/11/12/hard-lessons-from-hardware#the-middle","content":" Now came the networking part. Over wifi, I set up a Flask (Python) server on my computer to receive network pings from the SenseCAP Indicator. I used a library called ArduinoHTTPClient. At first, I wanted to ping the server each time a user touched the screen. Then came driver problems, platform incompatibilities, deprecated libraries…  … After weeks of limited progress due to resurfacing issues, I decided to adjust my goal to send pings on a schedule of every 5 seconds, rather than relying on user input. I changed the UI to be more colorful, and for good reason. Now, each network ping appears with a message on the screen. Can you look closely to see what it says?    This is what the Flask server looked like on my computer as it got pinged:    Hooray! Once everything was working, It was time to deploy my Flask code as a cloud service so I could access it from any computer, not just my own. Deployment usually takes several hours due to configuring a ton of cloud provider settings. But I ain’t got time for that. Instead, I used Defang to deploy it within minutes, which took care of all that for me. Saved me a lot of time and tears.  Here’s the Flask deployment on Defang’s Portal view:    Here’s the Flask server on the cloud, accessed with a deployment link:    ","version":null,"tagName":"h2"},{"title":"The End​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/2024/11/12/hard-lessons-from-hardware#the-end","content":" After two whole months, I finally completed my journey from start to finish! This project was an insightful dive into the world of embedded systems, internet networking, and cloud deployment.  Before I let you go, here are the hard lessons from hardware, from yours truly:  Learning what not to do can be equally as important.Some problems are not as unique as you think.One way to achieve a goal is by modifying it.Choose the simpler way if it is offered.That’s where Defang comes in.  Want to try deploying to the cloud yourself? You can try it out here. Keep on composing up! 💪 ","version":null,"tagName":"h2"},{"title":"August 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/08/30/august-product-updates","content":"","keywords":"","version":null},{"title":"Ask Defang​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024/08/30/august-product-updates#ask-defang","content":" We've just rolled out an initial version of Ask Defang, our AI-driven documentation assistant that can help you navigate the Defang docs and get deploying faster. It's deployed with Defang and using a combination of embeddings run on a GPU-powered service, Defang managed Redis, and OpenAI APIs.  Check it out here or head to ask.defang.io to get started!  ","version":null,"tagName":"h2"},{"title":"Enhanced Platform Symmetry​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024/08/30/august-product-updates#enhanced-platform-symmetry","content":" We've been hard at work improving the symmetry between our Playground and BYOC environments as well as docker compose up vs defang compose up to provide a more seamless experience. You can now use multiple compose files and in BYOC the CLI will subscribe to events to monitor service health during deployments.  ","version":null,"tagName":"h2"},{"title":"AI Features and Debugging Improvements​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024/08/30/august-product-updates#ai-features-and-debugging-improvements","content":" We've been working on several AI-driven enhancements to make your development process even more efficient. We've addressed key issues, such as file generation failures due to parsing errors and invalid compose files. Also, our Debug Assistant is now more robust, handling context size limits better than before.      ","version":null,"tagName":"h2"},{"title":"August Events​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024/08/30/august-product-updates#august-events","content":" This month, we hosted an in-person workshop to get more developers acquainted with Defang and simplify their cloud app journey. You can view the presentation here. We also held the first-ever DevTools Vancouver meetup, bringing together local DevTool founders, engineers, and enthusiasts.  Looking ahead, we’re excited to collaborate with MLH, Hack the North, LangaraHacks, and more in September. If you'd like to attend any of these events, be sure to sign up!        ","version":null,"tagName":"h2"},{"title":"Roadmap​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024/08/30/august-product-updates#roadmap","content":" We're working on a number of new features to make Defang even better. Here are some of the most exciting ones:  Managed Postgres: We're working on getting Defang to provision managed Postgres services for you, so you can easily store and query data in your applications.DigitalOcean BYOC: We're working on adding DigitalOcean BYOC to give you even more choice over where you deploy your applications.    We’re excited to keep enhancing Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud applications. Stay tuned for more updates next month! 🚀 ","version":null,"tagName":"h2"},{"title":"September 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/09/30/september-product-updates","content":"","keywords":"","version":null},{"title":"September Events​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024/09/30/september-product-updates#september-events","content":" In Sep, the Defang team participated in a number of events including HacktheNorth, LangaraHacks, MLH Global Hack Week and other MLH hackathons. It’s great to see Defang being put to use by these hackers to build their amazing projects. And we get useful insights from these events that help us improve the product. We will continue to do more of these events in the future - watch our LinkedIn page for announcements.    ","version":null,"tagName":"h2"},{"title":"Google for Startups Accelerator Canada​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024/09/30/september-product-updates#google-for-startups-accelerator-canada","content":" Also in Sep, Defang was included in the Google for Startups Accelerator Canada. This is a great recognition of the value Defang is providing to cloud developers. Through our collaboration with Google, we hope to add GCP as another target cloud for Defang in the coming months - stay tuned!        As always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! 🚀 ","version":null,"tagName":"h2"},{"title":"October 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024/11/13/october-product-updates","content":"","keywords":"","version":null},{"title":"Events and Adoption​","type":1,"pageTitle":"October 2024 Defang Compose Update","url":"/blog/2024/11/13/october-product-updates#events-and-adoption","content":" In October, the Defang team was actively involved in a range of exciting events. We participated in MLH Cloud Week, StormHacks, and hosted a DevTools Vancouver meetup, bringing together local DevTool founders, engineers, and enthusiasts. It was inspiring to see Defang in action, helping these hackers build their amazing projects.    When we shipped our Public Beta earlier in 2024, we had a goal to reach 1000 users by end of year. We are pleased to announce that we have already reached this milestone a couple of months in advance! We are excited to see the momentum behind the product and how our users are using Defang for developing and deploying a variety of different applications. Thank you for your support!  ","version":null,"tagName":"h2"},{"title":"The Road Ahead​","type":1,"pageTitle":"October 2024 Defang Compose Update","url":"/blog/2024/11/13/october-product-updates#the-road-ahead","content":" The team is now heads-down dotting the i’s and crossing the t’s so we can release Defang V1 before end of year. This will enable customers to use Defang for production workloads. We look forward to sharing more in our next monthly update.        As always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! 🚀 ","version":null,"tagName":"h2"},{"title":"🚀 Defang V1: Launch Week is Here!","type":0,"sectionRef":"#","url":"/blog/2024/12/04/launch-week","content":"","keywords":"","version":null},{"title":"What’s New in Defang CLI V1?​","type":1,"pageTitle":"🚀 Defang V1: Launch Week is Here!","url":"/blog/2024/12/04/launch-week#whats-new-in-defang-cli-v1","content":" Defang is a powerful tool that lets you easily develop, deploy, and debug production-ready cloud applications. With Defang V1, we continue to deliver on our vision to make cloud development effortlessly simple and portable, with the ability to develop once and deploy anywhere. Here’s what’s included in this milestone release:  Production-Ready Support for AWS  Seamlessly deploy and scale with confidence on AWS. Defang is now WAFR-compliant, assuring that your deployments conform to all the best-practices for AWS deployments. Defang is now officially part of the AWS Partner Network.  New - Google Cloud Platform (GCP) in Preview  This week, we are excited to unveil support for deployments to GCP, in Preview. Start building and exploring and give us feedback as we work to enhance the experience further and move towards production support. Defang is also now officially part of the Google Cloud Partner Advantage program.  Support for DigitalOcean in Preview  Developers using DigitalOcean can explore our Preview features, with further enhancements and production support coming soon.  Defang Product Tiers and Introductory Pricing 🛠️  As we move into V1, we are also rolling out our differentiated product tiers, along with our special introductory pricing. Fear not, we will always have a free tier for hobbyists - conveniently called the Hobby tier. We now also provide Personal, Pro, and Enterprise tiers for customers with more advanced requirements. Check out what is included in each here. And as always, the Defang CLI is and remains open-source.  ","version":null,"tagName":"h2"},{"title":"Launch Week Activities​","type":1,"pageTitle":"🚀 Defang V1: Launch Week is Here!","url":"/blog/2024/12/04/launch-week#launch-week-activities","content":" We’ve lined up an exciting week of activities to showcase the power of Defang and bring together our growing community:  December 4: Vancouver CDW x AWS re:Invent Watch Party  Join us at the Vancouver CDW x AWS re:Invent Watch Party, where we will have a booth showcasing Defang’s capabilities and AWS integration. Stop by to learn more about Defang and see a live demo from the Defang dev team.  December 5–6: GFSA DemoDay and Git Push to 2025: Devs Social Party  Hear directly from Defang’s co-founder and CTO, Lio Lunesu, as we unveil Defang’s support for GCP at the Google for Startups Accelerator (GFSA) DemoDay event in Toronto. This event will also be live-streamed here.  Additionally, join us on December 5th for the final meetup of the year for Vancouver’s developer groups, hosted by VanJS in collaboration with other local dev communities.  December 6 &amp; 7: MLH Global Hack Week (GHW)  Join us during MLH Global Hack Week for hands-on workshops and learn how to build production-ready cloud applications in minutes with Defang.  December 7: Cloud Chat  An IRL event with our team to explore V1 features in depth, answer your questions, and share insights from our journey.  December 10: Product Hunt Launch  Be part of our Product Hunt debut and show your support as we reach the broader tech community.  ","version":null,"tagName":"h2"},{"title":"Join the Celebration 🎉​","type":1,"pageTitle":"🚀 Defang V1: Launch Week is Here!","url":"/blog/2024/12/04/launch-week#join-the-celebration-","content":" This launch week is not just about us. It is about you, our community. Here is how you can get involved:  Explore the Platform: Sign up at Defang.io and dive into V1. Attend Events: Mark your calendar for our scheduled activities. Spread the Word: Follow us on LinkedIn and X, share your experiences, and let others know why you love Defang.  We’re excited to celebrate this milestone with all of you. Stay tuned for more updates, and let’s make Launch Week unforgettable! ","version":null,"tagName":"h2"},{"title":"Defang is live on Product Hunt!","type":0,"sectionRef":"#","url":"/blog/2024/12/11/product-hunt","content":"The moment is finally here – Defang V1 is officially LIVE on Product Hunt! 🎉 Over the past few months, our team has been working tirelessly to create a tool that transforms how developers develop, deploy, and debug cloud apps. With Defang, you can go from idea to your favorite cloud in minutes. 🚀 Today, we have the opportunity to showcase Defang to a global audience, and your support could make all the difference! If you already have a Product Hunt account, it's super easy. ✅ You can support our product if you like what we have built so far✅ You can leave a comment and any feedback you may have (comments are great!)✅ You can leave a review Product Hunt launches are time sensitive as they last 24 hours, so if you have 30 seconds available right now, it would really mean a lot. If you don't already have a Product Hunt account, please don't create one now to upvote (we may get penalized for that). Instead, you can like and share our (e.g. LinkedIn, Twitter, Instagram or Facebook) posts . Thank you in advance. Your support means the world.","keywords":"","version":null},{"title":"July 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025-08-12-product-update","content":"","keywords":"","version":null},{"title":"Railpack Integration​","type":1,"pageTitle":"July 2025 Defang Compose Update","url":"/blog/2025-08-12-product-update#railpack-integration","content":" We’ve integrated Railpack into Defang to make deployments even smoother. Railpack automatically builds OCI-compliant images from your source code with minimal configuration. This helps eliminate one of the most common issues our users face: missing or invalid Dockerfiles, especially when they’re generated by LLMs or created by users with limited Docker experience. Now, if no Dockerfile is provided, Defang will seamlessly use Railpack to build a working image for you, so you can focus on your code, not your container setup.  ","version":null,"tagName":"h2"},{"title":"GCP Cost Estimation​","type":1,"pageTitle":"July 2025 Defang Compose Update","url":"/blog/2025-08-12-product-update#gcp-cost-estimation","content":" In June, Defang announced real-time cost estimation for AWS. In July, we took our live cloud cost estimation to the next level by extending support to GCP. Defang now makes it easy to compare real-time pricing for both cloud providers. All you need is your project's compose.yaml file. Whether you’re optimizing for cost, performance, or flexibility, Defang makes it easy to get the information you need to deploy with confidence.  ","version":null,"tagName":"h2"},{"title":"Managed MongoDB on GCP​","type":1,"pageTitle":"July 2025 Defang Compose Update","url":"/blog/2025-08-12-product-update#managed-mongodb-on-gcp","content":" Defang now supports managed MongoDB on GCP through MongoDB-compatible APIs provided by Google Cloud. This integration allows you to spin up a fully managed Firestore datastore and interact with it just like a standard MongoDB instance without any manual setup or configuration.  ","version":null,"tagName":"h2"},{"title":"Agentic LangGraph Sample​","type":1,"pageTitle":"July 2025 Defang Compose Update","url":"/blog/2025-08-12-product-update#agentic-langgraph-sample","content":" We have published a new Agentic LangGraph sample project that demonstrates LangGraph agent deployment with Defang. As AI agent development grows, Defang makes it simple to deploy and scale agents, including those built with LangChain or LangGraph. You can explore the example to see how it works in practice.  ","version":null,"tagName":"h2"},{"title":"Events and Community​","type":1,"pageTitle":"July 2025 Defang Compose Update","url":"/blog/2025-08-12-product-update#events-and-community","content":" In July, we hosted the Bière &amp; Code &amp; Beer MTL during Startupfest in Montreal. It was an incredible evening with great energy, tech conversations, and the chance to connect with so many talented builders over drinks.  We are excited to see what you will deploy with Defang next. Join our Discord to ask questions, get support, and share your builds with the community.  More coming in August. ","version":null,"tagName":"h2"},{"title":"June 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025-07-10-product-update","content":"","keywords":"","version":null},{"title":"🚀 Live AWS Cost Estimation​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#-live-aws-cost-estimation","content":" We just launched something we’re really excited about: live AWS cost estimation before you deploy. Most devs ship to the cloud without knowing what it’s going to cost and that’s exactly the problem we’re solving. With Defang, you can now estimate the cost of deployment of an Docker Compose application and choose the deployment mode - affordable / balanced / high_availability - that best suits your needs.  👉 Check out the docs  ","version":null,"tagName":"h2"},{"title":"🧠 CrewAI + Defang Starter Kit​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#-crewai--defang-starter-kit","content":" In June, we launched a full-stack starter kit for building real-time RAG and multi-agent apps with CrewAI + Defang. It’s designed to help you move fast with a production-style setup — including Django, Celery, Channels, Postgres (with pgvector), Redis for live updates, and Dockerized model runners you can easily customize. CrewAI handles the agent workflows, and with Defang, you can deploy the whole thing to the cloud in a single command. Whether you’re building a smart Q&amp;A tool or a multi-agent research assistant, this stack gives you everything you need to get started.  👉 Try it out here  ","version":null,"tagName":"h2"},{"title":"📊 Deployment Info in Portal​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#-deployment-info-in-portal","content":" We’ve added active deployment information to the Defang Portal. You can now see your currently active deployments across various cloud providers and understand the details of each, while still managing your cloud environments through the provider’s own tools (e.g. the AWS Console).  ","version":null,"tagName":"h2"},{"title":"☁️ Playground Now Runs on AWS + GCP​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#️-playground-now-runs-on-aws--gcp","content":" Internally, we also hit a big milestone: The Defang Playground now runs on both AWS and GCP, showing the power of Defang’s multi-cloud infrastructure. We’ve also enabled load balancing between the two platforms and plan to share a detailed blog post on how it works soon.  ","version":null,"tagName":"h2"},{"title":"🧩 VS Code Extension Released​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#-vs-code-extension-released","content":" We also released the Defang VS Code Extension, making it even easier to deploy and manage cloud apps right from your editor. No terminal needed.  One-click deployBuilt-in tools to manage servicesZero config, fast setup  👉 Try it out here  ","version":null,"tagName":"h2"},{"title":"💬 Ask Defang via Intercom​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#-ask-defang-via-intercom","content":" You can now try out the Ask Defang chatbot directly within Intercom! This new integration makes it easier than ever to get instant answers and support while you work. Ask Defang itself is deployed using Defang to our own cloud infrastructure.  ","version":null,"tagName":"h2"},{"title":"🐳 Docker x Defang White Paper​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#-docker-x-defang-white-paper","content":" And one more thing: bridging local development and cloud deployment just got easier. We’ve published white papers on how Defang extends Docker Compose and GCP workflows to the cloud — using familiar tools at scale. An AWS white paper is coming soon.  👉 Read the white paper here  👉 Read the GCP white paper  ","version":null,"tagName":"h2"},{"title":"Events and Community​","type":1,"pageTitle":"June 2025 Defang Compose Update","url":"/blog/2025-07-10-product-update#events-and-community","content":" In June, we showcased a powerful new demo at AWS events: “What If You Could See AWS Costs Before You Deployed?” Jordan Stephens walked through how to go from Docker Compose to AWS infra with real-time cost estimates and easy teardown, all via Defang.  👉 Watch the demo here  We can’t wait to see what you deploy with Defang. 👉 Join our Discord  More coming in July. ","version":null,"tagName":"h2"},{"title":"January 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025/02/07/january-product-updates","content":"Welcome to 2025! As we had shared in our early Dec update, we reached our V1 milestone with support for GCP and DigitalOcean in Preview and production support for AWS. We were very gratified to see the excitement around our launch, with Defang ending 2024 with twice the number of users as our original goal! We are excited to build on that momentum going into 2025. And we are off to a great start in Jan, with some key advancements: GCP parity with AWS: We are really excited to announce that our GCP provider is now feature-complete, with support for key features such as Managed Postgres, Managed Redis, BYOD (Bring-Your-Own-Domain), GPUs, AI-assisted Debugging, and more. Install the latest version of our CLI and give it a try! Please let us know your feedback.Defang Deployed with Defang: In 2025, we are doubling our focus on production use-cases where developers are using Defang every day to deploy their production apps. And where better to start than with Defang itself? We had already been using Defang to deploy portions of our infrastructure (such as our web site), but we are super happy to report that now we are using Defang to deploy all our services - including our Portal, Playground, the Defang back-end (aka Fabric) and more. We’ll be sharing more about how we did this, and publishing some of the related artifacts, in a blog post soon - stay tuned.Campus Advocate Program: One of our key goals for 2025 is to bring Defang to more students and hobbyists. To do this, we are very excited to launch our Campus Advocate Program, a community of student leaders passionate about cloud technology. Our advocates will build communities, host events, and help peers adopt cloud development with Defang. If you’re a student eager to drive cloud innovation on your campus, we’d love to hear from you - you can apply here.1-click Deploy instructions: One of our most popular features is the ability to deploy any of our 50+ samples with a single click. We have now published instructions showing how you can provide a similar experience for your project or sample. We are curious to see what you deploy with this!Model Context Protocol sample: AI agents are of course the rage nowadays. Recently, Docker published a blog showing how you can use Docker to containerize “servers” following Anthropic’s Model Context Protocol. We have now published a sample that shows you how to easily deploy such containerized servers to the cloud using Defang - check it out here. So, you can see we have been busy! But that is not all - we have a lot more in the pipeline in the coming months. Stay tuned - it’s going to be an exciting 2025! P.S.: Defang is now on Bluesky! Follow us to stay connected, get the latest updates, and join the conversation. See you there!","keywords":"","version":null},{"title":"Introducing Defang's New Look: Website & Logo Refresh","type":0,"sectionRef":"#","url":"/blog/2025/03/12/website-logo-refresh-announcement","content":"","keywords":"","version":null},{"title":"Why the Refresh?​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#why-the-refresh","content":" As we reflected on our journey, we realized our branding and messaging needed to better reflect Defang's current value-proposition. That's why today, we're excited to unveil our brand refresh, our first since the early days of Defang.  ","version":null,"tagName":"h2"},{"title":"Here's what's new:​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#heres-whats-new","content":" ","version":null,"tagName":"h2"},{"title":"1. Refining Our Messaging​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#1-refining-our-messaging","content":" As Defang evolves, so does our message:  Our Promise: Develop Anything, Deploy Anywhere.What We Enable: Any App, Any Stack, Any Cloud.How It Works: Take your app from Docker Compose to a secure, scalable deployment on your favorite cloud in minutes.  ","version":null,"tagName":"h3"},{"title":"2. A Sleek New Logo​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#2-a-sleek-new-logo","content":" We've modernized our logo while keeping the core hexagonal design. The new look symbolizes Defang's role in seamlessly deploying any cloud application to any cloud.  ","version":null,"tagName":"h3"},{"title":"3. A Redesigned Website​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#3-a-redesigned-website","content":" We've refreshed our website with a sleek, intuitive design and a modern user experience to better showcase Defang's capabilities.  ","version":null,"tagName":"h3"},{"title":"Rolling Out the Refresh​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#rolling-out-the-refresh","content":" Starting today, you'll see these updates across our Defang.io homepage and social media platforms (Twitter, LinkedIn, Discord, BlueSky). In the coming days, we'll extend this refresh across all our digital assets.  ","version":null,"tagName":"h2"},{"title":"We'd Love Your Feedback!​","type":1,"pageTitle":"Introducing Defang's New Look: Website & Logo Refresh","url":"/blog/2025/03/12/website-logo-refresh-announcement#wed-love-your-feedback","content":" Check out the new look and let us know what you think! And if you haven't, please join us on Discord and follow us on social media. ","version":null,"tagName":"h2"},{"title":"February 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025/03/15/feb-product-updates","content":"Well, that went by quick! Seems like it was just a couple of weeks ago that we published the Jan update, and it’s already time for the next one. Still, we do have some exciting progress to report in this short month! Pulumi Provider: We are excited to announce a Preview of the Defang Pulumi Provider. With the Defang Pulumi Provider, you can leverage all the power of Defang with all of the extensibility of Pulumi. Defang will provision infrastructure to deploy your application straight from your Compose file, while allowing you to connect that deployment with other resources you deploy to your cloud account. The new provider makes it easy to leverage Defang if you’re already using Pulumi, and it also provides an upgrade-path for users who need more configurability than the Compose specification can provide.Portal Update: We are now fully deploying our portal with Defang alone using the defang compose up command. Our original portal architecture was designed before we supported managed storage so we used to use Pulumi to provision and connect external storage. But since we added support in Compose to specify managed storage, we can fully describe our Portal using Compose alone. This has allowed us to rip out hundreds of lines of code and heavily simplify our deployments. To learn more about how we do this, check out our Defang-Deployed-with-Defang (Part 1) blog.Open-Auth Contribution: In the past couple months we have been communicating with the OpenAuth maintainers and contributors via PRs (#120, #156) and Issues (#127) to enable features like local testing with DynamoDB, enabling support for scopes, improving standards alignment, supporting Redis, and more. We are rebuilding our authentication systems around OpenAuth and are excited about the future of the project. Events and Social Media February was an exciting month for the Defang team as we continued to engage with the developer community and showcase what’s possible with Defang. We sponsored and demo’ed at the DevTools Vancouver meetup, as well as sponsored the Vancouver.dev IRL: Building AI Startups event. Also, at the AWS Startup Innovation Showcase in Vancouver, our CTO Lio demonstrated how Defang makes it effortless to deploy secure, scalable, and cost-efficient serverless apps on AWS! And finally, we had a great response to our LinkedIn post on the Model Context Protocol, catching the attention of many observers, including some of our key partners. We are eager to see what you deploy with Defang. Join our Discord to ask any questions, see what others are building, and share your own experience with Defang. And stay tuned for more to come in March!","keywords":"","version":null},{"title":"Deploying Defang with Defang: Part 1","type":0,"sectionRef":"#","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1","content":"","keywords":"","version":null},{"title":"The Initial Setup: A More Complex Deployment​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#the-initial-setup-a-more-complex-deployment","content":" The Portal isn’t a simple static website; it’s a full-stack application with the following services:  Next.js frontend – Including server components and server actions.Hasura (GraphQL API) – Serves as a GraphQL layer.Hono (TypeScript API) – Lightweight API for custom business logic.OpenAuth (Authentication Service) – Manages authentication flows.Redis – Used for caching and session storage.Postgres – The main database.  Initially, we provisioned databases and some DNS configurations using Infra-as-Code because Defang couldn’t yet manage them for us. We also deployed the services themselves manually through infrastructure-as-code, requiring us to define each service separately.  This worked, but seemed unnecessarily complex, if we had the right tooling…    ","version":null,"tagName":"h2"},{"title":"The Transition: Expanding Defang to Reduce Complexity​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#the-transition-expanding-defang-to-reduce-complexity","content":" We’ve made it a priority to expand Defang’s capabilities a lot over the last year so it could take on more of the heavy lifting of a more complex application. Over the past year, we’ve added loads of features to handle things like:  Provisioning databases, including managing passwords and other secrets securelyConfig interpolation using values stored in AWS SSM, ensuring the same Compose file works both locally and in the cloudProvisioning certs and managing DNS records from configuration in the Compose file.  As a result, we reached a point where we no longer needed custom infrastructure definitions for most of our deployment.  ","version":null,"tagName":"h2"},{"title":"What Changed?​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#what-changed","content":" Previously: GitHub Actions ran infra-as-code scripts to provision databases, manage DNS, and define services separately from the Docker Compose file we used for local devNow: Our Defang GitHub Action targets normal Compose files and deploys everything, using secrets and variables managed in GitHub Actions environments.Result: We eliminated hundreds of lines of Infra-as-Code, making our deployment leaner and easier to manage and reducing the differences between running the Portal locally and running it in the cloud.  This wasn’t just about reducing complexity—it was also a validation exercise. We knew that Defang had evolved enough to take over much of our deployment, but by going through the transition process ourselves, we could identify and close the remaining gaps and make sure our users could really make use of Defang for complex production-ready apps.    ","version":null,"tagName":"h2"},{"title":"How Deployment Works Today​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#how-deployment-works-today","content":" ","version":null,"tagName":"h2"},{"title":"Config & Secrets Management​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#config--secrets-management","content":" Sensitive configuration values (database credentials, API keys) are stored securely in AWS SSM using Defang’s configuration management tooling.Environment variable interpolation allows these SSM-stored config values to be referenced directly in the Compose file, ensuring the same configuration works in local and cloud environments.Defang provisions managed Postgres and Redis instances automatically when using the x-defang-postgres and x-defang-redis extensions, securely injecting credentials where needed with variable interpolation.  ","version":null,"tagName":"h3"},{"title":"Deployment Modes​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#deployment-modes","content":" Deployment modes (affordable, balanced, high_availability) adjust infrastructure settings across our dev/staging/prod deployments making sure dev is low cost, and production is secure and resilient.  ","version":null,"tagName":"h3"},{"title":"DNS & Certs​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#dns--certs","content":" When we first set up the portal (before we even released the private beta) DNS and certs had to be managed outside the Defang context. Now, we can provision certs using ACM or Let’s Encrypt.  ","version":null,"tagName":"h3"},{"title":"CI/CD Integration​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#cicd-integration","content":" Previously: GitHub Actions ran custom infra-as-code scripts.Now: The Defang GitHub Action installs Defang automatically and runs defang compose up, simplifying deployment.Result: A streamlined, repeatable CI/CD pipeline.    ","version":null,"tagName":"h3"},{"title":"The Takeaway: Why This Matters​","type":1,"pageTitle":"Deploying Defang with Defang: Part 1","url":"/blog/2025/03/14/deploying-defang-with-defang-part-1#the-takeaway-why-this-matters","content":" By transitioning to fully Compose-based deployments, we:  ✅ Eliminated hundreds of lines of Infra-as-Code✅ Simplified configuration management with secure, environment-aware secrets handling✅ Streamlined CI/CD with a lightweight GitHub Actions workflow✅ Simplified DNS and cert management  Every sample project we built, every conversation we had with developers, and every challenge we encountered with the Portal helped us get to this point where we could focus on closing the gaps last few gaps to deploying everything from a Compose file. ","version":null,"tagName":"h2"},{"title":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","type":0,"sectionRef":"#","url":"/blog/2025/02/18/model-context-protocol","content":"","keywords":"","version":null},{"title":"Sample Model Context Protocol Time Chatbot Application​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#sample-model-context-protocol-time-chatbot-application","content":" Using Docker’s mcp/time image and Anthropic Claude, we made a chatbot application that can access time-based resources directly on the user’s local machine and answer time-based questions.  The application is containerized using Docker, enabling a convenient and easy way to get it running locally. We will later demonstrate how we deployed it to the cloud using Defang.  Let’s go over the structure of the application in a local environment.    ","version":null,"tagName":"h2"},{"title":"General Overview​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#general-overview","content":" There are two containerized services, Service 1 and Service 2, that sit on the local machine. Service 1 contains a custom-built web server that interacts with an MCP Client.Service 2 contains an MCP Server from Docker as a base image for the container, and a custom-built MCP Client we created for interacting with the MCP Server. We have a browser on our local machine, which interacts with the web server in Service 1.The MCP Server in Service 2 is able to access tools from either a cloud or on our local machine. This configuration is included as a part of the Docker MCP image.The MCP Client in Service 2 interacts with the Anthropic API and the web server.  ","version":null,"tagName":"h3"},{"title":"Architecture​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#architecture","content":" Service 1: Web Server  Service 1 contains a web server and the UI for a chat application (not shown in the diagram), written in Next.js. The chat UI updates based on user-entered queries and chatbot responses. A POST request is sent to Service 1 every time a user enters a query from the browser. In the web server, a Next.js server action function is used to forward the user queries to the endpoint URL of Service 2 to be processed by the MCP Client.  Service 2: MCP Service Configuration  The original Docker mcp/time image is not designed with the intent of being deployed to the cloud - it is created for a seamless experience with Claude Desktop. To achieve cloud deployment, an HTTP layer is needed in front of the MCP Server. To address this, we've bundled an MCP Client together with the Server into one container. The MCP Client provides the HTTP interface and communicates with the MCP Server via standard input/output (stdio).  MCP Client  The MCP Client is written in Python, and runs in a virtual environment (/app/.venv/bin) to accommodate specific package dependencies. The MCP Client is instantiated in a Quart app, where it connects to the MCP Server and handles POST requests from the web server in Service 1. Additionally, the MCP Client connects to the Anthropic API to request LLM responses.  MCP Server and Tools (from the Docker Image)  The MCP Server enables access to tools from an external source, whether it be from a cloud or from the local machine. This configuration is included as a part of the Docker MCP image. The tools can be accessed indirectly by the MCP Client through the MCP Server. The Docker image is used as a base image for Service 2, and the MCP Client is built in the same container as the MCP Server. Note that the MCP Server also runs in a virtual environment (/app/.venv/bin).  Anthropic API  The MCP Client connects to the Anthropic API to request responses from a Claude model. Two requests are sent to Claude for each query. The first request will send the query contents and a list of tools available, and let Claude respond with a selection of the tools needed to craft a response. The MCP Client will then call the tools indirectly through the MCP Server. Once the tool results come back to the Client, a second request is sent to Claude with the query contents and tool results to craft the final response.  ","version":null,"tagName":"h3"},{"title":"Setting Up Dockerfiles​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#setting-up-dockerfiles","content":" Service 1: Web Server - Dockerfile  The base image for Service 1 is the node:bookworm-slim image. We construct the image by copying the server code and setting an entry point command to start the web server.  Service 2: MCP Service Configuration - Dockerfile  The base image for Service 2 is the Docker mcp/time image. Since both the MCP Client and Server run in a virtual environment, we activate a venv command in the Dockerfile for Service 2 and create a run.sh shell script that runs the file containing the MCP Client and Server connection code. We then add the shell script as an entry point command for the container.  ","version":null,"tagName":"h3"},{"title":"Compose File​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#compose-file","content":" To define Services 1 and 2 as Docker containers, we’ve written a compose.yaml file in the root directory, as shown below.  services: service-1: # Web Server and UI build: context: ./service-1 dockerfile: Dockerfile ports: - target: 3000 published: 3000 mode: ingress deploy: resources: reservations: memory: 256M environment: - MCP_SERVICE_URL=http://service-2:8000 healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;] service-2: # MCP Service (MCP Client and Server) build: context: ./service-2 dockerfile: Dockerfile ports: - target: 8000 published: 8000 mode: host environment: - ANTHROPIC_API_KEY   ","version":null,"tagName":"h3"},{"title":"Testing and Running on Local Machine​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#testing-and-running-on-local-machine","content":" Now that we’ve defined our application in Docker containers using a compose.yaml file, we can test and run it on our local machine by running the command:  docker compose up --build   Once the application is started up, it can be easily tested in a local environment. However, to make it easily accessible to others online, we should deploy it to the cloud. Fortunately, deploying the application is a straightforward process using Defang, particularly since the application is Compose-compatible.  ","version":null,"tagName":"h3"},{"title":"Deploying to the Cloud​","type":1,"pageTitle":"Simplifying Deployment of AI Apps to the Cloud using Docker and Model Context Protocol","url":"/blog/2025/02/18/model-context-protocol#deploying-to-the-cloud","content":" Let’s go over the structure of the application after cloud deployment.    Here we can see what changes if we deploy to the cloud:  Service 1 and Service 2 are now deployed to the cloud, not on the local machine anymore.The only part on the local machine is the browser.  Using the same compose.yaml file as shown earlier, we can deploy the containers to the cloud with the Defang CLI. Once we’ve authenticated and logged in, we can choose a cloud provider (i.e. AWS, GCP, or DigitalOcean) and use our own cloud account for deployment. Then, we can set a configuration variable for the Anthropic API key:  defang config set ANTHROPIC_API=&lt;your-api-key-value&gt;   Then, we can run the command:  defang compose up   Now, the MCP time chatbot application will be up and running in the cloud. This means that anyone can access the application online and try it for themselves!  For our case, anyone can use the chatbot to ask for the exact time or convert time zones from their machine, regardless of where they are located.    Most importantly, this chatbot application can be adapted to use any of the other Docker reference MCP Server images, not just the mcp/time server.  Have fun building and deploying MCP-based containerized applications to the cloud with Defang! ","version":null,"tagName":"h3"},{"title":"Deploying Defang with Defang: Part 2","type":0,"sectionRef":"#","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2","content":"","keywords":"","version":null},{"title":"From S3 + CloudFront to Dynamic, Containerized Deployments​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#from-s3--cloudfront-to-dynamic-containerized-deployments","content":" Our original site was a Next.js app using static exports deployed via S3 and fronted by CloudFront. That setup worked for a while—it was fast and simple. But with our brand refresh, we added pages and components where it made sense to use (and test for other developers) some Next.js features that we couldn't use with the static export:  React Server ComponentsServer ActionsISR  That meant static hosting wouldn't cut it. So we decided to run the site as an app in a container.  That being said, our learnings from the previous setup are being used to develop the capabilities of Defang. We're using the experience to make sure that Defang can handle the deployment of static sites as well as dynamic ones. We'll keep you updated when that's ready.    ","version":null,"tagName":"h2"},{"title":"Deploying with Defang (and Why It Was Easy)​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#deploying-with-defang-and-why-it-was-easy","content":" We already deploy our other services with Defang using Compose files. In fact, the static website actually already used a Dockerfile and Compose file to manage the build process. So we just had to make some minor changes to the Compose file to take into account new environment variables for features we're adding and make a few small changes to the Dockerfile to handle the new build process.  Some things we had to change:  Adding ports to the Compose file:   ports: - mode: ingress target: 3000 published: 3000   Adding domain info the Composer file:   domainname: defang.io networks: default: aliases: - www.defang.io   One other hiccup was that we used to do www to non-www redirects using S3. There are a few ways to switch that up, but for the time being we decided to use Next.js middleware.  Pretty soon after that, the site was up and running in an AWS account—with TLS, DNS, and both the www and root domains automatically configured. Pretty straightfoward!    ","version":null,"tagName":"h2"},{"title":"Real-World Lessons That Are Shaping Defang​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#real-world-lessons-that-are-shaping-defang","content":" Deploying the website wasn't just a checkbox—it helped surface real-world pain points and ideas for improvement.  ","version":null,"tagName":"h2"},{"title":"1. Static Assets Still Need CDNs​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#1-static-assets-still-need-cdns","content":" Even though the site is dynamic now, we still want assets like /_next/static to load quickly from a CDN. This made it clear that CDN support—like CloudFront integration—should be easier to configure in Defang. That’s now on our roadmap. That's also going to be useful for other frameworks that use similar asset paths, like Django.  ","version":null,"tagName":"h3"},{"title":"2. Next.js Env Vars Can Be Tricky in Containers​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#2-nextjs-env-vars-can-be-tricky-in-containers","content":" Next.js splits env vars between build-time and runtime, and the rules aren’t always obvious. Some need to be passed as build args, and others as runtime envs. That made us think harder about how Defang could help clarify or streamline this for developers—even if we can’t change that aspect of Next.js itself.  ","version":null,"tagName":"h3"},{"title":"3. Redirects and Rewrites​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#3-redirects-and-rewrites","content":" We had to add a middleware to handle www to non-www redirects. This is a common need, so we're keeping an eye on how we can make this easier to deal with in Defang projects.  These are the kinds of things we only notice by using Defang on real-world projects.    ","version":null,"tagName":"h3"},{"title":"The Takeaway​","type":1,"pageTitle":"Deploying Defang with Defang: Part 2","url":"/blog/2025/03/26/deploying-defang-with-defang-part-2#the-takeaway","content":" Our site now runs like the rest of our infrastructure:  Fully containerizedDeployed to our own AWS accountManaged with a Compose fileDeployed with Defang  Stay tuned for the next post in the series—because this is just one piece of the puzzle. ","version":null,"tagName":"h2"},{"title":"March 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025/04/11/mar-product-updates","content":"","keywords":"","version":null},{"title":"Events and Programs​","type":1,"pageTitle":"March 2025 Defang Compose Update","url":"/blog/2025/04/11/mar-product-updates#events-and-programs","content":" In March, we had an incredible evening at the AWS Gen AI Loft in San Francisco! Our CTO and Co-founder Lionello Lunesu demoed how Defang makes deploying secure, scalable, production-ready containerized applications on AWS effortless. Check out the demo here!  We also kicked off the Defang Campus Advocate Program, bringing together advocates from around the world. After launching the program in February, it was amazing to see the energy and momentum already building on campuses world-wide. Just as one example, check out this post from one of the students who attended a session hosted by our Campus Advocate Swapnendu Banerjee and then went on to deploy his project with Defang. This is what we live for!  We wrapped up the month with our monthly Coffee Chat, featuring the latest Defang updates, live demos, and a conversation on vibe coding. Thanks to everyone who joined. The next one is on April 30. Save your spot here.  As always, we appreciate your feedback and are committed to making Defang even better. Deploy any app to any cloud with a single command. Go build something awesome! ","version":null,"tagName":"h3"},{"title":"Deploying a Django App with Real-time Moderation Using Defang","type":0,"sectionRef":"#","url":"/blog/2025/04/10/easiest-way-to-deploy-django","content":"","keywords":"","version":null},{"title":"Clone the repo​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#clone-the-repo","content":" Before we get started, you'll want to clone the repo with the app code, here.  ","version":null,"tagName":"h2"},{"title":"Overview of Our Django Application​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#overview-of-our-django-application","content":" We're deploying a real-time chat application that includes automatic moderation powered by a background worker using the Natural Language Toolkit (NLTK). The application structure includes:  Web Service: Django app with chat functionality using Django Channels for real-time interactions.Worker Service: Background tasks processing messages for profanity and sentiment analysis.Postgres Database: Managed database instance for persistent storage.Redis Broker: Managed Redis instance serving as the broker for Celery tasks and Django Channels.  ","version":null,"tagName":"h2"},{"title":"Running Locally​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#running-locally","content":" To run the app locally, we use Docker Compose, splitting configurations into two YAML files:  compose.yaml: Production configuration.compose.dev.yaml: Development overrides extending production.  You can quickly spin up the application locally with:  docker compose --env-file .env.dev -f compose.dev.yaml up --build   This runs things with autoreloading so you can iterate on the Django app, all while passing environment variables in the same way as we will with Defang's secure configuration system and being ready to deploy to production.  ","version":null,"tagName":"h2"},{"title":"Application Features​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#application-features","content":" ","version":null,"tagName":"h2"},{"title":"Real-time Chat​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#real-time-chat","content":" Using Django Channels and Redis, users can engage in real-time conversations within chat rooms.  ","version":null,"tagName":"h3"},{"title":"Background Moderation Tasks​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#background-moderation-tasks","content":" The worker service runs independently, handling moderation tasks asynchronously. It uses NLTK to:  Check for profanity.Perform sentiment analysis.Automatically flag negative or inappropriate messages.  This decouples resource-intensive tasks from the main API server, ensuring optimal application responsiveness. The demo isn't doing anything very complicated, but you could easily run machine learning models with access to GPUs with Defang if you needed to.  ","version":null,"tagName":"h3"},{"title":"Django Admin​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#django-admin","content":" The Django admin is setup to quickly visualize messages and their moderation status. Access it at /admin with your superuser credentials: username admin and password admin setup by default when you first run or deploy.  ","version":null,"tagName":"h3"},{"title":"Deploying with Defang​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#deploying-with-defang","content":" Deploying multi-service applications to cloud providers traditionally involves complex infrastructure setup, including configuring ECS clusters, security groups, networking, and more. Defang simplifies this significantly.  ","version":null,"tagName":"h2"},{"title":"Deploying to Defang Playground​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#deploying-to-defang-playground","content":" The Defang Playground lets you quickly preview your deployed app in a managed environment.  Secure Configuration  Before deploying, securely set encrypted sensitive values:  defang config set DJANGO_SECRET_KEY defang config set POSTGRES_PASSWORD   Then run the deployment command:  defang compose up   Defang automatically:  Builds Docker containers.Sets up required services.Manages networking and provisioning.  Once deployed, your app is accessible via a public URL provided by Defang, which you can find in the CLI output or in our portal at https://portal.defang.io  ","version":null,"tagName":"h3"},{"title":"Deploying to Your Own Cloud​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#deploying-to-your-own-cloud","content":" To deploy directly into your AWS account (or other supported providers):  Set your cloud provider:  In my case, I use an AWS Profile, but you should be able to use any methods supported by the AWS CLI  export DEFANG_PROVIDER=AWS export AWS_PROFILE=your-profile-name   Secure Configuration  Before deploying, securely set encrypted sensitive values in your cloud account:  defang config set DJANGO_SECRET_KEY defang config set POSTGRES_PASSWORD   Deploy:  defang compose up   Defang handles provisioning managed services (RDS for Postgres, ElastiCache for Redis), container builds, and networking setup. Note: Initial provisioning for managed data stores might take a few minutes.  ","version":null,"tagName":"h3"},{"title":"Cloud Deployment Results​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#cloud-deployment-results","content":" Post-deployment, your Django app infrastructure includes (among other things):  Managed Postgres: AWS RDS instance.Managed Redis: AWS ElastiCache instance.Containers: ECS services with load balancers and DNS configured.  ","version":null,"tagName":"h2"},{"title":"Why Use Defang?​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#why-use-defang","content":" Defang simplifies complex cloud deployments by:  Automatically provisioning managed cloud resources.Securely handling sensitive configurations.Providing seamless container orchestration without manual infrastructure setup.  ","version":null,"tagName":"h2"},{"title":"Try It Yourself​","type":1,"pageTitle":"Deploying a Django App with Real-time Moderation Using Defang","url":"/blog/2025/04/10/easiest-way-to-deploy-django#try-it-yourself","content":" Explore deploying your Django applications effortlessly with Defang. The full source code for this example is available on GitHub. Feel free to give it a try, and let us know how it goes!  Happy deploying! ","version":null,"tagName":"h2"},{"title":"Welcome to the world of \"Vibe Deploy\": Easily Deploying your Vibe Coding Projects to the Cloud with Defang","type":0,"sectionRef":"#","url":"/blog/2025/04/23/vibe-deploy","content":"&quot;I'm building a project, but it's not really coding. I just see stuff, say stuff, run stuff, and copy-paste stuff. And it mostly works.&quot; – Andrej Karpathy Welcome to the world of vibe coding, an AI-assisted, intuition-driven way of building software. You do not spend hours reading diffs, organizing files, or hunting through documentation. You describe what you want, let the AI take a pass, and keep iterating until it works. The Tools of Vibe Coding Vibe coding would not exist without a new generation of AI-first tools. Here are some of the platforms powering this new workflow. CursorWindsurfVS Code / VS Code InsidersClaude Desktop While each has it's own strengths and weaknesses, they all support the basic vibe coding workflow described above. Using Defang for &quot;Vibe Deployment&quot; Once your app runs locally with these vibe coding tools, the next question is: how do you get it live in the cloud so you can share it with the world? That is where Defang comes in. Defang takes your app, as specified in your docker-compose.yml, and deploys it to the public cloud (AWS, GCP, or DigitalOcean) or the Defang Playground with a single command. It is already used by thousands of developers around the world to deploy their projects to the cloud. And now with the Defang MCP Server, you can &quot;vibe deploy&quot; your project right from your favorite IDE! Once you have the Defang MCP Server installed (see instructions here), just type in &quot;deploy&quot; (or any variation thereof) in the chat, it's that simple! It is built for hobbyists, vibe coders, fast-moving teams, and AI-powered workflows. Currently, we support deployment to the Defang Playground only, but we'll be adding deployment to public cloud soon. How it works: The Defang MCP Server connects your coding editor (like VS Code or Cursor) with Defang's cloud tools, so you can ask your AI assistant to deploy your project just by typing a prompt. While natural language commands are by nature imprecise, the AI in your IDE translates that natural language prompt to a precise Defang command needed to deploy your application to the cloud. And your application also has a formal definition - the compose.yaml file - either something you wrote or the AI generated for you. So, the combination of a formal compose.yaml with a precise Defang command means that the resulting deployment is 100% deterministic and reliable. So the Defang MCP Server gives you the best of both worlds - the ease of use and convenience of natural language interaction with the AI, combined with the predictability and reliability of a deterministic deployment. We are so excited to make Defang even more easy to use and accessible now to vibe coders. Give it a try and let us know what you think on our Discord!","keywords":"","version":null},{"title":"Sample: Starter Kit for RAG + Agents with CrewAI","type":0,"sectionRef":"#","url":"/blog/2025/06/16/crew-ai-sample","content":"","keywords":"","version":null},{"title":"Why Build a Starter Kit for RAG + Agents?​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#why-build-a-starter-kit-for-rag--agents","content":" Let’s be honest: every developer who’s played with LLMs gets that rush of “wow” from the first working demo. But the real headaches show up when you need to stitch LLMs into something production-grade: an app that can pull in real data, coordinate multi-step logic, and more. Suddenly, you’re not just writing single prompts. You’re coordinating between multiple prompts, managing queues, adding vector databases, orchestrating workers, and trying to get things back to the user in real-time. We've found that CrewAI (coordinating prompts, agents, tools) + Django (building an api, managing data), with a bit of Celery (orchestrating workers/async tasks), is a really nice set of tools for this. We're also going to use Django Channels (real-time updates) to push updates back to the user. And of course, we'll use Defang to deploy all that to the cloud.  If this sounds familiar (or if you're dreading the prospect of dealing with it), you’re the target audience for this sample. Instead of slogging through weeks of configuration and permissions hell, you get a ready-made template that runs on your laptop, then scales—unchanged—to Defang’s Playground, and finally to your own AWS or GCP account. All the gnarly infra is abstracted, so you can focus on getting as much value as possible out of that magical combo of CrewAI and Django.  Just want the sample? You can find it here.  ","version":null,"tagName":"h2"},{"title":"A Demo in 60 Seconds​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#a-demo-in-60-seconds","content":" Imagine you're building a system. It might use multiple LLM calls. It might do complex, branching logic in its prompts. It might need to store embeddings to retrieve things in the future, either to pull them into a prompt, or to return them outright. It might need to store other records that don't have embeddings. Here's a very lightweight version of a system like that, as a starting point:    ","version":null,"tagName":"h2"},{"title":"Architecture at a Glance​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#architecture-at-a-glance","content":" Behind the scenes, the workflow is clean and powerful. The browser connects via WebSockets to our app using Django Channels. Heavy work is pushed to a Celery worker. That worker generates an embedding, checks Postgres with pgvector for a match, and either returns the summary or, if there’s no hit, fires up a CrewAI agent to generate one. Every update streams back through Redis and Django Channels so users get progress in real time.    Durable state lives in Postgres and Redis. Model services (LLMs and embeddings) are fully swappable, so you can upgrade to different models in the cloud or localize with the Docker Model Runner without rewriting the full stack.  ","version":null,"tagName":"h2"},{"title":"Under the Hood: The Services​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#under-the-hood-the-services","content":" ","version":null,"tagName":"h2"},{"title":"Django + Channels​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#django--channels","content":" The Django app is the front door, routing HTTP and WebSocket traffic, serving up the admin, and delivering static content. It’s built on Daphne and Django Channels, with Redis as the channel layer for real-time group events. Django’s admin is your friend here: to start you can check what summaries exist, but if you start building out your own app, it'll make it a breeze to debug and manage your system.  ","version":null,"tagName":"h3"},{"title":"PostgreSQL + pgvector​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#postgresql--pgvector","content":" This is where your data lives. Summaries and their 1024-dimension embeddings go here. A simple SQL query checks for close matches by cosine distance, and pgvector’s index keeps search blazing fast. In BYOC (bring-your-own-cloud) mode, flip a single flag and Defang provisions you a production-grade RDS instance.  ","version":null,"tagName":"h3"},{"title":"Redis​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#redis","content":" Redis is doing triple duty: as the message broker and result backend for Celery, and as the channel layer for real-time WebSocket updates. The pub/sub system lets a single worker update all browser tabs listening to the same group. And if you want to scale up, swap a flag and Defang will run managed ElastiCache in production. No code change required.  ","version":null,"tagName":"h3"},{"title":"Celery Worker​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#celery-worker","content":" The Celery worker is where the magic happens. It takes requests off the queue, generates embeddings, checks for similar summaries, and—if necessary—invokes a CrewAI agent to get a new summary. It then persists summaries and pushes progress updates back to the user.  ","version":null,"tagName":"h3"},{"title":"LLM and Embedding Services​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#llm-and-embedding-services","content":" Thanks to Docker Model Runner, the LLM and embedding services run as containerized, OpenAI-compatible HTTP endpoints. Want to switch to a different model? Change a single line in your compose file. Environment variables like LLM_URL and EMBEDDING_MODEL are injected for you—no secret sharing or hard-coding required.  ","version":null,"tagName":"h3"},{"title":"CrewAI Workflows​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#crewai-workflows","content":" With CrewAI, your agent logic is declarative and pluggable. This sample keeps it simple—a single summarization agent—but you can add classification, tool-calling, or chain-of-thought logic without rewriting your task runner.  ","version":null,"tagName":"h3"},{"title":"How the Compose Files Work​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#how-the-compose-files-work","content":" In local dev, your compose.local.yaml spins up Gemma and Mixedbread models, running fully locally and with no cloud credentials or API keys required. URLs for service-to-service communication are injected at runtime. When you’re ready to deploy, swap in the main compose.yaml which adds Defang’s x-defang-llm, x-defang-redis, and x-defang-postgres flags. Now, Defang maps your Compose intent to real infrastructure—managed model endpoints, Redis, and Postgres—on cloud providers like AWS or GCP. It handles all networking, secrets, and service discovery for you. There’s no YAML rewriting or “dev vs prod” drift.  ","version":null,"tagName":"h2"},{"title":"The Three-Step Deployment Journey​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#the-three-step-deployment-journey","content":" You can run everything on your laptop with a single docker compose -f ./compose.local.yaml up command—no cloud dependencies, fast iteration, and no risk of cloud charges. When you’re ready for the next step, use defang compose up to push to the Defang Playground. This free hosted sandbox is perfect for trying Defang, demos, or prototyping. It automatically adds TLS to your endpoints and sleeps after a week. For production, use your own AWS or GCP account. DEFANG_PROVIDER=aws defang compose up maps each service to a managed equivalent (ECS, RDS, ElastiCache, Bedrock models), wires up secrets, networking, etc. Your infra. Your data.  ","version":null,"tagName":"h2"},{"title":"Some Best Practices and Design Choices​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#some-best-practices-and-design-choices","content":" This sample uses vector similarity to try and fetch summaries that are semantically similar to the input. For more robust results, you might want to embed the original input. You can also think about chunking up longer content for finer-grained matches that you can integrate in your CrewAI workflows. Real-time progress via Django Channels beats HTTP polling, especially for LLM tasks that can take a while. The app service is stateless, which means you can scale it horizontally just by adding more containers which is easy to specify in your compose file.  ","version":null,"tagName":"h2"},{"title":"Going Further: Extending the Sample​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#going-further-extending-the-sample","content":" You’re not limited to a single summarization agent. CrewAI makes it trivial to add multi-agent flows (classification, tool use, knowledge retrieval). For big docs, chunk-level embeddings allow granular retrieval. You can wire in tool-calling to connect with external APIs or databases. You can integrate more deeply with Django's ORM and the PGVector tooling that we demo'd in the sample to build more complex agents that actually use RAG.  ","version":null,"tagName":"h2"},{"title":"Ready to Build?​","type":1,"pageTitle":"Sample: Starter Kit for RAG + Agents with CrewAI","url":"/blog/2025/06/16/crew-ai-sample#ready-to-build","content":" With this sample, you’ve got an agent-ready, RAG-ready backend that runs anywhere, with no stacks of YAML or vendor lock-in. Fork it, extend it, productionize it: scale up, add more agents, or swap in different models, or more models!  Quickstart:  # Local docker compose -f compose.local.yaml up --build # Playground defang compose up # BYOC # Setup credentials and then swap &lt;provider&gt; with aws or gcp DEFANG_PROVIDER=&lt;provider&gt; defang compose up   Want more? File an issue to request a sample—we'll do everything we can to help you deploy better and faster! ","version":null,"tagName":"h2"},{"title":"April 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025/05/09/april-product-updates","content":"","keywords":"","version":null},{"title":"MCP + Vibe Deploying​","type":1,"pageTitle":"April 2025 Defang Compose Update","url":"/blog/2025/05/09/april-product-updates#mcp--vibe-deploying","content":" This month we focused on making cloud deployments as easy as writing a prompt. Our latest Vibe Deploying blog shows how you can launch full-stack apps right from your IDE just by chatting.  Whether you're working in Cursor, Windsurf, VS Code, or Claude, Defang's MCP integration lets you deploy to the cloud just as easily as conversing with the AI to generate your app. For more details, check out the docs for the Defang Model Context Protocol Server – it explains how it works, how to use it, and why it's a game changer for deploying to the cloud. You can also watch our tutorials for Cursor, Windsurf, and VS Code.  ","version":null,"tagName":"h2"},{"title":"Managed LLMs​","type":1,"pageTitle":"April 2025 Defang Compose Update","url":"/blog/2025/05/09/april-product-updates#managed-llms","content":" Last month we shipped the x-defang-llm compose service extension to easily deploy inferencing apps that use managed LLM services such as AWS Bedrock. This month, we're excited to announce the same support for GCP Vertex AI – give it a try and let us know your feedback!  ","version":null,"tagName":"h2"},{"title":"Events and Programs​","type":1,"pageTitle":"April 2025 Defang Compose Update","url":"/blog/2025/05/09/april-product-updates#events-and-programs","content":" On April 28, we kicked things off with an epic night of demos, dev energy, and cloud magic at RAG &amp; AI in Action. Our own Kevin Vo showed how fast and easy it is to deploy AI apps from Windsurf to the cloud using just the Defang MCP. The crowd got a front-row look at how Vibe Deploying turns cloud infra into a background detail.  We finished the month with our signature Defang Coffee Chat, a casual hangout with product updates, live Q&amp;A, and great conversations with our community. Our Campus Advocates also hosted workshops around the world, bringing Defang to new students and builders.  We wrapped up the month with our latest Defang Coffee Chat, featuring live demos, product updates, and a solid conversation around vibe deploying. Thanks to everyone who joined.  The next one is on May 21 at 10 AM PST. Save your spot here.  ","version":null,"tagName":"h2"},{"title":"Looking Ahead​","type":1,"pageTitle":"April 2025 Defang Compose Update","url":"/blog/2025/05/09/april-product-updates#looking-ahead","content":" Here's what's coming in May:  Web Summit Vancouver – Defang will be a startup sponsor, please come see us on the expo floor.More MCP tutorials and dev tools.  Let's keep building. 🚀 ","version":null,"tagName":"h2"},{"title":"May 2025 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2025/06/06/may-product-updates","content":"","keywords":"","version":null},{"title":"🚀 Managed LLMs in Playground​","type":1,"pageTitle":"May 2025 Defang Compose Update","url":"/blog/2025/06/06/may-product-updates#-managed-llms-in-playground","content":" You can now try managed LLMs directly in the Defang Playground. Defang makes it easy to use cloud-native language models across providers — and now you can test them instantly in the Playground.  Managed LLM supportPlayground-readyAvailable in CLI v1.1.22 or higher  To use managed language models in your own Defang services, just add x-defang-llm: true — Defang will configure the appropriate roles and permissions for you.  Already built on the OpenAI API? No need to rewrite anything.  With Defang's OpenAI Access Gateway, you can run your existing apps on Claude, DeepSeek, Mistral, and more — using the same OpenAI format.  Learn more here.  Try it out here.  ","version":null,"tagName":"h2"},{"title":"📦 MongoDB Preview on AWS​","type":1,"pageTitle":"May 2025 Defang Compose Update","url":"/blog/2025/06/06/may-product-updates#-mongodb-preview-on-aws","content":" Last month, we added support for MongoDB-compatible workloads on AWS via Amazon DocumentDB.  Just add this to your compose.yaml:  services: db: x-defang-mongodb: true   Once you add x-defang-mongodb: true, Defang will auto-spin a DocumentDB cluster in your AWS — no setup needed.  ","version":null,"tagName":"h2"},{"title":"🛠 MCP Server Improvements​","type":1,"pageTitle":"May 2025 Defang Compose Update","url":"/blog/2025/06/06/may-product-updates#-mcp-server-improvements","content":" We've made the MCP Server and CLI easier to use and deploy:  Users are now prompted to agree to Terms of Service via the portal loginMCP Server and CLI are now containerized, enabling faster setup, smoother deployments, and better portability across environments  ","version":null,"tagName":"h2"},{"title":"🌎 Events and Community​","type":1,"pageTitle":"May 2025 Defang Compose Update","url":"/blog/2025/06/06/may-product-updates#-events-and-community","content":" We kicked off the month by sponsoring Vancouver's first Vibe Coding IRL Sprint. Jordan Stephens from Defang ran a hands-on workshop on &quot;Ship AI Faster with Vertex AI&quot; with GDG Vancouver (GDG Vancouver). Around the same time, our CTO and Co-founder Lio joined the GenAI Founders Fireside panel hosted by AInBC and AWS.  Big moment for the team — we won the Best Canadian Cloud Award at the Vancouver Cloud Summit. Right after, we hit the expo floor at Web Summit Vancouver as part of the BETA startup program and got featured by FoundersBeta as one of the Top 16 Startups to Watch.  Our Campus Advocates also kept the momentum going, hosting Defang events around the world with live demos and workshops.  Last month's Defang Coffee Chat brought together the community for product updates, live demos, and a great convo on vibe deploying.  We're back again on June 25 at 10 AM PST. Save your spot here.  We can't wait to see what you deploy with Defang. Join our Discord to ask questions, get support, and share your builds.  More coming in June. ","version":null,"tagName":"h2"},{"title":"Bridging Local Development and Cloud Deployment","type":0,"sectionRef":"#","url":"/blog/2025/06/16/docker-compose-defang","content":"Introducing Our New Whitepaper: Bridging Local Development and Cloud Deployment with Docker Compose and Defang We’re excited to announce the release of our new whitepaper, &quot;Bridging Local Development and Cloud Deployment with Docker Compose and Defang.&quot; Want to skip the blog? Read the full whitepaper here. Modern software development moves fast, but deploying to the cloud often remains a complex hurdle. Docker Compose revolutionized local development by providing a simple way to define multi-service apps, but translating that simplicity into cloud deployment has remained challenging—until now. Defang bridges this gap by extending Docker Compose into native cloud deployments across AWS, GCP, DigitalOcean, and more, all with a single command: defang compose up. This integration empowers developers to: Use familiar Docker Compose definitions for cloud deployment.Enjoy seamless transitions from local to multi-cloud environments.Automate complex infrastructure setups including DNS, networking, autoscaling, managed storage, and even managed LLMs.Estimate cloud costs and choose optimal deployment strategies (affordable, balanced, or high availability). Our whitepaper dives deep into how Docker Compose paired with Defang significantly reduces complexity, streamlines workflows, and accelerates development and deployment. Discover how Docker + Defang can simplify your journey from local development to production-ready deployments across your preferred cloud providers. Read the full whitepaper","keywords":"","version":null},{"title":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","type":0,"sectionRef":"#","url":"/blog/agentic-apps","content":"","keywords":"","version":null},{"title":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#deploying-agentic-apps-to-the-cloud-shouldnt-be-this-hard","content":" Agentic apps are redefining how software is built: multi-agent workflows, persistent memory, tool-using LLMs, and orchestrated autonomy. But deploying them to the cloud is still painful - for example, your agentic app typically needs to provision:  Managed databases like Postgres or MongoDBFast, scalable caching (hello Redis)Containerized compute that scalesSecure networking and service discoveryManaged LLMs like AWS Bedrock or GCP Vertex AI  And for many teams, these apps must run inside the customer’s cloud, where sensitive data lives and compliance rules apply. That means you cannot just spin up your own environment and call it a day. Instead, you are deploying across AWS, GCP, DigitalOcean, or whichever stack your customers demand, each with its own APIs, quirks, and limitations.  Now you are not just building agents; you are picking the right infrastructure, rewriting IaC templates for every provider, and untangling the edge cases of each cloud.  The result: weeks of DevOps headaches, lost momentum, and engineers stuck wiring infrastructure instead of shipping agents.  ","version":null,"tagName":"h2"},{"title":"We Made it Simple with Cloud Native Support for Agentic Apps​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#we-made-it-simple-with-cloud-native-support-for-agentic-apps","content":" That’s where Defang comes in. We make it easy to deploy full-stack agentic apps to your cloud of choice: native, secure, and scalable. Defang understands the common ingredients of agentic apps and makes them first-class citizens:  Compute: Your Dockerized services deploy as cloud-native workloads (e.g. AWS ECS, or GCP Cloud Run)Databases: Provision managed Postgres or MongoDB with one config lineCaching: Add Redis and Defang spins up a managed Redis instance in your cloudLLMs: Integrate directly with Bedrock or Vertex AI - even provision an OpenAI gateway for compatibility with OpenAI APIs.Secure Defaults: : TLS, secrets, IAM, and service accounts handled out of the box  ","version":null,"tagName":"h2"},{"title":"Built for All your Favorite Agentic Frameworks​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#built-for-all-your-favorite-agentic-frameworks","content":" Defang works seamlessly with leading agentic frameworks. Try them out with our ready-to-deploy samples:  Autogen - demo featuring Mistral AI + FastAPI, deployable with Defang’s OpenAI Access Gateway.CrewAI - sample app showing multi-agent orchestration in action.LangGraph - workflow sample that defines and controls multi-step agentic graphs with LangChain.Agentic Strands - A Strands Agent application.  More framework templates coming soon.  ","version":null,"tagName":"h2"},{"title":"Why It Matters​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#why-it-matters","content":" Agentic apps need to be fast, secure, and ready to scale. Defang delivers cloud-native deployments in your environment (AWS, GCP, DO), so you can move from idea to production quickly with consistent behavior across dev, test, and prod.  ","version":null,"tagName":"h2"},{"title":"The Developer Journey, Simplified​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#the-developer-journey-simplified","content":" Build your agentic app locally using Docker ComposeTest in Defang's free playground with defang compose upDeploy to your cloud:  defang compose up --provider=aws # or gcp, digitalocean   It just works. No Terraform. No YAML explosion. No vendor lock-in.  ","version":null,"tagName":"h2"},{"title":"The Future of AI Apps Is Agentic and Cloud-Native​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#the-future-of-ai-apps-is-agentic-and-cloud-native","content":" Agility and scalability should not be a trade-off. With Defang, you get both. Developers focus on agents, tools, and outcomes. Defang takes care of the cloud infrastructure.  ","version":null,"tagName":"h2"},{"title":"Try it out​","type":1,"pageTitle":"Deploying Agentic Apps to the Cloud Shouldn’t Be This Hard…","url":"/blog/agentic-apps#try-it-out","content":" Explore more samples at docs.defang.ioJoin our community on Discord ","version":null,"tagName":"h2"},{"title":"Simple, Secure, and Scalable GCP Deployments from Docker Compose","type":0,"sectionRef":"#","url":"/blog/defang-gcp-compose","content":"Introducing Our New Whitepaper: Simple, Secure, and Scalable GCP Deployments from Docker Compose We’re excited to share our latest whitepaper, Defang + GCP: Simple, Secure, and Scalable Deployments from Docker Compose. Want to skip the blog? Read the full whitepaper here. Deploying to Google Cloud Platform (GCP) doesn’t have to be complicated. Docker Compose made defining local apps simple, and Defang makes cloud deployments just as easy. With Defang, you can: Deploy to GCP with a single command. Go from Compose to Cloud Run, Cloud SQL, and more with just defang compose up --provider=gcp.Skip the DevOps overhead. No need for Terraform, Pulumi, or custom scripts. Defang maps your Compose services to the right GCP resources — compute, storage, networking, and even managed LLMs.Enjoy built-in security and scalability. Defang automates GCP best practices, handling service accounts, secret management, HTTPS, auto-scaling, and more.Integrate with your workflow. Deploy from your terminal, GitHub Actions, or even natural language prompts in VS Code, Cursor, or Windsurf.Save costs and avoid surprises. Choose from affordable, balanced, or high-availability modes with built-in cost estimation coming soon. Our whitepaper walks through how Defang integrates with GCP, including how it: ✅ Builds your containers using Cloud Build ✅ Manages secure deployments via Cloud Run and managed services ✅ Supports custom domains, advanced networking, GPUs, LLMs, and more ✅ Powers CI/CD pipelines with GitHub Actions and Pulumi It also highlights how Defang itself deploys real apps like our Ask Defang chatbot using less than 100 lines of Compose on GCP. Want to simplify your GCP deployments? Start with Compose, scale with Defang. Read the full whitepaper","keywords":"","version":null},{"title":"Defang: Your AI DevOps Agent","type":0,"sectionRef":"#","url":"/blog/defang-your-ai-devops-agent","content":"","keywords":"","version":null},{"title":"From Vibe-Coding to Production… Without a DevOps Team​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#from-vibe-coding-to-production-without-a-devops-team","content":" Building apps has never been easier. Tools like Cursor, Windsurf, Lovable, V0, and Bolt have ushered in a new era of coding called vibe coding, rapid, AI-assisted app development where developers can go from idea to prototype in hours, bringing ideas to life faster than ever before.  And with the recently released AWS Kiro, we have now entered a new phase of AI-assisted development called &quot;spec-driven development&quot; where the AI breaks down the app development task even further. You can think of a &quot;PM agent&quot; that goes from prompt to a requirements document, and then an &quot;Architect agent&quot; that goes from the requirements document to a design document, which is then used by &quot;Dev&quot;, &quot;Test&quot; and &quot;Docs&quot; agents to generate app code, tests, and documentation respectively. This approach is much more aligned with enterprise use cases and produces higher quality output.  ","version":null,"tagName":"h2"},{"title":"The Hard Part Isn’t Building. It’s Shipping.​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#the-hard-part-isnt-building-its-shipping","content":" However, cloud app deployment remains a major challenge! As Andrej Karpathy shared during his recent YC talk:  &quot;I vibe-coded the app in four hours… and spent the rest of the week deploying it.&quot;  While AI-powered tools make building apps a breeze, deploying them to the cloud is still frustratingly complex. Kubernetes, Terraform, IAM policies, load balancers, DNS, CI/CD all add layers of difficulty. This complexity continues to be a significant bottleneck that AI tools have yet to fully address, making deployment a critical challenge for developers.  The bottleneck is no longer the code. It's the infrastructure.  ","version":null,"tagName":"h2"},{"title":"Enter Defang: Your AI DevOps Agent​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#enter-defang-your-ai-devops-agent","content":" Defang is an AI-enabled agent that takes care of your entire deployment workflow, going from app code to a production-ready deployment on your favorite cloud in a single step.  By understanding your app stack (using Docker Compose), Defang provisions the right infrastructure and securely deploys to AWS, GCP, or DigitalOcean, following each cloud's best practices.  Whether you're launching a side project or scaling a multi-agent app, Defang ensures secure, smooth, scalable cloud-native deployments.  ","version":null,"tagName":"h2"},{"title":"Defang Deployment Features at a Glance​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#defang-deployment-features-at-a-glance","content":" One Command Deployment: Run defang compose up and you're liveSecure and Scalable: Built-in TLS, secrets, autoscaling, IAM, and HTTPSMulti-Cloud Ready: Deploy to your cloud (AWS, GCP, DO) using your own credentialsLanguage &amp; framework agnostic: Next.js, Go, Python (Django/Flask), C#, …Managed LLM: Add x-defang-llm: true and Defang auto-configures cloud-native LLMs like Bedrock, Vertex AI, and the Defang PlaygroundConfigures managed services (e.g. managed Postgres, MongoDB, Redis) using the target cloud's native services (e.g. RDS for Postgres on AWS, Cloud SQL on GCP).Tailored deployment modes (e.g. affordable, balance, high-availability) optimized for different environments (dev, staging, production)AI Debugging: Get context-aware assistance to quickly identify and fix deployment issues  ","version":null,"tagName":"h2"},{"title":"Native Integration with AI-Assisted Coding Tools​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#native-integration-with-ai-assisted-coding-tools","content":" Defang can be accessed directly from within your favorite IDE - Cursor, Windsurf, VS Code, Claude, or Kiro - via Defang's MCP Server. You can now deploy to the cloud with a natural language command like &quot;deploy my app with Defang&quot;.  ","version":null,"tagName":"h2"},{"title":"For Developers and CTOs Who Want to Move Fast​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#for-developers-and-ctos-who-want-to-move-fast","content":" If you're a developer shipping fast or a CTO scaling lean, Defang acts as your drop-in DevOps engineer without needing to build a team around it.  You focus on building great software. Defang gets it live.  ","version":null,"tagName":"h2"},{"title":"Try Defang Now​","type":1,"pageTitle":"Defang: Your AI DevOps Agent","url":"/blog/defang-your-ai-devops-agent#try-defang-now","content":" Deploy your full-stack app with a single commandExplore samples and templatesJoin our Discord communityCheck out our YouTube channel for tutorials ","version":null,"tagName":"h2"},{"title":"Ask Defang","type":0,"sectionRef":"#","url":"/docs/ask","content":"Ask Defang","keywords":"","version":"Next"},{"title":"defang","type":0,"sectionRef":"#","url":"/docs/cli/defang","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#options","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -h, --help help for defang -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#see-also","content":" defang cert - Manage certificatesdefang compose - Work with local Compose filesdefang config - Add, update, or delete service configdefang deployments - List active deployments across all projectsdefang estimate - Estimate the cost of deploying the current projectdefang generate - Generate a sample Defang projectdefang init - Create a new Defang project from a sampledefang login - Authenticate to Defangdefang logout - Log outdefang mcp - Manage MCP Server for defangdefang services - Get list of services in the projectdefang tail - Show logs from one or more servicesdefang tenants - List tenants available to the logged-in userdefang terms - Read and/or agree the Defang terms of servicedefang token - Manage personal access tokensdefang upgrade - Upgrade the Defang CLI to the latest versiondefang version - Get version information for the CLI and Fabric servicedefang whoami - Show the current user  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang cert generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#see-also","content":" defang cert - Manage certificates  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose down","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_down","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options","content":"  -d, --detach run in detached mode -h, --help help for down --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --pulumi-backend string specify an alternate Pulumi backend URL or &quot;pulumi-cloud&quot; --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang cert","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options","content":"  -h, --help help for cert   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.defang cert generate - Generate a TLS certificate  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose config","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --pulumi-backend string specify an alternate Pulumi backend URL or &quot;pulumi-cloud&quot; --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose","content":"","keywords":"","version":"Next"},{"title":"Synopsis​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#synopsis","content":" Define and deploy multi-container applications with Defang. Most compose commands require a &quot;compose.yaml&quot; file. The simplest &quot;compose.yaml&quot; file with a single service is:  services: app: # the name of the service build: . # the folder with the Dockerfile and app sources (. means current folder) ports:  80 # the port the service listens on for HTTP requests  Aliases: stack  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options","content":"  -h, --help help for compose --pulumi-backend string specify an alternate Pulumi backend URL or &quot;pulumi-cloud&quot;   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.defang compose config - Reads a Compose file and shows the generated configdefang compose down - Reads a Compose file and deprovisions its servicesdefang compose logs - Show logs from one or more servicesdefang compose ps - Get list of services in the projectdefang compose up - Reads a Compose file and deploy a new project or update an existing project  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose logs","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_logs","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#options","content":"  --deployment string deployment ID of the service --filter string only show logs containing given text; case-insensitive -h, --help help for logs -r, --raw show raw (unparsed) logs --since string show logs since duration/time --type log-type show logs of type; one of [RUN BUILD ALL] (default RUN) --until string show logs until duration/time --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --pulumi-backend string specify an alternate Pulumi backend URL or &quot;pulumi-cloud&quot; --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose ps","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_ps","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#options","content":"  -h, --help help for ps -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --pulumi-backend string specify an alternate Pulumi backend URL or &quot;pulumi-cloud&quot; --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config create","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_create","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options","content":"  -e, --env set the config from an environment variable -h, --help help for create --random set a secure randomly generated value for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose up","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_up","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options","content":"  -d, --detach run in detached mode --force force a build of the image even if nothing has changed -h, --help help for up -m, --mode mode deployment mode; one of [affordable balanced high_availability] --utc show logs in UTC timezone (ie. TZ=UTC) --wait-timeout int maximum duration to wait for the project to be running|healthy (default -1)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --pulumi-backend string specify an alternate Pulumi backend URL or &quot;pulumi-cloud&quot; --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config","type":0,"sectionRef":"#","url":"/docs/cli/defang_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.defang config create - Adds or updates a sensitive config valuedefang config ls - List configsdefang config rm - Removes one or more config values  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config rm","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_rm","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options","content":"  -h, --help help for rm   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config ls","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_ls","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options","content":"  -h, --help help for ls   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang deployments","type":0,"sectionRef":"#","url":"/docs/cli/defang_deployments","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang deployments","url":"/docs/cli/defang_deployments#options","content":"  -h, --help help for deployments --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang deployments","url":"/docs/cli/defang_deployments#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang deployments","url":"/docs/cli/defang_deployments#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.defang deployments list - List deployment history for a project  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang estimate","type":0,"sectionRef":"#","url":"/docs/cli/defang_estimate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang estimate","url":"/docs/cli/defang_estimate#options","content":"  -h, --help help for estimate -m, --mode mode deployment mode; one of [affordable balanced high_availability] -r, --region string which cloud region to estimate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang estimate","url":"/docs/cli/defang_estimate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang estimate","url":"/docs/cli/defang_estimate#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options","content":"  -h, --help help for generate --model string LLM model to use for generating the code (Pro users only)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang deployments list","type":0,"sectionRef":"#","url":"/docs/cli/defang_deployments_list","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang deployments list","url":"/docs/cli/defang_deployments_list#options","content":"  -h, --help help for list   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang deployments list","url":"/docs/cli/defang_deployments_list#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name --utc show logs in UTC timezone (ie. TZ=UTC) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang deployments list","url":"/docs/cli/defang_deployments_list#see-also","content":" defang deployments - List active deployments across all projects  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang init","type":0,"sectionRef":"#","url":"/docs/cli/defang_init","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang init","url":"/docs/cli/defang_init#options","content":"  --from SourcePlatform the platform from which to migrate the project; one of [heroku] -h, --help help for init   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang init","url":"/docs/cli/defang_init#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang init","url":"/docs/cli/defang_init#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang login","type":0,"sectionRef":"#","url":"/docs/cli/defang_login","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options","content":"  -h, --help help for login --training-opt-out Opt out of ML training (Pro users only)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang logout","type":0,"sectionRef":"#","url":"/docs/cli/defang_logout","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options","content":"  -h, --help help for logout   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang mcp","type":0,"sectionRef":"#","url":"/docs/cli/defang_mcp","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang mcp","url":"/docs/cli/defang_mcp#options","content":"  -h, --help help for mcp   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang mcp","url":"/docs/cli/defang_mcp#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang mcp","url":"/docs/cli/defang_mcp#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.defang mcp serve - Start defang MCP serverdefang mcp setup - Setup MCP client for defang mcp server  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang mcp setup","type":0,"sectionRef":"#","url":"/docs/cli/defang_mcp_setup","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang mcp setup","url":"/docs/cli/defang_mcp_setup#options","content":"  --client string MCP setup client [claude-desktop claude-code windsurf cascade codeium cursor kiro vscode code vscode-insiders code-insiders] -h, --help help for setup   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang mcp setup","url":"/docs/cli/defang_mcp_setup#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang mcp setup","url":"/docs/cli/defang_mcp_setup#see-also","content":" defang mcp - Manage MCP Server for defang  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang tail","type":0,"sectionRef":"#","url":"/docs/cli/defang_tail","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options","content":"  --deployment string deployment ID of the service --filter string only show logs containing given text; case-insensitive -h, --help help for tail -r, --raw show raw (unparsed) logs --since string show logs since duration/time --type log-type show logs of type; one of [RUN BUILD ALL] (default RUN) --until string show logs until duration/time --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang mcp serve","type":0,"sectionRef":"#","url":"/docs/cli/defang_mcp_serve","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang mcp serve","url":"/docs/cli/defang_mcp_serve#options","content":"  --auth-server int auth server port -h, --help help for serve   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang mcp serve","url":"/docs/cli/defang_mcp_serve#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang mcp serve","url":"/docs/cli/defang_mcp_serve#see-also","content":" defang mcp - Manage MCP Server for defang  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang tenants","type":0,"sectionRef":"#","url":"/docs/cli/defang_tenants","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang tenants","url":"/docs/cli/defang_tenants#options","content":"  -h, --help help for tenants   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang tenants","url":"/docs/cli/defang_tenants#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang tenants","url":"/docs/cli/defang_tenants#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang services","type":0,"sectionRef":"#","url":"/docs/cli/defang_services","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options","content":"  -h, --help help for services -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang terms","type":0,"sectionRef":"#","url":"/docs/cli/defang_terms","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options","content":"  --agree-tos agree to the Defang terms of service -h, --help help for terms   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang token","type":0,"sectionRef":"#","url":"/docs/cli/defang_token","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options","content":"  --expires duration validity duration of the token (default 24h0m0s) -h, --help help for token --scope string scope of the token; one of [admin delete read tail] (required)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang upgrade","type":0,"sectionRef":"#","url":"/docs/cli/defang_upgrade","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#options","content":"  -h, --help help for upgrade   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang version","type":0,"sectionRef":"#","url":"/docs/cli/defang_version","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options","content":"  -h, --help help for version   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"defang whoami","type":0,"sectionRef":"#","url":"/docs/cli/defang_whoami","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options","content":"  -h, --help help for whoami   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path(s) -T, --non-interactive disable interactive prompts / no TTY (default true) --org string override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) --tenant string select tenant by name -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#see-also","content":" defang - Defang CLI is used to take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Auto generated by spf13/cobra on 8-Sep-2025​ ","version":"Next","tagName":"h3"},{"title":"Accounts","type":0,"sectionRef":"#","url":"/docs/concepts/accounts","content":"","keywords":"","version":"Next"},{"title":"Creating an Account​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#creating-an-account","content":" To create an account, log in to Defang and accept the Terms of Service using the CLI.  $ defang login   At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future.  tip Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#structure","content":" Your GitHub username will be used as your Defang username. Your Defang username is used to group all your services and generate domains for your services with the following structure:  &lt;username&gt;-&lt;servicename&gt;--&lt;port&gt;.prod1.defang.dev   For more about domain structures, see our Domains page. ","version":"Next","tagName":"h2"},{"title":"Authentication","type":0,"sectionRef":"#","url":"/docs/concepts/authentication","content":"Authentication To do pretty much anything with Defang, you'll need to authenticate with the system. You can do this by running the following command in the CLI: defang login This will prompt you to open a browser and log in to your Defang account. You can log in using GitHub or GitLab. We will offer other authentication providers in the future. Once you've logged in, you can close the browser and return to the terminal. You will see a message that you've successfully logged in. tip Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.","keywords":"","version":"Next"},{"title":"Debug","type":0,"sectionRef":"#","url":"/docs/concepts/debug","content":"","keywords":"","version":"Next"},{"title":"How It Works​","type":1,"pageTitle":"Debug","url":"/docs/concepts/debug#how-it-works","content":" Here is a typical workflow in the Defang CLI that will automatically run the AI debugger tool:  When you deploy a project with Defang (i.e. defang compose up), the CLI will wait for all services' statuses to switch to healthy. If any service fails to deploy, the AI debugger will kick in and ask for permission. The AI agent will analyze the logs and files in your project to identify the issue(s). Then, it will provide you with the suggested fix(es) in the terminal.  tip The AI debugger will not change your files. Instead, it will show you a suggestion, and it is up to you if you want to use it in your code.  The AI debugger only kicks in when any service in a project fails to deploy. This could be because of a build failure, healthchecks failing, or a variety of other issues.  info The AI debugger only kicks in when any service in a project fails to deploy. At the moment, we do not offer any way to trigger the AI debugger manually. ","version":"Next","tagName":"h2"},{"title":"Defang BYOC","type":0,"sectionRef":"#","url":"/docs/concepts/defang-byoc","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#configuration","content":" The Defang CLI can be configured to deploy to a cloud provider either by using the --provider flag or by setting the DEFANG_PROVIDER environment variable. For example:  # Supported provider values: auto, aws, defang, digitalocean # Default is auto, which deploys to the Defang Playground but warns if it detects cloud credentials $ defang compose up --provider=aws # or $ export DEFANG_PROVIDER=digitalocean   ","version":"Next","tagName":"h3"},{"title":"AWS​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#aws","content":" Please read the AWS Provider documentation for more details about how the AWS provider works and how to get started.  AWS Free Tier &amp; Credits You can use the AWS Free Tier to try out Defang. Learn more about it here. If you're an eligible startup, you can sign up for credits here.  ","version":"Next","tagName":"h2"},{"title":"DigitalOcean​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#digitalocean","content":" info The Defang DigitalOcean Provider is available for Public Preview as of October 2024.  Please read the DigitalOcean Provider documentation for more details about how the DigitalOcean provider works and how to get started.  DigitalOcean Credits You can get DigitalOcean credits to try out Defang. Learn more about it on their pricing page. If you're an eligible startup, you can sign up for credits here.  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#gcp","content":" info The Defang GCP Provider is available for Public Preview as of December 2024.  Please check out the GCP Provider page for more details.  GCP Free Tier &amp; Credits You can use the GCP Free Tier to try out Defang. Learn more about it here. If you're an eligible startup, you can sign up for credits here.  ","version":"Next","tagName":"h2"},{"title":"Azure​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#azure","content":" info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue. ","version":"Next","tagName":"h2"},{"title":"Defang Playground","type":0,"sectionRef":"#","url":"/docs/concepts/defang-playground","content":"","keywords":"","version":"Next"},{"title":"Limitations​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#limitations","content":" There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC.  ","version":"Next","tagName":"h2"},{"title":"No Apex Domain Support​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#no-apex-domain-support","content":" When you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own apex domains to Defang Playground services, but you can use subdomains.  ","version":"Next","tagName":"h3"},{"title":"Max Resources​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#max-resources","content":" Projects: 1Services: 4CPUs: 2Memory: 1GiBReplicas: 1 ","version":"Next","tagName":"h3"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/concepts/configuration","content":"","keywords":"","version":"Next"},{"title":"Interpolation​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#interpolation","content":" Environment variables are set within the environment section of a service in a compose.yaml file. Any variables declared here will become available within the service container.  Variables can be set by assigning a literal value, a reference to a configuration value, or a mix of literal and variable references. Variable references are declared using either ${variable_name} or $variable_name forms. It is recommended to use the bracketed form. By interpolating over variable references within a string we can construct complex strings. Interpolation may be particularly useful when constructing connection strings to other services.  service: environment: - USER_PASSWORD // configuration variable - USER_NAME // configuration variable - CONNECT=dbservice:${USER_NAME}:${USER_PASSWORD}@example.com:9876   In the example above, if we assume the value of the configuration variable USER_PASSWORD is password then the value assigned to CONNECT will resolve to dbservice:alice:password@example.com:9876  During defang compose up all variable references will be replaced with the actual value and made available in the container. If any referenced variable is not found the defang compose up command will be canceled.  ","version":"Next","tagName":"h2"},{"title":"Using Config with Pulumi​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#using-config-with-pulumi","content":" In Defang, using config with Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks.  tip You can find a sample of how to set environment variables with Pulumi here.  ","version":"Next","tagName":"h2"},{"title":"Connecting Services​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#connecting-services","content":" If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi.  ","version":"Next","tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#providers","content":" Here are the different ways sensitive config values are stored depending on the provider you are using:  AWSDigitalOceanGCP  info Please note that while Defang supports setting sensitive config, it does not support the secrets top-level element as seen in the Compose specification. Please see our Compose page for more details.  ","version":"Next","tagName":"h2"},{"title":"Supported Providers​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#supported-providers","content":" Provider\tConfig SupportPlayground\t✅ AWS\t✅ DigitalOcean\t✅ GCP\t✅ ","version":"Next","tagName":"h2"},{"title":"Deployment Modes","type":0,"sectionRef":"#","url":"/docs/concepts/deployment-modes","content":"","keywords":"","version":"Next"},{"title":"Deployment Mode Comparison​","type":1,"pageTitle":"Deployment Modes","url":"/docs/concepts/deployment-modes#deployment-mode-comparison","content":" Feature\tAffordable\tBalanced\tHigh AvailabilityBuild Resources\tBuilds will be run with 2x vCPUs\t(like affordable)\tBuilds will be run with 4x vCPUs Compute\tUsing spot instances\t(like affordable)\tOn-demand instances Databases\tDefang will provision resources optimized for burstable memory\t(like high_availability)\tDefang will provision resources optimized for production Deployment\tPrevious deployments will be spun down before new deployments are spun up. Stopped tasks will not restart.\t(like high_availability)\tRolling updates will be used to deploy new versions. Defang will gradually replace services while maintaining at least the original number of replicas. Logs\tLogs retained for 1 day to save costs.\tLogs retained for 7 days to balance cost and access.\tLogs retained for 30 days for compliance. Networking (like high_availability)\tDefang will provision a NAT gateway. Load Balancing\tHTTP redirect to HTTPS using 302 Found Termination Protection will be enabled; logs are retained on &quot;down&quot; DNS\tDefang will provision shorter TTLs; zones will be forcefully destroyed Defang will provision longer TTLs; records can be overwritten for ZDT Managed Storage\tOperations that cause downtime are allowed Encryption at rest; Final snapshot created on &quot;down&quot; ","version":"Next","tagName":"h2"},{"title":"Compose","type":0,"sectionRef":"#","url":"/docs/concepts/compose","content":"","keywords":"","version":"Next"},{"title":"How It Works​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#how-it-works","content":" You can create a compose.yaml file in the root of your project, or use the defang generate command to create one for you (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of services.  When you run defang compose up, Defang will read your compose.yaml file and deploy the services named in that file to the cloud.  ","version":"Next","tagName":"h2"},{"title":"Example of a Compose File​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#example-of-a-compose-file","content":" Here is a basic compose.yaml file that contains all the required properties for deployment in Defang.  services: service-example: image: nginx:latest # use one of: image (shown on this line) or build (shown below) # build: # context: . # dockerfile: Dockerfile ports: - mode: ingress # specify ports to expose target: 8080 published: 8080 # this is useful for running locally   ","version":"Next","tagName":"h2"},{"title":"Compose Top-level Properties​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#compose-top-level-properties","content":" Here are a list of top-level properties of the Compose specification that Defang supports when writing a compose.yaml file.  ","version":"Next","tagName":"h2"},{"title":"services​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#services","content":" (Required)  The services defined in your application.  services: service: # add service-level properties here   info Defang identifies a service based on your username, project name, and the service name you've defined under the services property. See our Services page for more about how Defang resolves service names.  ","version":"Next","tagName":"h3"},{"title":"networks​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#networks","content":" (Optional)  The networks defined in your application. This is commonly added together with a service-level networks property.  networks: default: # the &quot;default&quot; network is always created even if not specified   See our Networking page for more.  ","version":"Next","tagName":"h3"},{"title":"volumes​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#volumes","content":" (Not yet supported)  The volume mounts for a container, reusable across services. This feature is not currently supported by Defang.  # volumes: # db-data:   warning Defang does not support the secrets top-level property. Please read our Configuration page for more.  ","version":"Next","tagName":"h3"},{"title":"Compose Service-level Properties​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#compose-service-level-properties","content":" Here are a list of service-level properties of the Compose specification that Defang supports when writing a compose.yaml file.  tip Service-level means inside your service. A service-level property called build would look like: service: build: … Note that in your Compose file, you will need a top-level property called services to contain all of your services. For example: services: service: build: …   ","version":"Next","tagName":"h2"},{"title":"build​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#build","content":" (Required, unless image is defined)  The build configuration. This property describes how to create an OCI container for this service.   build: context: . dockerfile: ./Dockerfile   ","version":"Next","tagName":"h3"},{"title":"image​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#image","content":" (Required, unless build is defined)  This property describes the image from which your container should start.   image: nginx:latest   ","version":"Next","tagName":"h3"},{"title":"ports​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#ports","content":" (Optional, but required if you want to access the service from outside the container)  The ports to expose. The default port mode is ingress.   ports: - mode: ingress target: 80 published: 80   info Defang ignores published ports in production. As such, it is common to make target and published ports the same when using Defang. However, it can be useful to include a published port for local development, such as Docker.  ","version":"Next","tagName":"h3"},{"title":"command​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#command","content":" (Optional)  The command which will be run to start your service. If left out, the command from the Docker image will be used.   command: nginx -g 'daemon off;'   ","version":"Next","tagName":"h3"},{"title":"deploy​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#deploy","content":" (Optional)  The Deploy Specification describes the runtime constraints and requirements for how your services will be deployed and managed across different environments (e.g. memory reservations, replicas, number of CPUs, etc.).   deploy: replicas: 1 reservations: cpus: '0.5' memory: 256M   ","version":"Next","tagName":"h3"},{"title":"depends_on​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#depends_on","content":" (Limited support)  This property describes startup dependencies between services. This feature currently has limited supported by Defang: dependency on a managed service does not wait for the managed service provisioning to complete.   # depends_on: # - db   ","version":"Next","tagName":"h3"},{"title":"environment​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#environment","content":" (Optional)  The environment variables to set.   environment: DATABASE_USER: someuser   info For sensitive environment variables (or secret values), you should list the variable's name with a blank or null value, and then securely set their actual value with defang config in the CLI. See our Configuration page for more. For example: - DATABASE_USER=someuser # env var loaded with this literal value - DATABASE_PASSWORD # env var loaded using defang config   ","version":"Next","tagName":"h3"},{"title":"healthcheck​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#healthcheck","content":" (Optional, but required for healthchecks on services with a published port)  This property describes a check that will be run to determine whether or not a service's containers are &quot;healthy&quot;. It works in the same way, and has the same default values, as the HEALTHCHECK Dockerfile instruction set by the service's Docker image. Your Compose file can override the values set in the Dockerfile.  When using Defang, your Compose file must have a healthcheck if you want to expose an ingress port—even if your Dockerfile already contains one.  note curl is commonly used for containers with an Ubuntu-based image, and wget is used for containers with an alpine-based image.   healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8080/&quot;] interval: 30s timeout: 90s retries: 3   or   healthcheck: test: [&quot;CMD&quot;, &quot;wget&quot;, &quot;--spider&quot;, &quot;http://localhost:8080/&quot;] interval: 30s timeout: 90s retries: 3   ","version":"Next","tagName":"h3"},{"title":"networks​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#networks-1","content":" (Optional)  The service network configuration. By default, Compose will add services to the default network, which has external connectivity. You can also add services to private networks. To avoid warnings, you should add them to the top-level networks property as well.   networks: default: # when not specified, services are assigned to the &quot;default&quot; network   You can also assign an alias for a network by using aliases, as seen below:   networks: default: aliases: - app   See our Networking page for more.  ","version":"Next","tagName":"h3"},{"title":"restart​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#restart","content":" (Optional, but highly recommended)  The restart mode for a container. Defaults to unless-stopped unless otherwise specified.   restart: unless-stopped   ","version":"Next","tagName":"h3"},{"title":"volumes​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#volumes-1","content":" (Not yet supported)  The volume mounts for a container, specific to a service. This feature is not currently supported by Defang.   # volumes: # - &quot;./backend:/app&quot;  ","version":"Next","tagName":"h3"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/docs/concepts/deployments","content":"","keywords":"","version":"Next"},{"title":"Deploying Updates​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#deploying-updates","content":" When you run a deployment to update one or more services, Defang will build new images for your services, and provision new resources to replace your existing services.  ","version":"Next","tagName":"h2"},{"title":"Zero Downtime Deployments​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#zero-downtime-deployments","content":" Defang can deploy your services using different modes. When using the high_availability mode, Defang will make sure the new replacement services are healthy before deprovisioning your existing services.  By default, using the affordable mode, Defang will deprovision your existing services before provisioning replacements. This helps reduce costs.  info In Defang BYOC, Defang uses your cloud provider account to build and store your images. In Defang Playground, we build and store your images for you.  ","version":"Next","tagName":"h3"},{"title":"Deployment Modes​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#deployment-modes","content":" As mentioned above, Defang offers different deployment modes: affordable, balanced, and high_availability. You can switch the modes using the --mode CLI flag.  warning Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates.  ","version":"Next","tagName":"h3"},{"title":"Instance Types​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#instance-types","content":" Defang defaults to &quot;spot&quot; instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the 12 Factor principle of disposability.  info In the future, we may provide a way to use &quot;on-demand&quot; instances for workloads that require more stability. ","version":"Next","tagName":"h2"},{"title":"Cost Estimation","type":0,"sectionRef":"#","url":"/docs/concepts/estimation","content":"","keywords":"","version":"Next"},{"title":"Generating an Estimate​","type":1,"pageTitle":"Cost Estimation","url":"/docs/concepts/estimation#generating-an-estimate","content":" Navigate your shell to your application's working directory and run  defang estimate [--provider=aws|gcp] [--mode=affordable|balanced|high_availability]   Here is an example of the output you would see if you estimated the cost deploying the django-postgres to AWS sample using the balanced deployment mode.  defang estimate --provider=aws --mode=balanced * Packaging the project files for django at /Users/defang/samples/samples/django-postgres/app * Generating deployment preview * Preparing estimate Estimate for Deployment Mode: BALANCED This mode strikes a balance between cost and availability. Your application will be deployed with spot instances. Databases will be provisioned using resources optimized for production. Services in the &quot;internal&quot; network will be deployed to a private subnet with a NAT gateway for outbound internet access. Cost Quantity Service Description $16.43 730 Hours (shared) AWSELB USW2-LoadBalancerUsage $32.85 730 Hours (shared) AmazonEC2 USW2-NatGateway-Hours $25.00 100 %Utilized/mo db AmazonRDS USW2-InstanceUsage:db.r5.large $1.62 14600 GB-Hours django AmazonECS USW2-Fargate-EphemeralStorage-GB-Hours (20 GB * 730 hours) $1.62 365 GB-Hours django AmazonECS USW2-Fargate-GB-Hours (0.50 GB * 730 hours) -$1.14 365 GB-Hours django AmazonECS USW2-Fargate-GB-Hours-SpotDiscount (Estimated @ 70%) $7.39 182.50 vCPU-Hours django AmazonECS USW2-Fargate-vCPU-Hours:perCPU (0.25 vCPU * 730 hours) -$5.17 182.50 vCPU-Hours django AmazonECS USW2-Fargate-vCPU-Hours:perCPU-SpotDiscount (Estimated @ 70%) Estimated Monthly Cost: $78.60 (+ usage) Estimate does not include taxes or Discount Programs. To estimate other modes, use defang estimate --mode=affordable|balanced|high_availability For help with warnings, check our FAQ at https://s.defang.io/warnings   This estimate will include a line item for the most significant monthly costs associated with the services described in your project's compose file. If you modify the deploy.resources.reservations section of your compose file, to increase or decrease replicas, CPU or memory allocations, those changes will be reflected in this estimate.  info Some charges will not be included in this estimate, including charges related to usage like data transfer and storage costs.  ","version":"Next","tagName":"h2"},{"title":"Deploying your project​","type":1,"pageTitle":"Cost Estimation","url":"/docs/concepts/estimation#deploying-your-project","content":" Now that you have estimated the costs associated with your project. You are ready to deploy to your target cloud.  defang compose up [--provider aws|gcp|digitalocean] [--mode affordable|balanced|high_availability]   ","version":"Next","tagName":"h2"},{"title":"Supported Providers​","type":1,"pageTitle":"Cost Estimation","url":"/docs/concepts/estimation#supported-providers","content":" Provider\tEstimation SupportPlayground\t❌ AWS\t✅ DigitalOcean\t❌ GCP\t✅ ","version":"Next","tagName":"h2"},{"title":"Domains","type":0,"sectionRef":"#","url":"/docs/concepts/domains","content":"","keywords":"","version":"Next"},{"title":"Defang-hosted Domains​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#defang-hosted-domains","content":" To make your service accessible from the public internet with Defang-hosted domains (under defang.app), you simply expose ports in your service definition.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#structure","content":" Defang-hosted domains use a structure that is based on your username and service name.  PlaygroundBYOC If you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the Defang Playground, your domain will be structured as follows: https://&lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.defang.dev   ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration","content":" ComposePulumi services: # [...] serviceName: ports: - mode: ingress target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Bring Your Own Domain​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#bring-your-own-domain","content":" You can also bring your own domain to a Defang project. This allows you to use your own domain name to access your services, and varies a little bit depending on your setup.  ","version":"Next","tagName":"h2"},{"title":"BYOC or Defang Playground​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#byoc-or-defang-playground","content":" If you are using Defang BYOC and do not have your domain's DNS hosted with your cloud provider, or if you are using the Defang Playground, you will need to follow this flow:  Add the domainname to your service definition.Run defang compose up to deploy your project.Run defang cert generate to generate an SSL certificate. This command will provide instructions for where to point your domain's DNS before the certificate can be issued.  ","version":"Next","tagName":"h3"},{"title":"BYOC​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#byoc","content":" If you are using Defang BYOC and the DNS for your domain is hosted with your cloud provider (i.e. a Hosted Zone in Route 53, if you're using AWS), all you need to do is specify the domainname in your service definition, as in the example below.  warning For the time being, you can only use one domain per service. If you need to use multiple domains, please vote on this issue.  ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration-1","content":" ComposePulumi services: # [...] serviceName: domainname: example.com ports: - mode: ingress target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Current Support​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#current-support","content":" Provider\tBYODPlayground\t✅ no apex domains AWS\t✅ DigitalOcean\t❌ GCP\t✅ ","version":"Next","tagName":"h2"},{"title":"Generate","type":0,"sectionRef":"#","url":"/docs/concepts/generate","content":"","keywords":"","version":"Next"},{"title":"Example Prompts​","type":1,"pageTitle":"Generate","url":"/docs/concepts/generate#example-prompts","content":" Here are some example prompts that the AI agent can help you with:  A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.   A simple service that runs in the cloud and serves a web page   A simple flask app with one route that responds with a json object   A simple next.js app that serves a static page   A simple api with a single route built on express   An HTTP GET endpoint that returns an HTML with a random meme from the imgflip API   An example of a more complex prompt  A service that uses bullmq and redis. The compose file should also include a redis service. The code should set up a queue. It should also expose three endpoints with express: one to add a job to the queue, another to check how many tasks are in the queue, and a last one that runs on / which is just a healthcheck. The code should also include a worker that processes the queue by logging what's in each task. Use environment variables to configure the redis connection. No password.  ","version":"Next","tagName":"h2"},{"title":"OpenAI Access Gateway","type":0,"sectionRef":"#","url":"/docs/concepts/managed-llms/openai-access-gateway","content":"","keywords":"","version":"Next"},{"title":"Docker Model Provider Services​","type":1,"pageTitle":"OpenAI Access Gateway","url":"/docs/concepts/managed-llms/openai-access-gateway#docker-model-provider-services","content":" As of Docker Compose v2.35 and Docker Desktop v4.41, Compose introduces a new service type called provider that allows you to declare platform capabilities required by your application. For AI models, you use the model type to declare model dependencies. This will expose an OpenAI compatible API for your service. Check the Docker Model Runner documentation for more details.  services: chat: build: . depends_on: - ai_runner ai_runner: provider: type: model options: model: ai/mistral x-defang-llm: true   Under the hood, when you use the model provider, Defang will deploy the OpenAI Access Gateway in a private network. This allows you to use the same code for both local development and cloud deployment.  The x-defang-llm extension is used to configure the appropriate roles and permissions for your service. See the Managed Language Models page for more details.  ","version":"Next","tagName":"h2"},{"title":"Model Mapping​","type":1,"pageTitle":"OpenAI Access Gateway","url":"/docs/concepts/managed-llms/openai-access-gateway#model-mapping","content":" Defang supports model mapping through the openai-access-gateway on AWS and GCP. This takes a model with a Docker naming convention (e.g. ai/llama3.3) and maps it to the closest matching model name on the target platform. If no such match can be found, it can fallback onto a known existing model (e.g. ai/mistral).  This can be configured through the following environment variables:  USE_MODEL_MAPPING (default to true) - configures whether or not model mapping should be enabled.FALLBACK_MODEL (no default) - configure a model which will be used if model mapping fails to find a target model.  ","version":"Next","tagName":"h2"},{"title":"Current Support​","type":1,"pageTitle":"OpenAI Access Gateway","url":"/docs/concepts/managed-llms/openai-access-gateway#current-support","content":" Provider\tManaged Language ModelsPlayground\t✅ AWS Bedrock\t✅ DigitalOcean GenAI\t❌ GCP Vertex AI\t✅ ","version":"Next","tagName":"h2"},{"title":"Managed Language Models","type":0,"sectionRef":"#","url":"/docs/concepts/managed-llms/managed-language-models","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Language Models","url":"/docs/concepts/managed-llms/managed-language-models#current-support","content":" Provider\tManaged Language ModelsPlayground\t✅ AWS Bedrock\t✅ DigitalOcean GenAI\t❌ GCP Vertex AI\t✅  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Managed Language Models","url":"/docs/concepts/managed-llms/managed-language-models#usage","content":" In order to leverage cloud-native managed language models from your Defang services, all you need to do is add the x-defang-llm extension to the service config and Defang will configure the approprate roles and permissions for you.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Managed Language Models","url":"/docs/concepts/managed-llms/managed-language-models#example","content":" info Ensure you have enabled model access for the model you intend to use: Configure AWS Bedrock model accessConfigure GCP Vertex AI model access  Assume you have a web service like the following, which uses the cloud native SDK, for example:   services: app: build: context: . + x-defang-llm: true   ","version":"Next","tagName":"h2"},{"title":"Deploying OpenAI-compatible apps​","type":1,"pageTitle":"Managed Language Models","url":"/docs/concepts/managed-llms/managed-language-models#deploying-openai-compatible-apps","content":" If you already have an OpenAI-compatible application, Defang makes it easy to deploy on your favourite cloud's managed LLM service. See our OpenAI Access Gateway.  tip Defang has a Managed LLM sample that uses the OpenAI Access Gateway, and a Managed LLM with Docker Model Provider sample that uses a Docker Model Provider.  ","version":"Next","tagName":"h2"},{"title":"Managed LLM on Playground​","type":1,"pageTitle":"Managed Language Models","url":"/docs/concepts/managed-llms/managed-language-models#managed-llm-on-playground","content":" If you are using the Managed LLM feature on Defang Playground, please note that your MODEL (model ID) will be limited to a default model chosen by Defang. To access a full range of models, consider using Defang BYOC. ","version":"Next","tagName":"h2"},{"title":"Local Development","type":0,"sectionRef":"#","url":"/docs/concepts/local-development","content":"","keywords":"","version":"Next"},{"title":"compose.local.yaml​","type":1,"pageTitle":"Local Development","url":"/docs/concepts/local-development#composelocalyaml","content":" In these cases, Defang recommends creating a file like compose.local.yaml which extends service definitions from your primary compose.yaml file.  For example,  # compose.yaml services: app: build: context: . dockerfile: Dockerfile   # compose.local.yaml services: app: extends: file: compose.yaml service: app build: context: . dockerfile: local.Dockerfile volumes: - .:/web local_service: image: myservice:latest   This configuration can then be launched locally with  docker compose -f compose.local.yaml   And the primary compose file can be deployed to the cloud with  defang compose up   See our blog post on Dev Containers and Codespaces for more information on getting set up in those environments. ","version":"Next","tagName":"h2"},{"title":"Managed Storage","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage","content":"Managed Storage Defang helps you provision the infrastructure you need to run your services. That infrastructure is designed to scale in and out without persistent storage, so you can build highly scalable services. Defang can also help you provision managed services to store and persist your data, like caches, sql databases, nosql databases, and object storage.","keywords":"","version":"Next"},{"title":"Managed MongoDB","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-mongodb","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed MongoDB","url":"/docs/concepts/managed-storage/managed-mongodb#current-support","content":" Provider\tManaged MongoDBPlayground\t⚠️ Unmanaged AWS\t✅ DocumentDB DigitalOcean\t⚠️ Unmanaged GCP\t✅ Firestore  ","version":"Next","tagName":"h2"},{"title":"How to use Managed MongoDB​","type":1,"pageTitle":"Managed MongoDB","url":"/docs/concepts/managed-storage/managed-mongodb#how-to-use-managed-mongodb","content":" To use managed MongoDB, in your compose.yaml file, use the x-defang-mongodb extension to define your MongoDB service. Adding the extension will tell Defang to provision a managed instance, rather than running MongoDB as a container.  ","version":"Next","tagName":"h2"},{"title":"Required Configuration​","type":1,"pageTitle":"Managed MongoDB","url":"/docs/concepts/managed-storage/managed-mongodb#required-configuration","content":" ","version":"Next","tagName":"h3"},{"title":"AWS​","type":1,"pageTitle":"Managed MongoDB","url":"/docs/concepts/managed-storage/managed-mongodb#aws","content":" When using managed MongoDB on AWS, you must set a username and password for the database. By default, these are read from the MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD config variables, following the official MongoDB container image convention.  You can set these using the following commands:  defang config set MONGO_INITDB_ROOT_USERNAME &lt;your-username&gt; defang config set MONGO_INITDB_ROOT_PASSWORD &lt;your-password&gt;   If you do not provide these values, the deployment will fail.  ","version":"Next","tagName":"h3"},{"title":"GCP​","type":1,"pageTitle":"Managed MongoDB","url":"/docs/concepts/managed-storage/managed-mongodb#gcp","content":" When using managed MongoDB on GCP, you must set a MONGO_INITDB_DATABASE environment variable with the name of the database to create.  Defang will automatically create a config variable named &lt;SERVICE_NAME&gt;_URL that contains the connection string for your MongoDB database. For example, if your service is named db, the config variable will be DB_URL.  Important: GCP will ignore MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD credentials since they are not needed. GCP automatically handles authentication and grants your service access to the MongoDB database.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Managed MongoDB","url":"/docs/concepts/managed-storage/managed-mongodb#example","content":" services: app: # [...] environment: DB_URL: mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@db:27017/ depends_on: - db db: image: mongo:5 x-defang-mongodb: true environment: MONGO_INITDB_DATABASE: mydb   Deleting a GCP Firestore MongoDB Database Please be aware that GCP Firestore does not allow deletion of your database when you bring down your project using defang compose down. You must go to the GCP Cloud Console for Firestore to delete it manually.  Version AWS DocumentDB is compatible with MongoDB 3.6, 4.0, and 5.0. The mongo:5 image is compatible with DocumentDB 5.0, so we recommend using this version for your MongoDB service. Deployment will fail for versions higher than 5. GCP Firestore does not have a configurable version. ","version":"Next","tagName":"h3"},{"title":"Managed Object Storage","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-object-storage","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Object Storage","url":"/docs/concepts/managed-storage/managed-object-storage#current-support","content":" Provider\tManaged Object StoragePlayground\t❌ AWS\t❌ DigitalOcean\t❌ GCP\t❌ ","version":"Next","tagName":"h2"},{"title":"Managed Postgres","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-postgres","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#current-support","content":" Provider\tManaged PostgresPlayground\t⚠️ Unmanaged AWS\t✅ RDS Postgres DigitalOcean\t⚠️ Unmanaged GCP\t✅ Cloud SQL Postgres  ","version":"Next","tagName":"h2"},{"title":"How to use Managed Postgres​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#how-to-use-managed-postgres","content":" To use managed Postgres, in your compose.yaml file, use the x-defang-postgres extension to define your Postgres service. Adding the extension will tell Defang to provision a managed instance, rather than running Postgres as a service.  ","version":"Next","tagName":"h2"},{"title":"Required Configuration​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#required-configuration","content":" When using managed Postgres, you must set a password for the database using defang config set POSTGRES_PASSWORD. If you do not provide the password, the deployment will fail.  POSTGRES_PASSWORD: You can can assign the password in the service's environment variables. To learn more about how this works, read about configuration.  ","version":"Next","tagName":"h3"},{"title":"Optional Configuration​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#optional-configuration","content":" You can also set the following optional environment variables to configure the managed Postgres instance:  POSTGRES_USER: The user for the managed Postgres instance. The default is postgres.POSTGRES_DB: The database name for the managed Postgres instance. The default is postgres.  ","version":"Next","tagName":"h3"},{"title":"Connecting to Managed Postgres​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#connecting-to-managed-postgres","content":" You can connect to the managed Postgres instance using the name of your service as the hostname, POSTGRES_USER, POSTGRES_DB, and POSTGRES_PASSWORD environment variables.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#example","content":" info For a smoother experience with Defang, we recommend using Postgres 14 for your container images. This version provides easier access and improved usability.   app: # [...] environment: POSTGRES_HOST: database POSTGRES_USER: postgres POSTGRES_DB: postgres # Note: by leaving the value empty, Defang will use the # value set using `defang config set POSTGRES_PASSWORD` POSTGRES_PASSWORD: # Note: you can create a connection string by using interpolation, # reference config variables by using ${&lt;config name&gt;} CONNECTURL: postgresql://postgres:${POSTGRES_PASSWORD}@database:5432/postgres?sslmode=require database: image: postgres:14 x-defang-postgres: true ports: - mode: host target: 5432 environment: # Note: by leaving the value empty, Defang will use the # value set using `defang config set POSTGRES_PASSWORD` POSTGRES_PASSWORD:   ","version":"Next","tagName":"h3"},{"title":"Final Snapshots​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#final-snapshots","content":" When a project is deployed to a production environment, any managed Postgres instances are automatically configured to create a snapshot of the database before deletion. The snapshot will be named with the following format:  &lt;project-name&gt;-&lt;service&gt;-postgres-&lt;id&gt;-final-snapshot  The AWS Console can be used to restore a snapshot into a new instance of Postgres. This feature is not yet supported in GCP.  ","version":"Next","tagName":"h2"},{"title":"Managed Redis","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-redis","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#current-support","content":" Provider\tManaged RedisPlayground\t⚠️ Unmanaged AWS\t✅ Elasticache DigitalOcean\t⚠️ Unmanaged GCP\t✅ Memorystore  ","version":"Next","tagName":"h2"},{"title":"How to use Managed Redis​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#how-to-use-managed-redis","content":" To use managed Redis, in your compose.yaml file, use the x-defang-redis extension to define your Redis service. Adding the extension will tell Defang to provision a managed instance, rather than running Redis as a service. Defang will use the image tag to determine the version to provision from your cloud provider. Here's an example:  cache: image: redis:6.2 x-defang-redis: true restart: unless-stopped ports: - mode: host target: 6379   ","version":"Next","tagName":"h2"},{"title":"Final Snapshots​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#final-snapshots","content":" When a project is deployed with the production deployment mode, any managed Redis instances are automatically configured to create a snapshot of the datastore before deletion. The snapshot will be named with the following format:  &lt;project-name&gt;-&lt;service&gt;-redis-&lt;id&gt;-final-snapshot  The AWS Console can be used to restore a snapshot into a new instance of Redis. This feature is not yet supported on GCP. ","version":"Next","tagName":"h2"},{"title":"Observability","type":0,"sectionRef":"#","url":"/docs/concepts/observability","content":"","keywords":"","version":"Next"},{"title":"Tail​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#tail","content":" The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service.  defang tail --name my-service defang tail --etag ua119053ehi2   ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#architecture","content":" In Defang BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed. ","version":"Next","tagName":"h2"},{"title":"Model Context Protocol (MCP) Server","type":0,"sectionRef":"#","url":"/docs/concepts/mcp","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#installation","content":" Ensure that you have the Defang CLI installed.  Run the setup command in your terminal for your IDE of choice from the Supported IDEs section. This will connect the Defang MCP Server to your IDE. The general format of the command is as follows:  Recommended Installation Install the Defang CLI using Curl or Homebrew defang mcp setup --client=&lt;your-ide&gt;   Once the command completes, you may need to restart your IDE for the changes to take effect.  Once the MCP Server is running, you can access the Defang MCP tools directly through the AI agent chat in your IDE.  That's it! Feel free to explore our Example Prompts to get ideas on how to interact with the AI agent and make the most of the Defang MCP Server.  Note that npx installation is supported, but not recommended.  npx -y defang@latest mcp setup --client=&lt;your-ide&gt;   ","version":"Next","tagName":"h2"},{"title":"Supported IDEs​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#supported-ides","content":" ","version":"Next","tagName":"h2"},{"title":"Cursor​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#cursor","content":" Setup command:  defang mcp setup --client=cursor   Once setup is complete, you can interact with the AI coding agent using Defang-related actions like check defang services or other prompts. Here's an example of what it could look like:    ","version":"Next","tagName":"h3"},{"title":"Windsurf​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#windsurf","content":" Setup command:  defang mcp setup --client=windsurf   Once setup is complete, you can interact with the AI coding agent using Defang-related actions like check defang services or other prompts. Here's an example of what it could look like:    ","version":"Next","tagName":"h3"},{"title":"VS Code​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#vs-code","content":" Setup command:  defang mcp setup --client=vscode   Once setup is complete, you can interact with the AI coding agent using Defang-related actions like check defang services or other prompts. Here's an example of what it could look like:    ","version":"Next","tagName":"h3"},{"title":"VS Code Insiders​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#vs-code-insiders","content":" Setup command:  defang mcp setup --client=vscode-insiders   Once setup is complete, you can interact with the AI coding agent using Defang-related actions like check defang services or other prompts. Here's an example of what it could look like:    ","version":"Next","tagName":"h3"},{"title":"Kiro​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#kiro","content":" Setup command:  defang mcp setup --client=kiro   Once setup is complete, you can interact with the AI coding agent using Defang-related actions like check defang services or other prompts. Here's an example of what it could look like:    ","version":"Next","tagName":"h3"},{"title":"Claude Desktop​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#claude-desktop","content":" While this is not an IDE in the traditional sense, it can support MCP servers. For a smoother experience, consider specifying a project name or directory when making chat prompts to this platform.  Setup command:  defang mcp setup --client=claude   Once setup is complete, you can interact with the AI coding agent using Defang-related actions like check defang services or other prompts. Here's an example of what it could look like:    ","version":"Next","tagName":"h3"},{"title":"MCP Tools​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#mcp-tools","content":" Below are the tools available in the Defang MCP Server.  ","version":"Next","tagName":"h2"},{"title":"deploy​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#deploy","content":" The deploy tool scans your project directory for Dockerfiles and compose.yaml files, then deploys the detected service(s) using Defang. You can monitor the deployment process in the Defang Portal.  info The Defang MCP Server currently supports deployments to Defang Playground. We plan to support BYOC in future updates.  ","version":"Next","tagName":"h3"},{"title":"services​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#services","content":" The services tool displays the details of all your services that are currently deployed in your project with Defang. It shows the Service Name, Deployment ID, Public URL and Service Status. If there are no services found, it will display an appropriate message.  ","version":"Next","tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#destroy","content":" Given a project name or directory, the destroy tool identifies any services deployed with Defang and terminates them. If no services are found, it will display an appropriate message.  ","version":"Next","tagName":"h3"},{"title":"estimate​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#estimate","content":" The estimate tool scan your project directory and considers your deployment mode (which defaults to AFFORDABLE) to provide a cost estimation for your project. Currently, the tool supports two providers: AWS or GCP.  ","version":"Next","tagName":"h3"},{"title":"list_configs​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#list_configs","content":" The list_configs tool will list all the Defang configs set for your project.  ","version":"Next","tagName":"h3"},{"title":"set_config​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#set_config","content":" The set_config tool will set a specific Defang config for your project.  ","version":"Next","tagName":"h3"},{"title":"remove_config​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#remove_config","content":" The remove_config tool will remove a specific Defang config for your project.  ","version":"Next","tagName":"h3"},{"title":"Example Prompts​","type":1,"pageTitle":"Model Context Protocol (MCP) Server","url":"/docs/concepts/mcp#example-prompts","content":" After connecting the Defang MCP Server to your IDE using an installation method, you can type in prompts in your chat to invoke the AI agent to use any MCP tool(s).  For example, you can ask the AI agent:  can you deploy this to defang?   please destroy this project.   what services do I have?   You can also choose to specify a project name or project directory if you do not have the project open:  deploy this with defang /Users/yourname/Documents/project1   do I have a service called project1   You can estimate the cost of a deployment to a supported cloud provider:  can you estimate balance mode on aws for this project?   can you estimate how much this project will cost on gcp?   You can list, set and remove Defang configs for a project:  what defang configs do I have set for this project?   list all the defang configs I have set for this project   set the defang config DATABASE_URL to example.com   remove the defang config DATABASE_URL   Feel free to try any of these prompts or create your own! ","version":"Next","tagName":"h2"},{"title":"Portal","type":0,"sectionRef":"#","url":"/docs/concepts/portal","content":"Portal You can log into the Defang Portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications. You can use the Portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. info The Defang Portal displays services deployed to Defang Playground. To view services deployed to Defang BYOC, please check out Monitoring Your Services. tip Need help with a failing deployment? Defang provides a tool to help debug in your application.","keywords":"","version":"Next"},{"title":"Networking","type":0,"sectionRef":"#","url":"/docs/concepts/networking","content":"","keywords":"","version":"Next"},{"title":"Networks​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#networks","content":" The Compose spec has a notion of networks. By default, each service gets added to the default network. Services in the default network can have public IPs. Services in any other network will be in a private subnet. These services cannot be reached from outside the network, but they can still make network requests to the public internet.  services: frontend: build: ./fe ports: - 80 # load-balanced, ie. mode: ingress networks: default: private: backend: build: ./be ports: - mode: host # no load balancer target: 8080 networks: private: networks: default: private: internal: true # no egress   ","version":"Next","tagName":"h2"},{"title":"Public Services​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#public-services","content":" By default, services will be in the default network. By default these services are not accessible directly, but may be accessed through a public load-balancer, ie. exposed ports default to mode: ingress:  services: web: networks: default: # this is the default, so no need to specify ports: - 80:80 # Defang will use a public load-Balancer   If you want a service to have a public IP address, ensure it's in the default network (the default) and set the port to mode: host:  services; web: ports: - target: 80 mode: host # Defang will assign a public IP   ","version":"Next","tagName":"h3"},{"title":"Private Services​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#private-services","content":" If you want a service with exposed ports to not be accessible from the public internet, create a private network:  services: web: # this service can receive public traffic and communicate to private services ports: - 80 networks: default: private: db: # this service can only receive traffic from other services in the same network ports: - 1234 networks: private: networks: private: # any network that's not &quot;default&quot; is considered private   The service's hostname will be the same as the service's name, in this case db.  ","version":"Next","tagName":"h3"},{"title":"Hostname Aliases​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#hostname-aliases","content":" By using network aliases, a service can be made available at multiple hostnames.  services: web: domainname: example.com networks: default: aliases: - www.example.com # a public alias   ","version":"Next","tagName":"h2"},{"title":"Internal DNS​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-dns","content":" Internal communication is handled slightly differently between the Defang Playground and Defang BYOC.  PlaygroundBYOC Internal communication between services in the Defang Playground follows the following pattern: http://&lt;username&gt;-&lt;service-name&gt;:&lt;port&gt; The Defang CLI applies the &lt;username&gt; prefix when it detects service names in the values of environment variables. ","version":"Next","tagName":"h3"},{"title":"One-off Jobs","type":0,"sectionRef":"#","url":"/docs/concepts/one_off_jobs","content":"","keywords":"","version":"Next"},{"title":"When should one-off jobs be used?​","type":1,"pageTitle":"One-off Jobs","url":"/docs/concepts/one_off_jobs#when-should-one-off-jobs-be-used","content":" One-off jobs are useful for running commands that need to be executed before your application starts. Common use cases include:  Database migrationsWarming or cleaning cachesRunning build scripts  ","version":"Next","tagName":"h2"},{"title":"How to configure one-off jobs​","type":1,"pageTitle":"One-off Jobs","url":"/docs/concepts/one_off_jobs#how-to-configure-one-off-jobs","content":" One-off jobs can be configured in your compose.yaml file as services with a Restart Policy set to &quot;no&quot;.  In the example below, we define a one-off job called release that runs a script called release.sh. This job will run once during the deployment process. It will be run concurrently with the web service.  compose.yaml\tWorkflow services: app: build: . ports: - &quot;80:80&quot; release: build: . command: [&quot;./release.sh&quot;] restart: &quot;no&quot;   ","version":"Next","tagName":"h2"},{"title":"How to specify job dependencies​","type":1,"pageTitle":"One-off Jobs","url":"/docs/concepts/one_off_jobs#how-to-specify-job-dependencies","content":" You can specify when the job should run by using depends_on to define dependencies on other services. For example, when running database migrations, you would typically want to ensure that the database service is ready before executing the migration job.  Here is an example configuration for a one-off job that runs database migrations after the database service is ready:  compose.yaml\tWorkflow services: db: image: postgres:latest migrate: build: . command: [&quot;./migrate.sh&quot;] depends_on: - db restart: &quot;no&quot; web: build: . ports: - &quot;80:80&quot; depends_on: - migrate   ","version":"Next","tagName":"h3"},{"title":"How do one-off jobs work under the hood?​","type":1,"pageTitle":"One-off Jobs","url":"/docs/concepts/one_off_jobs#how-do-one-off-jobs-work-under-the-hood","content":" One off jobs are deployed as temporary containers on the same infrastructure as your main services. They are deployed as separate containers to ensure that they do not interfere with the main application services, so resources can be configured independently. They will share the same network and security groups as your other services, allowing them to communicate with your application and database services as needed.  ","version":"Next","tagName":"h2"},{"title":"Supported Providers​","type":1,"pageTitle":"One-off Jobs","url":"/docs/concepts/one_off_jobs#supported-providers","content":" Provider\tRelease Task SupportPlayground\t✅ AWS\t✅ DigitalOcean\t❌ GCP\t✅ ","version":"Next","tagName":"h3"},{"title":"Projects","type":0,"sectionRef":"#","url":"/docs/concepts/projects","content":"","keywords":"","version":"Next"},{"title":"Project Names​","type":1,"pageTitle":"Projects","url":"/docs/concepts/projects#project-names","content":" The project name can be defined in the Compose file with the name property, otherwise the base name of the project directory will be used.  The project name may then be used when performing project-wide operations such as listing services, tailing logs, or deprovisioning. For example:  defang services --project-name &lt;project-name&gt; defang tail --project-name &lt;project-name&gt; defang compose down --project-name &lt;project-name&gt;   By default defang will use the project name from the compose.yaml file in the working directory. The --project-name CLI flag may be used when running defang from outside the working directory. ","version":"Next","tagName":"h2"},{"title":"Run-time Resources","type":0,"sectionRef":"#","url":"/docs/concepts/resources","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Run-time Resources","url":"/docs/concepts/resources#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Run-time Resources","url":"/docs/concepts/resources#docker-compose","content":" services: gpu-service: deploy: replicas: 3 resources: reservations: cpus: &quot;1.0&quot; memory: 2048M devices: - capabilities: [&quot;gpu&quot;]   ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Run-time Resources","url":"/docs/concepts/resources#pulumi","content":" const service = new defang.DefangService(&quot;gpu-service&quot;, { deploy: { replicas: 3, resources: { reservations: { cpu: 1.0, memory: 2048, devices: [{ capabilities: [&quot;gpu&quot;] }], }, }, }, });   GPUs If you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the Docker-Compose documentation. This is the only supported value in the deploy.resources.reservations.devices section.  Build-time Resources  You can configure the memory requirements and disk space requirements for your image builds by using the shm_size property of your service's build specification.  For example,  services: my_service: build: context: . dockerfile: Dockerfile shm_size: 2G   info Defang uses shm_size to configure both the memory and disk space available to your build process.  The default shm_size values for each platform are as follows. More or less may be specified.  Provider\tshm_size MinimumAWS\t16G Digital Ocean\t8G GCP\t16G ","version":"Next","tagName":"h3"},{"title":"Railpack","type":0,"sectionRef":"#","url":"/docs/concepts/railpack","content":"","keywords":"","version":"Next"},{"title":"How to trigger a Defang Railpack deployment​","type":1,"pageTitle":"Railpack","url":"/docs/concepts/railpack#how-to-trigger-a-defang-railpack-deployment","content":" When you run a Defang Railpack deployment, you need 2 components:  A working applicationA valid Compose file  Your Compose file should not mention a Dockerfile.  For example,  services: app: restart: unless-stopped build: context: . deploy: resources: reservations: cpus: &quot;1.0&quot; memory: 512M ports: - mode: ingress target: 3000 published: 3000   ","version":"Next","tagName":"h2"},{"title":"Troubleshooting and tips​","type":1,"pageTitle":"Railpack","url":"/docs/concepts/railpack#troubleshooting-and-tips","content":" If the deployment fails, here are some things you can try.  ","version":"Next","tagName":"h2"},{"title":"Railpack Detection​","type":1,"pageTitle":"Railpack","url":"/docs/concepts/railpack#railpack-detection","content":" To allow Railpack to generate a build plan for your project, please restructure or rename your existing project files to be Railpack-compatible, as described for each framework below.  Node​  Your project will be detected as a Node.js application if a package.json file exists in the root directory.  Here is an example of:  A Railpack-ready React Vite projectA Railpack-ready NextJS project  Python​  Your project will be detected as a Python application if any of these conditions are met:  A main.py file exists in the root directory (If your main.py is named anything else)A requirements.txt file existsA pyproject.toml file existsA Pipfile exists  Here is an example of:  A Railpack-ready Django projectA Railpack-ready Flask project  Go​  Your project will be detected as a Go application if any of these conditions are met:  A go.mod file exists in the root directoryA go.work file exists in the root directory (Go workspaces)A main.go file exists in the root directory  Here is an example of:  A Railpack-ready Golang project  PHP​  Your project will be detected as a PHP application if any of these conditions are met:  An index.php file exists in the root directoryA composer.json file exists in the root directory  Java​  Your project will be detected as a Java application if any of these conditions are met:  A gradlew (Gradle wrapper) file exists in the root directory (to create this, if you don’t have one, run gradle wrapper)A pom.{xml,atom,clj,groovy,rb,scala,yaml,yml} file exists in the root directory  Ruby​  Your project will be detected as a Ruby application if any of these conditions are met:  A Gemfile file is present  Rust​  Your project will be detected as a Rust application if any of these conditions are met:  A Cargo.toml file is present  Elixir​  Your project will be detected as a Elixir application if any of these conditions are met:  A mix.exs file exists in the root directory  Static Sites​  Railpack can automatically build and setup a server for static sites that require no build steps. The Caddy server is used as the underlying web server.  Your project will be automatically detected as a static site if any of these conditions are met:  A Staticfile configuration file exists in the root directoryAn index.html file exists in the root directoryA public directory existsThe RAILPACK_STATIC_FILE_ROOT environment variable is set  Static sites are served using the Caddy web server and you need to have the environment variable PORT exposed like this in the Compose file to map to the correct port:  services: app: restart: &quot;unless-stopped&quot; build: context: ./app # This is the port you need to add environment: PORT: 5173 # &lt;--- PORT ports: - target: 5173 published: 5173 mode: ingress deploy: resources: reservations: memory: 512M   ","version":"Next","tagName":"h3"},{"title":"Supported Providers​","type":1,"pageTitle":"Railpack","url":"/docs/concepts/railpack#supported-providers","content":" Provider\tRailpack SupportPlayground\t❌ AWS\t✅ DigitalOcean\t❌ GCP\t✅ ","version":"Next","tagName":"h2"},{"title":"Pulumi","type":0,"sectionRef":"#","url":"/docs/concepts/pulumi","content":"","keywords":"","version":"Next"},{"title":"Install the Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#install-the-defang-pulumi-provider","content":" To get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project:  npmpnpmyarn npm i @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"When to Use the Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#when-to-use-the-defang-pulumi-provider","content":" The Defang Pulumi Provider is a good option for developers with more complex requirements than those supported by a Compose File.  One reason to use the Defang Pulumi provider is if you wish to integrate your services with other cloud resources. This is particularly true if you need to configure your services dynamically as other cloud resources are being provisioned.  Another reason would be if you want to deploy your services alongside cloud-specific resources, like a DynamoDB table, or an S3 bucket.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#example","content":" The following is a minimal example of a Pulumi program that defines a Defang service:  import * as defang from &quot;@defang-io/pulumi-defang/lib&quot;; const service = new defang.DefangService(&quot;my-service&quot;, { image: &quot;strm/helloworld-http:latest&quot;, ports: [{ target: 80, mode: &quot;ingress&quot;, protocol: &quot;http&quot;, }], });   info See the Deploy using Pulumi tutorial for more information about how to use it.  ","version":"Next","tagName":"h2"},{"title":"API​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#api","content":" ","version":"Next","tagName":"h2"},{"title":"DefangService​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defangservice","content":" constructor( name: string, args: DefangServiceArgs, opts?: pulumi.CustomResourceOptions )   ","version":"Next","tagName":"h3"},{"title":"DefangServiceArgs​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defangserviceargs","content":" interface DefangServiceArgs { /** the DNS name of the Defang Fabric service; defaults to the value of DEFANG_FABRIC or prod, if unset */ fabricDNS?: pulumi.Input&lt;string&gt;; /** the name of the service; defaults to the name of the resource */ name?: pulumi.Input&lt;string&gt;; /** the container image to deploy; required when no build configuration was provided */ image?: pulumi.Input&lt;string&gt;; /** the platform to deploy to; defaults to &quot;linux/amd64&quot; */ platform?: pulumi.Input&lt;Platform&gt;; /** which network the service is in, ie. whether the service requires a public IP or not; defaults to &quot;private&quot; (was: internal=true) */ networks?: { [key in NetworkName]?: Network }; /** the optional deployment configuration */ deploy?: pulumi.Input&lt;Deploy&gt;; /** the ports to expose */ ports?: pulumi.Input&lt;pulumi.Input&lt;Port&gt;[]&gt;; /** the environment variables to set; use `null` to mark at sensitive */ environment?: pulumi.Input&lt;{ [key: string]: pulumi.Input&lt;string&gt; | null }&gt;; /** the secrets to expose as environment variables @deprecated use environment key with value `null` */ secrets?: pulumi.Input&lt;pulumi.Input&lt;Secret&gt;[]&gt;; /** force deployment of the service even if nothing has changed */ forceNewDeployment?: pulumi.Input&lt;boolean&gt;; /** the command to run; overrides the container image's CMD */ command?: pulumi.Input&lt;pulumi.Input&lt;string&gt;[]&gt;; /** the optional build configuration; required when no image was provided */ build?: pulumi.Input&lt;Build&gt;; /** the optional health-check test for the service */ healthcheck?: pulumi.Input&lt;HealthCheck&gt;; /** the optional fully qualified domain name for the service; requires CNAME to the publicFqdn */ domainname?: pulumi.Input&lt;string&gt;; /** experimental: mark this service as (managed) Redis */ x_redis?: pulumi.Input&lt;unknown&gt;; /** experimental: mark this service as serving static files */ x_static_files?: pulumi.Input&lt;StaticFiles&gt;; /** if true, this provider will wait for the service to reach a steady state before continuing */ waitForSteadyState?: pulumi.Input&lt;boolean&gt;; /** the project to deploy the service to */ project?: pulumi.Input&lt;string&gt;; }   ","version":"Next","tagName":"h3"},{"title":"Platform​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#platform","content":" type Platform = &quot;linux/arm64&quot; | &quot;linux/amd64&quot; | &quot;linux&quot;;   ","version":"Next","tagName":"h3"},{"title":"Protocol​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#protocol","content":" type Protocol = &quot;tcp&quot; | &quot;udp&quot; | &quot;http&quot; | &quot;http2&quot; | &quot;grpc&quot;;   ","version":"Next","tagName":"h3"},{"title":"DeviceCapability​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#devicecapability","content":" type DeviceCapability = &quot;gpu&quot;;   ","version":"Next","tagName":"h3"},{"title":"NetworkName​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#networkname","content":" type NetworkName = &quot;private&quot; | &quot;public&quot;;   ","version":"Next","tagName":"h3"},{"title":"Network​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#network","content":" type Network = { aliases?: string[] } | null;  ","version":"Next","tagName":"h3"},{"title":"Scaling","type":0,"sectionRef":"#","url":"/docs/concepts/scaling","content":"","keywords":"","version":"Next"},{"title":"Why Scale?​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#why-scale","content":" Scaling enables services to respond effectively under different conditions:  High Traffic: When demand spikes, scaling up ensures your service can process more requests in parallel.Cost Optimization: Scaling down during periods of low demand helps reduce unnecessary resource usage and cloud costs.Fault Tolerance: Multiple instances of a service provide redundancy in case of instance failure.Throughput &amp; Latency: Additional instances can reduce response times and increase the number of operations your service can perform per second.  ","version":"Next","tagName":"h2"},{"title":"Types of Scaling​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#types-of-scaling","content":" There are two main ways to scale a service:  Horizontal Scaling: Adds or removes instances of a service. This is the most common approach for stateless services.Vertical Scaling: Increases or decreases the resources (CPU, memory) available to a single instance.  In most modern deployments, horizontal scaling is preferred because it aligns well with cloud-native principles and is easier to automate and distribute.  ","version":"Next","tagName":"h2"},{"title":"Auto-Scaling​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#auto-scaling","content":" Auto-scaling refers to automatically adjusting the number of service instances based on defined policies or metrics.  Instead of manually adding more instances when traffic increases, an auto-scaling system watches key indicators (like CPU usage) and takes action in real time.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#example","content":" With Defang, users on the Pro plan or higher can enable service-level autoscaling in three steps:  Add the x-defang-autoscaling : true extension to the service you want to autoscale.Remove any replicas field in the deploy mapping (if present).Deploy using staging or production mode. (e.g. defang compose up --provider=aws --mode=production)  services: service-example: x-defang-autoscaling: true #enable autoscaling for this service build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 8080 published: 8080   ","version":"Next","tagName":"h3"},{"title":"How It Works​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#how-it-works","content":" Auto-scaling systems typically rely on:  Metrics Collection: Real-time monitoring of system metrics.Scaling Policies: Rules that define when to scale up or down. For example: If average CPU &gt; 85% for 5 minutes → scale up by 2 instances. Cooldown Periods: Delays between scaling events to prevent rapid, repeated changes (flapping).  ","version":"Next","tagName":"h3"},{"title":"Supported Providers​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#supported-providers","content":" Provider\tAuto-Scaling SupportPlayground\t❌ AWS\t✅ DigitalOcean\t❌ GCP\t✅  ","version":"Next","tagName":"h3"},{"title":"Benefits of Auto-Scaling​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#benefits-of-auto-scaling","content":" Elasticity: Automatically adapts to changing workloads.Resilience: Helps maintain performance during traffic surges or partial outages.Efficiency: Reduces the need for manual intervention or over-provisioning.  ","version":"Next","tagName":"h3"},{"title":"Considerations​","type":1,"pageTitle":"Scaling","url":"/docs/concepts/scaling#considerations","content":" Ensure services are stateless or use externalized state (e.g., databases, caches) for smooth scaling. (12 Factor App)Test services under load to identify scaling bottlenecks.  See Tutorial page Scaling Tutorial ","version":"Next","tagName":"h3"},{"title":"Security","type":0,"sectionRef":"#","url":"/docs/concepts/security","content":"","keywords":"","version":"Next"},{"title":"Roles & Permissions​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#roles--permissions","content":" Defang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more.  ","version":"Next","tagName":"h2"},{"title":"Networking​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#networking","content":" Defang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required.  ","version":"Next","tagName":"h2"},{"title":"SSL​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#ssl","content":" Defang automates the process of obtaining and renewing SSL certificates for your services using AWS Certificate Manager.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#secrets","content":" Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS). ","version":"Next","tagName":"h2"},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/concepts/services","content":"","keywords":"","version":"Next"},{"title":"Service Name Resolution​","type":1,"pageTitle":"Services","url":"/docs/concepts/services#service-name-resolution","content":" Defang identifies services by using your account username, project name, and service name. The port is included in the domain for the service.  tip Service names are defined in your Compose file or in your Pulumi program.  PlaygroundBYOC Domains for services in Playground follow the following pattern: &lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.prod1a.defang.dev   ","version":"Next","tagName":"h3"},{"title":"Service Deployment​","type":1,"pageTitle":"Services","url":"/docs/concepts/services#service-deployment","content":" Defang manages the deployment process for services. You can learn more about how services are deployed in the Deployment page.  info We plan to add support for other types of services in the future, including serverless functions.  ","version":"Next","tagName":"h3"},{"title":"Service Status​","type":1,"pageTitle":"Services","url":"/docs/concepts/services#service-status","content":" An overview of the possible statuses for a service in Defang.  Status\tDetailsBUILD_QUEUED\tThe service update has been received and is now in the queue for its image to be built. BUILD_PROVISIONING\tThe container orchestrator is provisioning the necessary resources for building your service's image. BUILD_PENDING\tThe necessary resources to build your service have been provisioned but the build has not yet been initiated. BUILD_ACTIVATING\tThe container orchestrator is pulling the build container's image and creating the build container. BUILD_RUNNING\tThe container which builds your service's image is successfully running. BUILD_STOPPING\tThe container orchestrator has sent a termination signal to the build container and is waiting for the build process to stop. BUILD_FAILED\tThe build container exited with a non-zero status code. UPDATE_QUEUED\tThe service update has been received and is now in the queue. SERVICE_DEPLOYMENT_PENDING\tThe necessary resources to run your service have been provisioned but the service has not yet been initiated. SERVICE_DEPLOYMENT_COMPLETED\tYour service has been deployed and is healthy. SERVICE_DEPLOYMENT_FAILED\tYour service could not be deployed.  tip You can run the defang compose ps command to view the status of your services. ","version":"Next","tagName":"h2"},{"title":" ","type":0,"sectionRef":"#","url":"/docs/intro","content":" Defang Documentation Defang lets you take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes. Build cloud applications in any language and stack, deploy to your account on your favorite cloud with a single command, and iterate quickly with AI-assisted tooling. Getting Started 📄️ Learn more about Defang What is Defang and how does it work? 📄️ CLI Reference Use the Defang CLI to deploy your app 📄️ Try Defang Deploy to our free Playground 📄️ Deploy to your own cloud When you're ready for production","keywords":"","version":"Next"},{"title":"Frequently Asked Questions (FAQ)","type":0,"sectionRef":"#","url":"/docs/faq/questions","content":"","keywords":"","version":"Next"},{"title":"Deployment and Infrastructure​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#deployment-and-infrastructure","content":" ","version":"Next","tagName":"h2"},{"title":"Which cloud/region is the app being deployed to?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#which-cloudregion-is-the-app-being-deployed-to","content":" In the Defang Playground, the app is deployed to AWS us-west-2. In the Defang BYOC model, the region is determined by your Defang BYOC Provider settings.  ","version":"Next","tagName":"h3"},{"title":"Can I bring my own AWS or other cloud account?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-bring-my-own-aws-or-other-cloud-account","content":" Yes! Defang makes it easy to deploy your application to your own cloud account. Please check out the Defang BYOC documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"On AWS, can I deploy to services such as EC2, EKS, or Lambda?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#on-aws-can-i-deploy-to-services-such-as-ec2-eks-or-lambda","content":" The current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources.  ","version":"Next","tagName":"h3"},{"title":"Can I access AWS storage services such as S3 or database services such as RDS? How?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-access-aws-storage-services-such-as-s3-or-database-services-such-as-rds-how","content":" Yes! You can access AWS services in the AWS Dashboard as you normally would when you are deploying to your AWS account using Defang. In fact, you can access whatever other resources exist in the cloud account you are using for Defang BYOC.  ","version":"Next","tagName":"h3"},{"title":"Do you plan to support other clouds?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#do-you-plan-to-support-other-clouds","content":" While we currently support AWS for production, GCP and DigitalOcean are in preview with Defang V1. We plan to support other clouds, such as Azure, in future releases.  ","version":"Next","tagName":"h3"},{"title":"Deployment Process​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#deployment-process","content":" ","version":"Next","tagName":"h2"},{"title":"Can I run production apps with Defang?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-run-production-apps-with-defang","content":" Yes! Defang makes it easy to deploy your app on production-ready infrastructure in your own cloud account. For example, you can deploy your app to AWS with defang compose up --provider=aws --mode=production. Check out your preferred cloud provider on Defang BYOC and see our Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Does Defang support blue/green deployments?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#does-defang-support-bluegreen-deployments","content":" Defang does not currently support blue/green deployments, but it does support rolling updates with the --mode=production flag. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Does Defang support rolling deployments?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#does-defang-support-rolling-deployments","content":" Yes! Defang supports rolling updates with the --mode=production flag. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Does Defang support auto-scaling?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#does-defang-support-auto-scaling","content":" No. Defang does not currently support auto-scaling. However, you can check out the Scaling Your Services tutorial to see how you can scale your services manually with Defang.  ","version":"Next","tagName":"h3"},{"title":"Can I cancel a deployment once it has started?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-cancel-a-deployment-once-it-has-started","content":" No. Once a deployment has started, it cannot be canceled. However, you can always deploy a new version of your app which will replace the current deployment.  ","version":"Next","tagName":"h3"},{"title":"Will deploying a new version of my app cause downtime?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#will-deploying-a-new-version-of-my-app-cause-downtime","content":" If you have deployed your application with the --mode=production flag, Defang will use the production deployment mode. This mode will perform a rolling update to ensure zero downtime. If you use another deployment mode, you may experience downtime during the deployment, as Defang will not provision multiple replicas to save cost. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Can I deploy multiple services at once?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-deploy-multiple-services-at-once","content":" Yes! You can deploy multiple services at once by defining them in a single compose.yaml file. When you run defang compose up, Defang will deploy all the services defined in the file at once.  ","version":"Next","tagName":"h3"},{"title":"Can I deploy a service that depends on another service?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-deploy-a-service-that-depends-on-another-service","content":" Defang does not currently support service dependencies. All services will be deployed simultaneously. Defang will however run multiple healthchecks before marking a service as healthy and spinning down any previously deployed services when using the production deployment mode. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Feature Comparisons​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#feature-comparisons","content":" ","version":"Next","tagName":"h2"},{"title":"Is Defang a run-time platform?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#is-defang-a-run-time-platform","content":" No. Defang is not a run-time platform. Instead, it lets you host and run your application on a cloud provider of your choice. You can think of it as a tool that makes it way easier to deploy to that cloud provider. We do provide Defang Playground, but it is meant to be used as a testing environment only.  ","version":"Next","tagName":"h3"},{"title":"What is the difference between Defang and platforms such as Vercel, fly.io, Railway, Render, or Heroku?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#what-is-the-difference-between-defang-and-platforms-such-as-vercel-flyio-railway-render-or-heroku","content":" Defang is a tool that helps you get your application deployed to a cloud provider of your choice, and it is not a platform. Unlike platforms, Defang does not host your application. We do provide Defang Playground, but it is meant to be used as a testing environment only.  ","version":"Next","tagName":"h3"},{"title":"What is the difference between Defang and tools such as SST?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#what-is-the-difference-between-defang-and-tools-such-as-sst","content":" Defang is cloud-agnostic and language-agnostic, meaning that it is designed to work with different cloud providers, and programming languages. Since Defang is not tied to just one cloud or language, this allows for greater flexibility in a wide range of cases. Another difference is that Defang follows the Compose specification, allowing it to work smoothly with various container platforms such as Docker.  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"I'm having trouble running the binary on my Mac. What should I do?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#im-having-trouble-running-the-binary-on-my-mac-what-should-i-do","content":" MacOS users will need to allow the binary to run due to security settings: Attempt to run the binary. You'll see a security prompt preventing you from running it.Go to System Preferences &gt; Privacy &amp; Security &gt; General.In the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.Alternatively, select the option &quot;App Store and identified developers&quot; to allow all applications from the App Store and identified developers to run.  ","version":"Next","tagName":"h3"},{"title":"I'm getting a warning/error. What does it mean?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#im-getting-a-warningerror-what-does-it-mean","content":" Please see the Common Error Messages page. ","version":"Next","tagName":"h3"},{"title":"Defang Features","type":0,"sectionRef":"#","url":"/docs/intro/features","content":"","keywords":"","version":"Next"},{"title":"Wide Variety of Use Cases​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#wide-variety-of-use-cases","content":" Support for various types of applications: web services and APIs, mobile app backends, ML services, hosting LLMs, etc...Support for your programming language of choice: Node.js, Python, Golang, or anything else you can package in a Dockerfile  ","version":"Next","tagName":"h3"},{"title":"AI-Driven Features​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#ai-driven-features","content":" Built-in AI agent to go from natural language prompt to an outline projectBuilt-in AI agent to help you debug your cloud applications  ","version":"Next","tagName":"h3"},{"title":"Container Friendly​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#container-friendly","content":" Automated Dockerfile buildsSupport for pre-built Docker containers, from public or private image registriesAbility to express your project configuration using a Docker Compose YAML file  ","version":"Next","tagName":"h3"},{"title":"Effortless Deployment​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#effortless-deployment","content":" One-command deploymentsSupport for GPUs and managed storage optionsSupport for Infra-as-Code via the Defang Pulumi provider  ","version":"Next","tagName":"h3"},{"title":"Security and Configuration​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#security-and-configuration","content":" Ability to manage encrypted configuration valuesPre-configured environments with built-in security, networking, and observability ","version":"Next","tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Install the Defang CLI​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#install-the-defang-cli","content":" Defang doesn't require installing anything in your cloud, but you will need to install the open source Defang command line interface (CLI) to interact with your Defang resources and account.  We offer a few different ways to install the Defang CLI. You can use a shell script, Homebrew, Winget, or you can download the binary directly.  ShellHomebrewWingetNixDirect Download Using Homebrew You can easily install the Defang CLI using Homebrew. Run the following command in your terminal: brew install DefangLabs/defang/defang   ","version":"Next","tagName":"h2"},{"title":"Generate a project​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#generate-a-project","content":" $ defang generate nodejs-http   You should see the following prompt:  ? What folder would you like to create the project in?   Type in the name of the folder you'd like to use for your new project and press ENTER.  I'll type &quot;welcome-to-defang&quot;. Now, you'll see the following output:  ? What folder would you like to create the project in? welcome-to-defang * Fetching sample from the Defang repository... * Writing files to disk... - .github/ - .github/workflows/ - .github/workflows/deploy.yaml - README.md - app/ - app/Dockerfile - app/main.js - compose.yaml * Code generated successfully in folder welcome-to-defang Check the files in your favorite editor. To deploy the service, do `cd welcome-to-defang` and defang compose up   Now, navigate to the folder you just created:  $ cd welcome-to-defang   You can open the folder in your favorite editor and see the files that were generated for you:  The app folder contains the code for your service.The Dockerfile is used to build the container image for your service.The compose.yaml file is used to define the services you want to deploy.  ","version":"Next","tagName":"h2"},{"title":"Deploy to the Playground​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#deploy-to-the-playground","content":" Go back to your shell and type the following:  $ defang compose up   If you have not used Defang before, you'll be prompted to log in.   ! Please log in to continue. Please visit http://127.0.0.1:49154 and log in. (Right click the URL or press ENTER to open browser)   info To learn more about how authentication works in Defang, check out our Authentication page.  When you do this, you should see something similar to the output below:   * Uploading build context for app * Deploying service app * Monitor your services' status in the defang portal - https://portal.defang.dev/service/app * Tailing logs for deployment ID o59k89vk3qc8 ; press Ctrl+C to detach: * Press V to toggle verbose mode 2024-09-19T10:50:53.572443-07:00 cd Update started for stack jordanstephens-prod1 2024-09-19T10:51:05.536299-07:00 cd Update succeeded in 11.99769745s ; provisioning... 2024-09-19T10:51:39.419693-07:00 app Server running at http://0.0.0.0:3000/ * Service app is in state DEPLOYMENT_COMPLETED and will be available at: - https://jordanstephens-app--3000.prod1.defang.dev * Done.   Now we can go to https://portal.defang.dev/service/app to see our service listed in the Defang portal.    ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#next-steps","content":" Congratulations! You've successfully deployed your first service with Defang. Now, where do you go from here?  Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  📄️ Deploy to your own cloud When you're ready for production 📄️ Generate a Project with AI Use Defang to generate and deploy a new project 📄️ Explore the Defang CLI Learn more about the Defang CLI 📄️ Learn more about Defang What is Defang and how does it work? 📄️ Deploy using Pulumi Deploy using Pulumi 📄️ Monitor your services Learn how to monitor your services with Defang  Choose the direction that seems the most interesting. If you have any questions, join the Defang Discord and we'll be happy to help you out. ","version":"Next","tagName":"h2"},{"title":"How Defang Works","type":0,"sectionRef":"#","url":"/docs/intro/how-it-works","content":"","keywords":"","version":"Next"},{"title":"Bootstrapping​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#bootstrapping","content":" The first time you deploy with Defang, a new CD service will be created in your cloud account. This service acts as an intermediary between you and your cloud provider. It will set up a grpc endpoint with which the defang CLI can communicate. When the CLI sends a request to trigger a deployment, for example, this service will orchestrate the build and deployment process—interfacing with the cloud APIs on your behalf. We will also create the necessary resources to support the Defang system. This includes things like roles, a storage space, an image repository, certificates, etc. The specific resources created depend on the cloud provider.  Our architecture and AWS implementation has passed a &quot;well-architected&quot; review. We are in the process for obtaining similar qualifications with Digital Ocean and Google Cloud.  You can learn more about the specifics by visiting our provider docs.  info The CD service does not run all the time. It is only used when you deploy a new service or update an existing service. Once it has finished deploying your service, it will shut itself down.    ","version":"Next","tagName":"h2"},{"title":"Orchestrating Deployments​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#orchestrating-deployments","content":" The Defang CD service acts as an intermediary between you and your cloud provider. This service receives deployment requests from the defang CLI. Once a request has been received, CD orchestrates the process of building application images from your source code, and then continues to provision the necessary resources to deploy your application.  info The defang CLI will upload your source code to a storage destination within your cloud. Your source code is never processed by Defang's servers.  ","version":"Next","tagName":"h2"},{"title":"Building Images​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#building-images","content":" When you deploy a new service, Defang will build a Docker image from your source code. This source code is uploaded by the defang CLI to a storage destination in your cloud account. The Defang CD service will then retrieve it and determine if each of your service's images need to be rebuilt. If rebuilding is necessary, CD will start a new container for each build it needs to complete.  When you deploy an update to an existing service, the Defang CD service will determine if rebuilding your service's images is necessary. For example, when deploying new source code, CD will request that a new image be built. When deploying an update which does not require a new image, one will not be built—for example, redeploying the same service with increased or decreased resource requirements. In this case, the same image can be deployed to newly provisioned cloud resources.  Defang uses Kaniko to build your images in a container in your cloud account. The resulting images will be stored in your cloud account's private container registry for future reference.  ","version":"Next","tagName":"h2"},{"title":"Service Provisioning​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#service-provisioning","content":" After your images have been built, CD will provision the necessary resources and deploy these images as new services in your cloud account. Defang uses the cloud provider's SDK to create the necessary resources for your services. This may include creating new containers, setting up networking, and configuring any other resources your services needs, such as storage resources.  When deploying changes to existing services, the CD service will determine the minimum set of changes necessary and add, remove, replace, or update services as necessary. ","version":"Next","tagName":"h2"},{"title":"Common Error Messages","type":0,"sectionRef":"#","url":"/docs/faq/warnings-errors","content":"","keywords":"","version":"Next"},{"title":"Warnings​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#warnings","content":" ","version":"Next","tagName":"h2"},{"title":"\"The folder is not empty. Files may be overwritten.\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#the-folder-is-not-empty-files-may-be-overwritten","content":" This message is displayed when you run defang generate and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running defang generate or pick a different target folder.  ","version":"Next","tagName":"h3"},{"title":"\"environment variable not found\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#environment-variable-not-found","content":" This message is displayed when you run defang compose up and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run defang compose up.  ","version":"Next","tagName":"h3"},{"title":"\"Unsupported platform\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#unsupported-platform","content":" This message is displayed when you run defang compose up and the Compose file references a platform that is not supported by Defang.  ","version":"Next","tagName":"h3"},{"title":"\"not logged in\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#not-logged-in","content":" This message is displayed when you run defang compose config but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using defang login.  ","version":"Next","tagName":"h3"},{"title":"\"No port mode was specified; assuming 'host'\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#no-port-mode-was-specified-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port that does not specify a port mode. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the mode as ingress:  services: service1: … ports: - target: 80 mode: ingress   ","version":"Next","tagName":"h3"},{"title":"\"Published ports are not supported in ingress mode; assuming 'host'\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#published-ports-are-not-supported-in-ingress-mode-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and published set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the mode as ingress and remove the published setting.  ","version":"Next","tagName":"h3"},{"title":"\"TCP ingress is not supported; assuming HTTP\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#tcp-ingress-is-not-supported-assuming-http","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and protocol set to tcp. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the protocol setting.  ","version":"Next","tagName":"h3"},{"title":"\"unsupported compose directive\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#unsupported-compose-directive","content":" This message is displayed when you run defang compose up and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior.  ","version":"Next","tagName":"h3"},{"title":"\"no reservations specified; using limits as reservations\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#no-reservations-specified-using-limits-as-reservations","content":" This message is displayed when you run defang compose up and the Compose file declares a resource with limits but no reservations. Defang will use the limits as reservations to ensure the container has enough resources. Specify reservations if you want to silence the warning or reserve a different amount of resources:  services: service1: … deploy: resources: reservations: cpus: 0.5 memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"ingress port without healthcheck defaults to GET / HTTP/1.1\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#ingress-port-without-healthcheck-defaults-to-get--http11","content":" This message is displayed when you run defang compose up and the Compose file declares an ingress with a port but no healthcheck. Defang will assume the default healthcheck of GET / HTTP/1.1 to ensure the port is healthy. Specify a healthcheck if you want to silence the warning or use a different healthcheck:  services: service1: … deploy: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]   ","version":"Next","tagName":"h3"},{"title":"\"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#missing-memory-reservation-specify-deployresourcesreservationsmemory-to-avoid-out-of-memory-errors","content":" This message is displayed when you run defang compose up and the Compose file doesn't specify a memory reservation. If available, Defang will use the memory limit as the memory reservation. Specify a memory reservation if you want to silence the warning or reserve a different amount of memory:  services: service1: … deploy: resources: reservations: memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"The build context contains more than 10 files\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#the-build-context-contains-more-than-10-files","content":" This message is displayed when you run defang compose up and the Compose file declares a build with a context that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the context as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the context.  ","version":"Next","tagName":"h3"},{"title":"\"AWS provider was selected, but AWS environment variables are not set\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#aws-provider-was-selected-but-aws-environment-variables-are-not-set","content":" This message is displayed when you run defang compose up with the --provider=aws but none of the AWS environment variables were set. If you proceed, the deployment might fail, unless you have defined defined default credentials in the AWS configuration files or are running on an AWS instance.  ","version":"Next","tagName":"h3"},{"title":"\"Using Defang provider, but AWS environment variables were detected\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#using-defang-provider-but-aws-environment-variables-were-detected","content":" This message is displayed when you run defang compose up with the --provider=defang but AWS environment variables were detected. The AWS environment variables will be ignored.  ","version":"Next","tagName":"h3"},{"title":"Errors​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#errors","content":" ","version":"Next","tagName":"h2"},{"title":"\"Stack:… is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#stack-is-in-update_complete_cleanup_in_progress-state-and-cannot-be-updated","content":" This happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using defang version.  ","version":"Next","tagName":"h3"},{"title":"\"invalid healthcheck: ingress ports require an HTTP healthcheck on localhost.\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#invalid-healthcheck-ingress-ports-require-an-http-healthcheck-on-localhost","content":" This message is displayed when defang compose up tries to deploy a service with an &quot;ingress&quot; port, if the service does not have a healthcheck which mentions localhost. Defang routes a load balancer to your service's ingress ports, and the loadbalancer needs to be able to check the health of the service. To solve this issue, ask yourself these two questions:  Should my service be public? It's common to declare your container's ports using the Compose file &quot;shorthand&quot; syntax (1234:1234). This syntax can be understood as [HOST:]CONTAINER. If your service is not intended to be public, you do not need to declare a HOST port. For example: services: my-service: image: my-image ports: - - &quot;1234:1234&quot; + - &quot;1234&quot; Does my healthcheck include the string localhost? It is very common to define a healthcheck by using curl or wget to make a request to localhost. So common, in fact, that Defang will look for the string localhost in your healthcheck definition. For example, this healthcheck is valid: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:1234/health&quot;] This healthcheck is not valid for ingress ports: healthcheck: test: [&quot;CMD&quot;, &quot;./my-healthcheck&quot;]   ","version":"Next","tagName":"h3"},{"title":"\"The build aborted with OutOfMemoryError: Container killed due to memory usage\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#the-build-aborted-with-outofmemoryerror-container-killed-due-to-memory-usage","content":" The image build might fail if the build process uses too much memory. The first thing to try is to limit the size of your project by excluding unnecessary files: the easiest way is to create a .dockerignore file that excludes irrelevatn files. Note that Defang will use a default .dockerignore file if you don't have one, but that default might not work for some projects and it's always better to make a .dockerignore file specific to your project.  If that doesn't work, see our Resources documentation for more information on how to configure the memory requirements and disk space requirements for your image builds. ","version":"Next","tagName":"h3"},{"title":"Defang Use Cases","type":0,"sectionRef":"#","url":"/docs/intro/use-cases","content":"","keywords":"","version":"Next"},{"title":"Web Services and APIs​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#web-services-and-apis","content":" Defang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI agent to help you get started.  Defang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring networking, security, and observability, and will give you a nice, horizontally scalable deployment.  If you are using Defang BYOC, you can easily connect to databases, storage, and other services that you have running in your cloud account.  ","version":"Next","tagName":"h2"},{"title":"Mobile App Backends​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#mobile-app-backends","content":" A mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend.  ","version":"Next","tagName":"h2"},{"title":"Hosting LLMs​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#hosting-llms","content":" LLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy.  Anti-patterns  While Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are 12 Factor anti-patterns.  ","version":"Next","tagName":"h2"},{"title":"Stateful Services​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#stateful-services","content":" Some applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because containers are ephemeral and can be replaced at any time.  ","version":"Next","tagName":"h2"},{"title":"Data Stores​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#data-stores","content":" Defang now offers support for stateful workloads through our managed storage options, including Postgres and Redis for data stores. However, we do not recommend using unsupported data stores with Defang, as this may lead to permanent data loss.  info To better serve our users, we will be introducing additional managed storage options, such as Object Storage, in the near future.  Please be aware that if you choose not to use a Defang-supported managed storage option, there is a risk that any data stored in a container may be lost if the container is replaced. ","version":"Next","tagName":"h2"},{"title":"What is Defang?","type":0,"sectionRef":"#","url":"/docs/intro/what-is-defang","content":"","keywords":"","version":"Next"},{"title":"Develop Once, Deploy Anywhere.​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#develop-once-deploy-anywhere","content":" Defang lets you take your app from Docker Compose to a secure and scalable deployment on your favorite cloud in minutes.  Any App, Any Stack, Any Cloud.  ","version":"Next","tagName":"h2"},{"title":"Get Started Quickly​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#get-started-quickly","content":" The Defang CLI (command line interface) includes an AI agent that translates natural language prompts to generate an outline for your project that you can then refine. Or choose from our library of over 50 samples covering all major frameworks and technologies.  ","version":"Next","tagName":"h3"},{"title":"Deploy with a Single Command​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#deploy-with-a-single-command","content":" Defang can automatically build and deploy your project with a single command.  If you’re new to Defang, you can try deploying to Defang Playground, a hosted environment to learn to use Defang with non-production workloads.Once you’re ready, you can deploy a project to your own cloud account - we call this Defang BYOC (Bring-your-Own-Cloud). We offer support for the following cloud providers: Amazon Web Services (AWS)DigitalOceanGoogle Cloud Platform (GCP) To support stateful workloads, we've got managed storage options such as Managed Postgres and Managed Redis.If you want, you can also bring your own domain name for your deployment.  Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer. It also allows you to easily publish updates to your deployed application with zero downtime.  ","version":"Next","tagName":"h3"},{"title":"Debug​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#debug","content":" Once you've deployed, you can use our AI agent to help debug your cloud applications, using your service logs and project files to help you identify and resolve issues. ","version":"Next","tagName":"h3"},{"title":"Azure","type":0,"sectionRef":"#","url":"/docs/providers/azure","content":"Azure info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue. You can learn more about other cloud providers.","keywords":"","version":"Next"},{"title":"Amazon Web Services (AWS)","type":0,"sectionRef":"#","url":"/docs/providers/aws","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#getting-started","content":" Getting started with the Defang BYOC AWS Provider is easy. The first step is to authenticate your shell with AWS as an admin user. The authenticated user should be an IAM admin because Defang will need permission to create resources and IAM roles in your account.  tip If you have the AWS CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID.  Use the --provider=aws flag to tell the Defang CLI to use the AWS Provider or set the DEFANG_PROVIDER environment variable to aws.  $ defang compose up --provider=aws # or $ export DEFANG_PROVIDER=aws   warning Because Defang creates roles, you need to have the appropriate permissions to create roles in your cloud provider account, typically the AdministratorAccess policy in AWS.  tip The Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail.  ","version":"Next","tagName":"h2"},{"title":"Region​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#region","content":" The Defang BYOC AWS Provider will use the region specified in the AWS_REGION environment variable, or a profile in the ~/.aws/config file exactly as the AWS CLI would.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#secrets","content":" Defang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#runtime","content":" The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services.  ","version":"Next","tagName":"h3"},{"title":"Service Discovery​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#service-discovery","content":" Defang uses a Route53 private hosted zone for service discovery. Each (private) service in the Compose file will get a CNAME or A record which resolves to the service's AWS domain name or IP, respectively. To update the A records for the dynamically assigned IP addresses, Defang will add a Route53 sidecar alongside your container.  ","version":"Next","tagName":"h3"},{"title":"Managed Storage​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-storage","content":" Defang can help you provision managed storage services. The following managed storage services are supported on AWS:  ","version":"Next","tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-postgres","content":" When using Managed Postgres, the Defang CLI provisions an RDS Postgres instance in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed Redis​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-redis","content":" When using Managed Redis, the Defang CLI provisions an ElastiCache Redis cluster in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed LLMs​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-llms","content":" Defang offers integration with managed, cloud-native large language model services with the x-defang-llm service extension. Add this extension to any services which use the Bedrock SDKs.  When using Managed LLMs, the Defang CLI provisions an ElastiCache Redis cluster in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed MongoDB​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-mongodb","content":" Defang will provision a DocumentDB instance for services that use the x-defang-mongodb service extension. This allows you to use MongoDB as a managed service, rather than running it as a container.  ","version":"Next","tagName":"h3"},{"title":"Managed Resources​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-resources","content":" Defang will create and manage the following resources in your AWS account from its bootstrap CloudFormation template:  Resource Type\tExample Resource Names3/Bucket\tdefang-cd-bucket-cbpbzz8hzm7 ecs/ClusterCapacityProviderAssociations\tdefang-cd-Cluster-pqFhjwuklvm ecs/Cluster\tdefang-cd-ClusterpJqFhjwuklvm iam/Role\tdefang-cd-ExeutionRole-XE7RbQDfeEwx ec2/InternetGateway\tigw-05bd7adc92541ec3 ec2/VPCGatewayAttachment\tIGW logs/LogGroup\tdefang-cd-Logroup-6LSZet3tFnEy ecr/PullThroughCacheRule\tdefang-cd-ecrpublic ec2/Route\trtb-08f3f5afc9e6c8c8 ec2/RouteTable\trtb-08f3f5ffc9e6c8c8 ec2/VPCEndpoint\tvpce-02175d8d4f47d0c9 ec2/SecurityGroup\tsg-032b839c63e70e49 ec2/Subnet\tsubnet-086bead399ddc8a0 ec2/SubnetRouteTableAssociation\trtbassoc-02e200d45e7227fe ecs/TaskDefinition\tarn:aws:ecsus-west-2:381492210770:task-definition/defang-cd-TaskDefinition-RXd5tf9TaN38:1 iam/Role\tdefang-cd-askRole-gsEeDPd6sPQY ec2/VPC\tvpc-0cbca64f13435695  Then, for each project you deploy, Defang will create and manage the following resources:  Resource Type\tExample Resource Nameecr/Repository\tproject1/kaniko-build ecr/LifecyclePolicy\tproject1/kaniko-build acm/Certificate\t*.project1.tenant1.defang.app ecr/Repository\tproject1/kaniko-build/cache ecr/LifecyclePolicy\tproject1/kaniko-build/cache iam/InstanceProfile\tecs-agent-profile iam/Role\tecs-task-execution-role cloudwatch/EventRule\tproject1-ecs-lifecycle-rule cloudwatch/EventTarget\tproject1-ecs-event-cw-target route53/Record\tvalidation-project1.tenant1.defang.app acm/CertificateValidation\t*.project1.tenant1.defang.appValidation ec2/VpcDhcpOptionsAssociation\tdhcp-options-association cloudwatch/LogGroup\tbuilds iam/Role\tkaniko-task-role ecs/TaskDefinition\tkanikoTaskDefArm64 ecs/TaskDefinition\tkanikoTaskDefAmd64 s3/Bucket\tdefang-build s3/BucketPublicAccessBlock\tdefang-build-block ecs/Cluster\tcluster ecs/ClusterCapacityProviders\tcluster-capacity-providers ec2/SecurityGroup\tproject1_app-sg ec2/SecurityGroup\tbootstrap ec2/VpcDhcpOptions\tdhcp-options cloudwatch/LogGroup\tlogs ","version":"Next","tagName":"h3"},{"title":"Playground","type":0,"sectionRef":"#","url":"/docs/providers/playground","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Playground","url":"/docs/providers/playground#overview","content":" Overall, the Defang Playground is very similar to deploying to your own cloud account. The Playground runs on a Defang-managed AWS account, so you can expect it to work similarly to deploying to AWS.  ","version":"Next","tagName":"h2"},{"title":"Managed services​","type":1,"pageTitle":"Playground","url":"/docs/providers/playground#managed-services","content":" In essence, the Playground does not support any managed storage services, ie. x-defang-postgres and x-defang-redis are ignored when deploying to the Playground. You can however run both Postgres and Redis as regular container services for testing purposes.  ","version":"Next","tagName":"h3"},{"title":"Managed LLMs​","type":1,"pageTitle":"Playground","url":"/docs/providers/playground#managed-llms","content":" Defang offers integration with managed, cloud-native large language model services with the x-defang-llm service extension when deploying to your own cloud account with BYOC. This extension is supported in the Defang Playground with one caveat: your MODEL (model ID) will be limited to a default model chosen by Defang. ","version":"Next","tagName":"h3"},{"title":"DigitalOcean","type":0,"sectionRef":"#","url":"/docs/providers/digitalocean","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Install Defang​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#install-defang","content":" To get started with the Defang BYOC DigitalOcean Provider, first install the latest version of the Defang CLI.  ","version":"Next","tagName":"h3"},{"title":"Sign up for DigitalOcean​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#sign-up-for-digitalocean","content":" Next, make sure you have signed up for a DigitalOcean account.  ","version":"Next","tagName":"h3"},{"title":"Authenticate with DigitalOcean​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#authenticate-with-digitalocean","content":" After signing up for your account, be sure to set up your personal access token. Defang will need to find this value in your shell as the DIGITALOCEAN_TOKEN environment variable.  ","version":"Next","tagName":"h3"},{"title":"Authenticate with DigitalOcean Spaces​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#authenticate-with-digitalocean-spaces","content":" You will also need a DigitalOcean Spaces access key. Defang will need to find this value in your shell as the SPACES_ACCESS_KEY_ID, and SPACES_SECRET_ACCESS_KEY environment variables.  ","version":"Next","tagName":"h3"},{"title":"Configure your shell environment​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#configure-your-shell-environment","content":" export DIGITALOCEAN_TOKEN=&lt;your-token&gt; export SPACES_ACCESS_KEY_ID=&lt;your-key-id&gt; export SPACES_SECRET_ACCESS_KEY=&lt;your-key&gt;   The Defang CLI will automatically check if these envinonment variables are set before running.  ","version":"Next","tagName":"h3"},{"title":"Deploy your project to DigitalOcean​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#deploy-your-project-to-digitalocean","content":" Once you are ready to go, add the --provider=digitalocean to your command to tell the Defang CLI to use the DigitalOcean provider or set the DEFANG_PROVIDER environment variable to digitalocean.  $ defang compose up --provider=digitalocean # or $ export DEFANG_PROVIDER=digitalocean   ","version":"Next","tagName":"h3"},{"title":"Region​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#region","content":" The Defang BYOC DigitalOcean Provider will use the region specified in the REGION environment variable. For a list of regions available in DigitalOcean, see the region documentation.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for DigitalOcean, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Deployment​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to a Spaces Object Storage bucket in your account. The CLI then deploys an App Platform App that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#runtime","content":" The Provider runs your workloads using the DigitalOcean App Platform.  ","version":"Next","tagName":"h3"},{"title":"Secrets​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#secrets","content":" Defang allows you to configure your services with sensitive config values in DigitalOcean. Sensitive values are added and stored with encryption in your app once it has been deployed.  ","version":"Next","tagName":"h3"},{"title":"Future Improvements​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#future-improvements","content":" The following features are still in development for DigitalOcean:  Custom DomainsManaged RedisManaged PostgresManaged Language Models  Stay tuned for future updates! ","version":"Next","tagName":"h3"},{"title":"Google Cloud Platform (GCP)","type":0,"sectionRef":"#","url":"/docs/providers/gcp","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#getting-started","content":" After signing in to your GCP account, select an existing project or create a new project, make sure billing is enabled, and note down the project ID and set it as environment variable GCP_PROJECT_ID.  export GCP_PROJECT_ID=&lt;your-project-id&gt;   Next step is to authenticate your local environment with GCP. Our preferred method is to set up Application Default Credentials with the Google Cloud CLI. Once the Google Cloud CLI is installed, run the following command to authenticate:  gcloud init gcloud auth application-default login   The Defang CLI will automatically check if GCP_PROJECT_ID OR CLOUDSDK_CORE_PROJECT environment variable is set and correctly authenticated with GCP before running. Once you are ready to go, add the --provider=gcp flag to your command to tell the Defang CLI to use the GCP provider, or set the DEFANG_PROVIDER environment variable to gcp.  $ defang compose up --provider=gcp # or $ export DEFANG_PROVIDER=gcp   ","version":"Next","tagName":"h2"},{"title":"Location​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#location","content":" The Defang BYOC GCP Provider will use the location specified in the GCP_LOCATION environment variable. For a list of locations available in GCP, see the location documentation. If the GCP_LOCATION environment variable is not set, the default location us-central1 (Iowa) will be used.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#architecture","content":" Defang uses GCP cloud run to build, deploy, and run your services. The following describes the current state of Defang's support for GCP, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Deployment​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#deployment","content":" To deploy your services, the Defang CLI sets up some basic resources needed, including enabling required APIs in the project, creating service accounts used to build and deploy your service with the required permissions, and creating a Google Cloud Storage bucket where the Defang CLI uploads your source code to. The CLI then deploys a GCP Cloud Run Job that uses Pulumi to build your container image and run your services.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#runtime","content":" The Provider builds and deploys your services using Google Cloud Run jobs, and runs your workloads using the Google Cloud Run service.  ","version":"Next","tagName":"h3"},{"title":"Secrets​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#secrets","content":" The GCP provider does not currently support storing sensitive config values.  ","version":"Next","tagName":"h3"},{"title":"Managed Storage​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#managed-storage","content":" Defang can help you provision managed storage services. The following managed storage services are supported on GCP:  ","version":"Next","tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#managed-postgres","content":" When using Managed Postgres, the Defang CLI provisions a Cloud SQL instance in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed Redis​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#managed-redis","content":" When using Managed Redis, the Defang CLI provisions a Memorystore for Redis cluster in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed LLMs​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#managed-llms","content":" Defang offers integration with managed, cloud-native large language model services with the x-defang-llm service extension. Add this extension to any services which use the Google Vertex AI SDKs.  ","version":"Next","tagName":"h3"},{"title":"Future Improvements​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#future-improvements","content":" The following features are in active development for GCP:  Managed Object Storage  Stayed tuned for future updates! ","version":"Next","tagName":"h3"},{"title":"Configure Environment Variables","type":0,"sectionRef":"#","url":"/docs/tutorials/configure-environment-variables","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#pre-requisites","content":" A compose.yaml file in your projectA Defang AccountThe Defang CLI  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Go to your compose.yaml file​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#step-1---go-to-your-composeyaml-file","content":" info If you are using Pulumi instead of Compose files to define your services, please see Using Config With Pulumi instead.  In your Compose file, you can define a sensitive config variable for your service by leaving it as a blank or null value. Defang will recognize it as a sensitive value.  In the example below, let's define API_KEY as an environment variable.  services: service1: image: image1:latest environment: - API_KEY   The type of notation shown above is called list notation. Alternatively, you can use map notation, which is also acceptable:  services: service1: image: image1:latest environment: API_KEY:   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Set the actual value in the Defang CLI​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#step-2---set-the-actual-value-in-the-defang-cli","content":" To store the actual (sensitive) value of the variable, open up a terminal and type the command:  defang config set API_KEY=actualvalue   Remember to replace API_KEY with your variable name and actualvalue with your actual value.  tip You can view all the config variables you are storing in Defang by doing: defang config ls.  ","version":"Next","tagName":"h2"},{"title":"Editing a config value​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#editing-a-config-value","content":" To edit a value, you can run the command again with an updated value to overwrite the current value:  defang config set API_KEY=newvalue   ","version":"Next","tagName":"h3"},{"title":"Removing a config value​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#removing-a-config-value","content":" To remove a value, run the command:  defang config rm API_KEY   tip Remember to update your Compose file if you remove an environment variable.  ","version":"Next","tagName":"h3"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#step-3---deploy","content":" defang compose up     For a deeper discussion on how configuration works in Defang, see our Configuration docs. ","version":"Next","tagName":"h2"},{"title":"Deploy Existing Containers","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-container-using-the-cli","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Make a Docker Compose file​","type":1,"pageTitle":"Deploy Existing Containers","url":"/docs/tutorials/deploy-container-using-the-cli#step-1---make-a-docker-compose-file","content":" tip If you are unfamiliar with Docker Compose files, check out the Compose page.  Create a compose.yaml file to define the service(s) in your application.  If you already have a Docker Compose file to define your service(s), you can use it directly and skip this step.  services: web: image: nginx:latest ports: - mode: ingress target: 3000 app: build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 4000 redis: image: redis:6.2 restart: unless-stopped ports: - mode: host target: 6379   The example above shows a multi-container application with 3 services, web, app, redis. If you wanted to deploy only one container, say app, then the example would remain the same, except without the web and redis services.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Deploy​","type":1,"pageTitle":"Deploy Existing Containers","url":"/docs/tutorials/deploy-container-using-the-cli#step-2---deploy","content":" Run the following command in the Defang CLI.  defang compose up  ","version":"Next","tagName":"h2"},{"title":"Adding Custom 1-Click Deploy to Your App","type":0,"sectionRef":"#","url":"/docs/tutorials/adding-custom-one-click-deploy","content":"","keywords":"","version":"Next"},{"title":"How 1-Click Deploy Works​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#how-1-click-deploy-works","content":"A 1-Click Deploy link points to a special URL. Clicking this link will prompt the user to create a new GitHub repo with a clone of your project. This new repo will contain a GitHub Actions workflow which will automatically deploy the project to Defang. ","version":"Next","tagName":"h3"},{"title":"Pre-requisites​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#pre-requisites","content":"A GitHub repository for your project ","version":"Next","tagName":"h2"},{"title":"Step 1 - Prepare Your App​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-1---prepare-your-app","content":"You will need a compose.yaml file in the root folder of your project repository to describe the services which will be deployed. Learn more about writing Compose files. ","version":"Next","tagName":"h2"},{"title":"Step 2 - Copy the GitHub Workflow​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-2---copy-the-github-workflow","content":"In your project, add a new folder named .github, then add a folder named workflows inside it, and copy the entire GitHub Workflow deploy.yaml file from here into the workflows folder. If your app requires configuration (e.g. API keys, passwords, etc.), learn more about managing config variables with the Defang GitHub Action. You should have a .yaml file similar to the one below: name: Deploy on: push: branches: - main jobs: deploy: environment: playground runs-on: ubuntu-latest permissions: contents: read id-token: write steps: - name: Checkout Repo uses: actions/checkout@v4 - name: Deploy uses: DefangLabs/defang-github-action@v1.1.3  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Prepare Your Repository​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-3---prepare-your-repository","content":"To support 1-Click Deploy, your repository must be a Template Repository. In order to make your repository into a Template Repository, complete the following steps: Go to the repository's &quot;Settings&quot; near the right on the top bar.Select the &quot;Template repository&quot; box to turn your repo into a template repo, as seen below:  Go back to your repository's homepage.Click the dropdown menu next to the green &quot;Use this template&quot; button near the top right corner, then click &quot;Create a new repository&quot;:  You will be taken to a page similar to the one shown below.  Now stay on this page and continue to the next step. ","version":"Next","tagName":"h2"},{"title":"Step 4 - Get the Encoded URL​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-4---get-the-encoded-url","content":"You will need the encoded version of the URL of the page from the previous step. This will be used as a redirect for the 1-Click Deploy link. Copy the URL of the page you are on ( &quot;Create a new repository&quot; page sourced from your template repository). It should look something like the following: https://github.com/new?template_name=&lt;your-repo-name&gt;&amp;template_owner=&lt;your-github-username&gt;  You need to URL encode your url for the next step. For example, the url above would be encoded as: https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3D&lt;your-repo-name&gt;%26template_owner%3D&lt;your-github-username&gt;  You can just paste your url in here to get the encoded version: .css-1ov46kg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.css-1ov46kg&gt;:not(style):not(style){margin:0;}.css-1ov46kg&gt;:not(style)~:not(style){margin-top:16px;} ​  ","version":"Next","tagName":"h2"},{"title":"Step 5 - Create the 1-Click Deploy Link​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-5---create-the-1-click-deploy-link","content":"You will need to create a 1-Click Deploy link with the following format: https://portal.defang.dev/redirect?url= + your encoded URL. This ensures that the user can get logged in to Defang before they get redirected to clone your app for deployment. tip Optionally, you can add &amp;name=&lt;your-suggested-name&gt; to the end of the link if you'd like to suggest a name for the user to use for their deployment. The finished link should look similar to the one below: https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3D&lt;your-repo-name&gt;%26template_owner%3D&lt;your-github-username&gt;&amp;name=&lt;your-suggested-name&gt;  Now you have a link for anyone to deploy your app to Defang, with just 1 click. ","version":"Next","tagName":"h2"},{"title":"Step 6 - Use the Link​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-6---use-the-link","content":"For example, you can add it as a link in a Markdown file: [1-Click Deploy Link](https://portal.defang.dev/redirect?url=&lt;your-encoded-url&gt;&amp;name=&lt;your-project-here&gt;)  Or perhaps you can add it to a button with your own styling: [![1-click-deploy-button](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=&lt;your-encoded-url&gt;&amp;name=&lt;your-project-here&gt;)  ","version":"Next","tagName":"h2"},{"title":"Deploy OpenAI Apps on Managed LLMs","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-openai-apps","content":"Deploy OpenAI Apps on Managed LLMs Defang currently supports using Managed LLMs on AWS Bedrock and GCP Vertex AI. Follow the link below for your specific platform. AWS BedrockGCP Vertex AI","keywords":"","version":"Next"},{"title":"Deploy to Amazon Web Services (AWS)","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-aws","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLIAWS Account Credentials  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Authenticate Defang to use your AWS Account​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-2---authenticate-defang-to-use-your-aws-account","content":" There are many ways to authenticate your AWS account. Once you've done that, Defang will look for your AWS credentials in your shell environment and expect to find one of the following credential sets:  the AWS_PROFILE environment variableor, the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION environment variables  tip If you have the AWS CLI installed (which is not required in order to use the Defang CLI), you can verify that you've authenticated to AWS by running aws sts get-caller-identity and see your account ID.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-3---deploy","content":" Invoke the defang compose up CLI command with the --provider=aws flag or set the DEFANG_PROVIDER=aws environment variable.  For example:  $ defang compose up --provider=aws   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Inspect your deployment​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-4---inspect-your-deployment","content":" Defang will provision resources in your AWS account and deploy your services. You can inspect the resources created in your AWS Dashboard.    For a deeper discussion of the Defang AWS Architecture, including a list of the resources we provision in your account, see our AWS Provider docs. ","version":"Next","tagName":"h2"},{"title":"Deploy OpenAI Apps to GCP Vertex AI","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex","content":"","keywords":"","version":"Next"},{"title":"Add an LLM Service to Your Compose File​","type":1,"pageTitle":"Deploy OpenAI Apps to GCP Vertex AI","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex#add-an-llm-service-to-your-compose-file","content":" You can use Vertex AI without changing your app code by introducing a new defangio/openai-access-gateway service. We'll call the new service llm. This new service will act as a proxy between your application and Vertex AI, and will transparently handle converting your OpenAI requests into Vertex AI requests and Vertex AI responses into OpenAI responses. This allows you to use Vertex AI with your existing OpenAI client SDK.  + llm: + image: defangio/openai-access-gateway + x-defang-llm: true + ports: + - target: 80 + published: 80 + mode: host + environment: + - OPENAI_API_KEY + - GCP_PROJECT_ID + - REGION   ","version":"Next","tagName":"h2"},{"title":"Notes:​","type":1,"pageTitle":"Deploy OpenAI Apps to GCP Vertex AI","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex#notes","content":" The container image is based on aws-samples/bedrock-access-gateway, with enhancements.x-defang-llm: true signals to Defang that this service should be configured to use target platform AI services.New environment variables: REGION is the zone where the services runs (e.g. us-central1)GCP_PROJECT_ID is your project to deploy to (e.g. my-project-456789)  tip OpenAI Key You no longer need your original OpenAI API Key. We recommend generating a random secret for authentication with the gateway: defang config set OPENAI_API_KEY --random     ","version":"Next","tagName":"h3"},{"title":"Redirect Application Traffic​","type":1,"pageTitle":"Deploy OpenAI Apps to GCP Vertex AI","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex#redirect-application-traffic","content":" Modify your app service to send API calls to the openai-access-gateway:   services: app: ports: - 3000:3000 environment: OPENAI_API_KEY: + OPENAI_BASE_URL: &quot;http://llm/api/v1&quot; healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;]   Now, all OpenAI traffic will be routed through your gateway service and onto GCP Vertex AI.    ","version":"Next","tagName":"h2"},{"title":"Selecting a Model​","type":1,"pageTitle":"Deploy OpenAI Apps to GCP Vertex AI","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex#selecting-a-model","content":" You should configure your application to specify the model you want to use.   services: app: ports: - 3000:3000 environment: OPENAI_API_KEY: OPENAI_BASE_URL: &quot;http://llm/api/v1&quot; + MODEL: &quot;google/gemini-2.5-pro-preview-03-25&quot; # for Vertex AI healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;]   Choose the correct MODEL depending on which cloud provider you are using.  Ensure you have the necessary permissions to access the model you intend to use. To do this, you can check your AWS Bedrock model access or GCP Vertex AI model access.  info Choosing the Right Model For GCP Vertex AI, use a full model path (e.g., google/gemini-2.5-pro-preview-03-25). See available Vertex AI models.  Alternatively, Defang supports model mapping through the openai-access-gateway. This takes a model with a Docker naming convention (e.g. ai/llama3.3) and maps it to the closest matching one on the target platform. If no such match can be found, it can fallback onto a known existing model (e.g. ai/mistral). These environment variables are USE_MODEL_MAPPING (default to true) and FALLBACK_MODEL (no default), respectively.  ","version":"Next","tagName":"h2"},{"title":"Complete Example Compose File​","type":1,"pageTitle":"Deploy OpenAI Apps to GCP Vertex AI","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex#complete-example-compose-file","content":" services: app: build: context: . ports: - 3000:3000 environment: OPENAI_API_KEY: OPENAI_BASE_URL: &quot;http://llm/api/v1&quot; MODEL: &quot;google/gemini-2.5-pro-preview-03-25&quot; healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;] llm: image: defangio/openai-access-gateway x-defang-llm: true ports: - target: 80 published: 80 mode: host environment: - OPENAI_API_KEY - GCP_PROJECT_ID - REGION     ","version":"Next","tagName":"h2"},{"title":"Environment Variable Matrix​","type":1,"pageTitle":"Deploy OpenAI Apps to GCP Vertex AI","url":"/docs/tutorials/deploy-openai-apps/gcp-vertex#environment-variable-matrix","content":" Variable\tGCP Vertex AIGCP_PROJECT_ID\tRequired REGION\tRequired MODEL\tVertex model ID or Docker model name, for example publishers/meta/models/llama-3.3-70b-instruct-maas or ai/llama3.3    You now have a single app that can:  Talk to GCP Vertex AIUse the same OpenAI-compatible client codeEasily switch between models or cloud providers by changing a few environment variables ","version":"Next","tagName":"h2"},{"title":"Deploy to DigitalOcean","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-digitalocean","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLIDigitalOcean Account CredentialsDigitalOcean Spaces Access Keys  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Authenticate Defang to use your DigitalOcean Account​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-2---authenticate-defang-to-use-your-digitalocean-account","content":" Defang will look for your DigitalOcean credentials in your shell environment and expect to find the following credentials:  the DIGITALOCEAN_TOKEN environment variableand, the SPACES_ACCESS_KEY_ID and SPACES_SECRET_ACCESS_KEY environment variables  tip You can find your DigitalOcean token in the API section and your Spaces Access Keys in the Spaces Object Storage sectionin the DigitalOcean Control Panel.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-3---deploy","content":" Invoke the defang compose up CLI command with the --provider=digitalocean flag or set the DEFANG_PROVIDER=digitalocean environment variable.  For example:  $ defang compose up --provider=digitalocean   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Inspect your deployment​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-4---inspect-your-deployment","content":" Defang will provision resources in your DigitalOcean account and deploy your services. You can inspect the resources created in your DigitalOcean Dashboard.    For a deeper discussion of the Defang DigitalOcean Architecture, see our DigitalOcean Provider docs. ","version":"Next","tagName":"h2"},{"title":"Deploy OpenAI Apps to AWS Bedrock","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock","content":"","keywords":"","version":"Next"},{"title":"Add an LLM Service to Your Compose File​","type":1,"pageTitle":"Deploy OpenAI Apps to AWS Bedrock","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock#add-an-llm-service-to-your-compose-file","content":" You can use AWS Bedrock without changing your app code by introducing a new defangio/openai-access-gateway service. We'll call the new service llm. This new service will act as a proxy between your application and AWS Bedrock, and will transparently handle converting your OpenAI requests into AWS Bedrock requests and Bedrock responses into OpenAI responses. This allows you to use AWS Bedrock with your existing OpenAI client SDK.  + llm: + image: defangio/openai-access-gateway + x-defang-llm: true + ports: + - target: 80 + published: 80 + mode: host + environment: + - OPENAI_API_KEY + - REGION   ","version":"Next","tagName":"h2"},{"title":"Notes:​","type":1,"pageTitle":"Deploy OpenAI Apps to AWS Bedrock","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock#notes","content":" The container image is based on aws-samples/bedrock-access-gateway, with enhancements.x-defang-llm: true signals to Defang that this service should be configured to use target platform AI services.New environment variables: REGION is the zone where the services runs (for AWS, this is the equivalent of AWS_REGION)  tip OpenAI Key You no longer need your original OpenAI API Key. We recommend generating a random secret for authentication with the gateway: defang config set OPENAI_API_KEY --random     ","version":"Next","tagName":"h3"},{"title":"Redirect Application Traffic​","type":1,"pageTitle":"Deploy OpenAI Apps to AWS Bedrock","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock#redirect-application-traffic","content":" Modify your app service to send API calls to the openai-access-gateway:   services: app: ports: - 3000:3000 environment: OPENAI_API_KEY: + OPENAI_BASE_URL: &quot;http://llm/api/v1&quot; healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;]   Now, all OpenAI traffic will be routed through your gateway service and onto AWS Bedrock.    ","version":"Next","tagName":"h2"},{"title":"Selecting a Model​","type":1,"pageTitle":"Deploy OpenAI Apps to AWS Bedrock","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock#selecting-a-model","content":" You should configure your application to specify the model you want to use.   services: app: ports: - 3000:3000 environment: OPENAI_API_KEY: OPENAI_BASE_URL: &quot;http://llm/api/v1&quot; + MODEL: &quot;anthropic.claude-3-sonnet-20240229-v1:0&quot; healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;]   Choose the correct MODEL depending on which cloud provider you are using.  info Choosing the Right Model For AWS Bedrock, use a Bedrock model ID (e.g., anthropic.claude-3-sonnet-20240229-v1:0). See available Bedrock models.  Alternatively, Defang supports model mapping through the openai-access-gateway. This takes a model with a Docker naming convention (e.g. ai/llama3.3) and maps it to the closest equivalent on the target platform. If no such match can be found, a fallback can be defined to use a known existing model (e.g. ai/mistral). These environment variables are USE_MODEL_MAPPING (default to true) and FALLBACK_MODEL (no default), respectively.  ","version":"Next","tagName":"h2"},{"title":"Complete Example Compose File​","type":1,"pageTitle":"Deploy OpenAI Apps to AWS Bedrock","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock#complete-example-compose-file","content":" services: app: build: context: . ports: - 3000:3000 environment: OPENAI_API_KEY: OPENAI_BASE_URL: &quot;http://llm/api/v1&quot; MODEL: &quot;anthropic.claude-3-sonnet-20240229-v1:0&quot; healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/&quot;] llm: image: defangio/openai-access-gateway x-defang-llm: true ports: - target: 80 published: 80 mode: host environment: - OPENAI_API_KEY - REGION     ","version":"Next","tagName":"h2"},{"title":"Environment Variable Matrix​","type":1,"pageTitle":"Deploy OpenAI Apps to AWS Bedrock","url":"/docs/tutorials/deploy-openai-apps/aws-bedrock#environment-variable-matrix","content":" Variable\tAWS BedrockREGION\tRequired MODEL\tBedrock model ID or Docker model name, for example meta.llama3-3-70b-instruct-v1:0 or ai/llama3.3    You now have a single app that can:  Talk to AWS BedrockUse the same OpenAI-compatible client codeEasily switch between models or cloud providers by changing a few environment variables ","version":"Next","tagName":"h2"},{"title":"Deploy to Playground","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-playground","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to Playground","url":"/docs/tutorials/deploy-to-playground#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLI  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to Playground","url":"/docs/tutorials/deploy-to-playground#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Deploy​","type":1,"pageTitle":"Deploy to Playground","url":"/docs/tutorials/deploy-to-playground#step-2---deploy","content":" $ defang compose up   If you have not used Defang before, you'll be prompted to log in.   ! Please log in to continue. Please visit http://127.0.0.1:49154 and log in. (Right click the URL or press ENTER to open browser)   info To learn more about how authentication works in defang, check out the authenticating page.  When you do this, you should see something similar to the output below:   * Uploading build context for app * Deploying service app * Monitor your services' status in the defang portal - https://portal.defang.dev/service/app * Tailing logs for deployment ID o59k89vk3qc8 ; press Ctrl+C to detach: * Press V to toggle verbose mode 2024-09-19T10:50:53.572443-07:00 cd Update started for stack jordanstephens-prod1 2024-09-19T10:51:05.536299-07:00 cd Update succeeded in 11.99769745s ; provisioning... 2024-09-19T10:51:39.419693-07:00 app Server running at http://0.0.0.0:3000/ * Service app is in state DEPLOYMENT_COMPLETED and will be available at: - https://jordanstephens-app--3000.prod1.defang.dev * Done.   Now we can go to https://portal.defang.dev/service/app to see our service listed in the Defang portal.   ","version":"Next","tagName":"h2"},{"title":"Deploy to Your Own Cloud","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-your-cloud","content":"","keywords":"","version":"Next"},{"title":"Choose your cloud​","type":1,"pageTitle":"Deploy to Your Own Cloud","url":"/docs/tutorials/deploy-to-your-cloud#choose-your-cloud","content":" A good starting point is to choose which cloud provider you want to deploy to. Defang supports the following cloud providers:  AWSDigitalOceanGCP  The above will link to a tutorial page for that cloud. If you run into any problems, please note that we have an FAQ section for your convenience. ","version":"Next","tagName":"h2"},{"title":"Deploy to Google Cloud Platform (GCP)","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-gcp","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLIgcloud CLIGCP Account Credentials  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Authenticate Defang to use your GCP Account​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-2---authenticate-defang-to-use-your-gcp-account","content":" After signing in to your GCP account, select an existing project or create a new project. Make sure billing is enabled. Then, note down the project ID and set it as environment variable GCP_PROJECT_ID.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-3---deploy","content":" Invoke the defang compose up CLI command with the --provider=gcp flag or set the DEFANG_PROVIDER=gcp environment variable.  For example:  $ defang compose up --provider=gcp   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Inspect your deployment​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-4---inspect-your-deployment","content":" Defang will provision resources in your GCP account and deploy your services. You can inspect the resources created in your GCP Dashboard.    For a deeper discussion of the Defang GCP Architecture, see our GCP docs. ","version":"Next","tagName":"h2"},{"title":"Estimating AWS Deployment Costs","type":0,"sectionRef":"#","url":"/docs/tutorials/estimating-aws-deployment-costs","content":"","keywords":"","version":"Next"},{"title":"Clone the sample​","type":1,"pageTitle":"Estimating AWS Deployment Costs","url":"/docs/tutorials/estimating-aws-deployment-costs#clone-the-sample","content":" defang generate # select `django-postgres` (or any other sample) from the list cd django-postgres # or the name of your project's working directory   ","version":"Next","tagName":"h2"},{"title":"Open the compose file​","type":1,"pageTitle":"Estimating AWS Deployment Costs","url":"/docs/tutorials/estimating-aws-deployment-costs#open-the-compose-file","content":" Let's take a quick look at the compose file. There are two services: db and django. Defang can generate a cost estimate of running the project described by this compose file in the cloud.  Notice that each service has a deploy.resources.reservations property which describes the service's resource requirements. These numbers will have a significant impact on the cost of running these services in the cloud. The estimation defang generates for you will be sensitive to these numbers.  services: db: restart: unless-stopped image: postgres:16 x-defang-postgres: true environment: - POSTGRES_DB=django - POSTGRES_USER=django - POSTGRES_PASSWORD ports: - mode: host target: 5432 published: 5432 healthcheck: test: [&quot;CMD&quot;, &quot;python3&quot;, &quot;-c&quot;, &quot;import sys, urllib.request; urllib.request.urlopen(sys.argv[1]).read()&quot;, &quot;http://localhost:8000/&quot;] deploy: resources: reservations: cpus: '0.5' memory: 256M django: restart: unless-stopped build: ./app ports: - mode: ingress target: 8000 published: 8000 environment: - DB_HOST=db - DEBUG=False - POSTGRES_USER=django - POSTGRES_DB=django - POSTGRES_PASSWORD - SECRET_KEY - ALLOWED_HOSTS depends_on: - db deploy: resources: reservations: cpus: '0.5' memory: 256M   ","version":"Next","tagName":"h2"},{"title":"Generate an estimate​","type":1,"pageTitle":"Estimating AWS Deployment Costs","url":"/docs/tutorials/estimating-aws-deployment-costs#generate-an-estimate","content":" Generating an estimate is easy. All you need to do is run  defang estimate   Defang can deploy a project according to different deployment modes. By default, defang will estimate the cost deploying with the affordable mode. If you would like to increase your application's resiliency, you can deploy will the balanced or high_availability modes. Defang can estimate the cost of deploying using any of these modes.  defang estimate --provider aws [--mode affordable|balanced|high_availability]   Here is an example of the output you would see if you estimated the cost deploying the django-postgres sample using the balanced deployment mode.  defang estimate --provider=aws --mode=balanced * Packaging the project files for django at /Users/defang/samples/samples/django-postgres/app * Generating deployment preview * Preparing estimate Estimate for Deployment Mode: BALANCED This mode strikes a balance between cost and availability. Your application will be deployed with spot instances. Databases will be provisioned using resources optimized for production. Services in the &quot;internal&quot; network will be deployed to a private subnet with a NAT gateway for outbound internet access. Cost Quantity Service Description $16.43 730 Hours (shared) AWSELB USW2-LoadBalancerUsage $32.85 730 Hours (shared) AmazonEC2 USW2-NatGateway-Hours $25.00 100 %Utilized/mo db AmazonRDS USW2-InstanceUsage:db.r5.large $1.62 14600 GB-Hours django AmazonECS USW2-Fargate-EphemeralStorage-GB-Hours (20 GB * 730 hours) $1.62 365 GB-Hours django AmazonECS USW2-Fargate-GB-Hours (0.50 GB * 730 hours) -$1.14 365 GB-Hours django AmazonECS USW2-Fargate-GB-Hours-SpotDiscount (Estimated @ 70%) $7.39 182.50 vCPU-Hours django AmazonECS USW2-Fargate-vCPU-Hours:perCPU (0.25 vCPU * 730 hours) -$5.17 182.50 vCPU-Hours django AmazonECS USW2-Fargate-vCPU-Hours:perCPU-SpotDiscount (Estimated @ 70%) Estimated Monthly Cost: $78.60 (+ usage) Estimate does not include taxes or Discount Programs. To estimate other modes, use defang estimate --mode=affordable|balanced|high_availability For help with warnings, check our FAQ at https://s.defang.io/warnings   This estimate will include a line item for the most significant monthly costs associated with your deployment. Each line item will be associated with a compose service if possible. Some resources will be shared between multiple compose services.  ","version":"Next","tagName":"h2"},{"title":"Deploying your project​","type":1,"pageTitle":"Estimating AWS Deployment Costs","url":"/docs/tutorials/estimating-aws-deployment-costs#deploying-your-project","content":" Now that you have estimated the costs associated with your project. You are ready to deploy to AWS.  defang compose up --provider aws --mode affordable|balanced|high_availability  ","version":"Next","tagName":"h2"},{"title":"Deploy a GPU-Powered Application to AWS","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-with-gpu","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#prerequisites","content":" A Defang AccountThe Defang CLIAWS Account Credentials  ","version":"Next","tagName":"h2"},{"title":"AWS Account with GPU Access​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#aws-account-with-gpu-access","content":" For any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the &quot;Service Quotas&quot; console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are &quot;All G and VT spot instances&quot;.  Timing This process can take a few days for AWS to approve.    ","version":"Next","tagName":"h3"},{"title":"HuggingFace Token​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#huggingface-token","content":" This sample requires a HuggingFace token to download the model. You can get a token by signing up at HuggingFace and then going to your settings to get your token.  ","version":"Next","tagName":"h3"},{"title":"Step 1 - Clone the sample project​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-1---clone-the-sample-project","content":" You'll need to clone the Mistral &amp; vLLM sample to go through this tutorial.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Check your Defang BYOC settings​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-2---check-your-defang-byoc-settings","content":" Make sure you install the latest version of the Defang CLIThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.  tip If you have the AWS CLI installed (which is not required in order to use the Defang CLI), you can verify that you've authenticated to AWS by running aws sts get-caller-identity and see your account ID.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Prepare your Environment​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-3---prepare-your-environment","content":" Log into your Defang account  defang login   Set the HuggingFace token using the defang config command  defang config set --name HF_TOKEN   Configuration stores your sensitive information such as API keys, passwords, and other credentials for you.  ","version":"Next","tagName":"h2"},{"title":"Step 4 - Explore the Compose File​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-4---explore-the-compose-file","content":" The compose.yml file is where you define your services and their configurations.  ","version":"Next","tagName":"h2"},{"title":"The Mistral Service​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#the-mistral-service","content":" In there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects.  services: mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest ports: - mode: host target: 8000 command: [&quot;--host&quot;,&quot;0.0.0.0&quot;,&quot;--model&quot;,&quot;TheBloke/Mistral-7B-Instruct-v0.2-AWQ&quot;,&quot;--quantization&quot;,&quot;awq&quot;,&quot;--dtype&quot;,&quot;auto&quot;,&quot;--tensor-parallel-size&quot;,&quot;1&quot;,&quot;--gpu-memory-utilization&quot;,&quot;.95&quot;,&quot;--max-model-len&quot;,&quot;8000&quot;] deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;] healthcheck: test: [&quot;CMD&quot;,&quot;curl&quot;,&quot;http://localhost:8000/v1/models&quot;] interval: 5m timeout: 30s retries: 10 environment: - HF_TOKEN   Let's break it down.  We start with the latest vLLM Docker image provided by Mistral AI.  mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest   We specify that we require a GPU to run our application.  deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;]   The Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the HF_TOKEN configuration value from Defang.  Specifying the HF_TOKEN in the environment section of the service in the compose.yml file tells Defang to fetch the value from the encrypted configuration store.  environment: - HF_TOKEN   ","version":"Next","tagName":"h3"},{"title":"The UI Service​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#the-ui-service","content":" In this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000.  tip You can see here how Defang's networking works. The mistral service is available at http://mistral:8000, exactly as it would be in a local docker-compose environment.  ui: restart: unless-stopped build: context: ui dockerfile: Dockerfile ports: - mode: ingress target: 3000 deploy: resources: reservations: memory: 256M healthcheck: test: [&quot;CMD&quot;, &quot;wget&quot;, &quot;--spider&quot;, &quot;http://localhost:3000&quot;] interval: 10s timeout: 2s retries: 10 environment: - OPENAI_BASE_URL=http://mistral:8000/v1/   ","version":"Next","tagName":"h3"},{"title":"Step 5 - Deploy to Your Own AWS Account with Defang​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-5---deploy-to-your-own-aws-account-with-defang","content":" Run the following command to deploy your service:  defang compose up --provider=aws  ","version":"Next","tagName":"h2"},{"title":"Deploy Using Pulumi","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-using-pulumi","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#pre-requisites","content":" A Defang AccountPulumi CLIThe Defang CLIThe Defang Pulumi Provider  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Authenticate With Defang​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-1---authenticate-with-defang","content":" Make sure you are logged into the Defang CLI. Don't worry about the Pulumi CLI for now.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Configure the Pulumi Backend​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-2---configure-the-pulumi-backend","content":" Navigate to your project directly. (If you don't have a project yet, try one of our samples)  Pulumi uses the pulumi login command to select a backend. In this tutorial, we will use the Local Filesystem backend for simplicity. When you are ready to deploy to production, you will probably want to look into other Pulumi backend options.  Run the following command to &quot;login&quot; to the filesystem backend in the local directory.  pulumi login file://./   This will make the Pulumi CLI store the state of your infrastructure in the current directory.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Initialize the Pulumi Project​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-3---initialize-the-pulumi-project","content":" Run the following command to set your encryption passphrase for this terminal session:  export PULUMI_CONFIG_PASSPHRASE=&quot;super-secure-passphrase&quot;   Now let's initialize the Pulumi project:  pulumi new typescript -y --force   This will create a new Pulumi project in the current directory and will create a Pulumi stack called dev by default. We use the --force flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI).  Run the following command to add to the .gitignore file:  echo &quot;.pulumi&quot; &gt;&gt; .gitignore   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Write Your Pulumi Code​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-4---write-your-pulumi-code","content":" Create an index.ts file to contain your Pulumi code. This code will describe our services, our service's dependencies, and our service's configuration.  import * as defang from '@defang-io/pulumi-defang/lib'; export const service = new defang.DefangService('minio', { name: 'minio', image: 'quay.io/minio/minio', // starts the server with the console address set to :9001 command: ['server', '--console-address', ':9001', '/data'], // Set the root username environment: { MINIO_ROOT_USER: 'minio', }, secrets: [ // Set the root password as a secret which will be encrypted at rest { source: 'MINIO_ROOT_PASSWORD', value: 'minio123', }, ], // Run a healthcheck every 30 seconds healthcheck: { test: ['CMD', 'curl', 'http://localhost:9000/minio/health/live'], interval: 30, timeout: 5, retries: 3, }, // Expose the server on port 9000 and the console on port 9001 ports: [ { target: 9000, protocol: 'http', mode: 'ingress', }, { target: 9001, protocol: 'http', mode: 'ingress', }, ], });   ","version":"Next","tagName":"h2"},{"title":"Step 5 - Deploy to Defang​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-5---deploy-to-defang","content":" Now we're ready to deploy to Defang with Pulumi! Run the following command to deploy your service:  pulumi up --stack=dev   ","version":"Next","tagName":"h2"},{"title":"Step 6 - Monitor the Deployment​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-6---monitor-the-deployment","content":" You can monitor the deployment by running the following command:  defang tail --name minio   ","version":"Next","tagName":"h2"},{"title":"Logging Into Minio​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#logging-into-minio","content":" The Defang Playground will give you a domain, which you can obtain by running the following command:  defang ls | grep 'minio.*9001'   If you navigate to the domain in your browser, you will be prompted to log in. Use the username minio and the password minio123.  ","version":"Next","tagName":"h3"},{"title":"Clean Up​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#clean-up","content":" To clean up the deployment, run the following command:  pulumi destroy --stack=dev     See the Pulumi concept docs for more information about the Defang Pulumi Provider. ","version":"Next","tagName":"h3"},{"title":"Generate Project Outlines With AI","type":0,"sectionRef":"#","url":"/docs/tutorials/generate-new-code-using-ai","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Use the defang generate command in the CLI​","type":1,"pageTitle":"Generate Project Outlines With AI","url":"/docs/tutorials/generate-new-code-using-ai#step-1---use-the-defang-generate-command-in-the-cli","content":" Here you can describe what you would like the service to do and the CLI will then generate a project outline with all the files required to make it deployable with Defang.  In this tutorial, we'll use the following prompt to describe our service:  &quot;A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.&quot;  defang generate ? Choose the language you'd like to use: [Use arrows to move, type to filter, ? for more help] &gt; Nodejs Golang Python ? Choose a sample service: Generate with AI ? Please describe the service you'd like to build: [? for help] A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response. ? What folder would you like to create the service in? [? for help] (service1) project1   This will generate the different files required to start your project based on your prompt and the language selected.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Review the Code​","type":1,"pageTitle":"Generate Project Outlines With AI","url":"/docs/tutorials/generate-new-code-using-ai#step-2---review-the-code","content":" Change into the new project folder:  cd project1   You can open the files in a code editor to review or make changes as needed before deploying the service.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Build and Deploy​","type":1,"pageTitle":"Generate Project Outlines With AI","url":"/docs/tutorials/generate-new-code-using-ai#step-3---build-and-deploy","content":" defang compose up  ","version":"Next","tagName":"h2"},{"title":"Estimating GCP Deployment Costs","type":0,"sectionRef":"#","url":"/docs/tutorials/estimating-gcp-deployment-costs","content":"","keywords":"","version":"Next"},{"title":"Clone the sample​","type":1,"pageTitle":"Estimating GCP Deployment Costs","url":"/docs/tutorials/estimating-gcp-deployment-costs#clone-the-sample","content":" defang generate # select `django-postgres` (or any other sample) from the list cd django-postgres # or the name of your project's working directory   ","version":"Next","tagName":"h2"},{"title":"Open the compose file​","type":1,"pageTitle":"Estimating GCP Deployment Costs","url":"/docs/tutorials/estimating-gcp-deployment-costs#open-the-compose-file","content":" Let's take a quick look at the compose file. There are two services: db and django. Defang can generate a cost estimate of running the project described by this compose file in the cloud.  Notice that each service has a deploy.resources.reservations property which describes the service's resource requirements. These numbers will have a significant impact on the cost of running these services in the cloud. The estimation defang generates for you will be sensitive to these numbers.  services: db: restart: unless-stopped image: postgres:16 x-defang-postgres: true environment: - POSTGRES_DB=django - POSTGRES_USER=django - POSTGRES_PASSWORD ports: - mode: host target: 5432 published: 5432 healthcheck: test: [&quot;CMD&quot;, &quot;python3&quot;, &quot;-c&quot;, &quot;import sys, urllib.request; urllib.request.urlopen(sys.argv[1]).read()&quot;, &quot;http://localhost:8000/&quot;] deploy: resources: reservations: cpus: '0.5' memory: 256M django: restart: unless-stopped build: ./app ports: - mode: ingress target: 8000 published: 8000 environment: - DB_HOST=db - DEBUG=False - POSTGRES_USER=django - POSTGRES_DB=django - POSTGRES_PASSWORD - SECRET_KEY - ALLOWED_HOSTS depends_on: - db deploy: resources: reservations: cpus: '0.5' memory: 256M   ","version":"Next","tagName":"h2"},{"title":"Generate an estimate​","type":1,"pageTitle":"Estimating GCP Deployment Costs","url":"/docs/tutorials/estimating-gcp-deployment-costs#generate-an-estimate","content":" Generating an estimate is easy. All you need to do is run  defang estimate   Defang can deploy a project according to different deployment modes. By default, defang will estimate the cost deploying with the affordable mode. If you would like to increase your application's resiliency, you can deploy will the balanced or high_availability modes. Defang can estimate the cost of deploying using any of these modes.  defang estimate --provider=gcp [--mode affordable|balanced|high_availability]   Here is an example of the output you would see if you estimated the cost deploying the django-postgres sample using the balanced deployment mode.  defang estimate --provider=gcp --mode=balanced * Packaging the project files for django at /Users/defang/samples/samples/django-postgres/app * Generating deployment preview * Preparing estimate Estimate for Deployment Mode: BALANCED This mode strikes a balance between cost and availability. Your application will be deployed with spot instances. Databases will be provisioned using resources optimized for production. Services in the &quot;internal&quot; network will be deployed to a private subnet with a NAT gateway for outbound internet access. COST QUANTITY SERVICE DESCRIPTION $18.00 720 Hours (shared) Global Cloud Load Balancer Forwarding Rule (720 hours) $7.56 720 vCPU-Hours db CloudSQL for PostgreSQL (1 vCPU * 720 Hours) $18.00 720 Hours private-lb Cloud Load Balancer Forwarding Rule (720 hours) $0.00 0 GB-second django Cloud Run Active Time Memory ((first 360,000 GB-seconds free per month)) $0.00 0 vCPU-second django Cloud Run Active Time vCPU ((first 180,000 vCPU-seconds free per month)) $0.00 0 Requests django Cloud Run Requests ((first 2 million requests free per month)) Estimated Monthly Cost: $43.56 (+ usage) Estimate does not include taxes or Discount Programs. To estimate other modes, use defang estimate --mode=affordable|balanced|high_availability For help with warnings, check our FAQ at https://s.defang.io/warnings   This estimate will include a line item for the most significant monthly costs associated with your deployment. Each line item will be associated with a compose service if possible. Some resources will be shared between multiple compose services.  note GCP Cloud Run is billed based on usage, so Cloud Run line items will show as $0.00 in the estimate.  ","version":"Next","tagName":"h2"},{"title":"Deploying your project​","type":1,"pageTitle":"Estimating GCP Deployment Costs","url":"/docs/tutorials/estimating-gcp-deployment-costs#deploying-your-project","content":" Now that you have estimated the costs associated with your project. You are ready to deploy to GCP.  defang compose up --provider gcp --mode affordable|balanced|high_availability  ","version":"Next","tagName":"h2"},{"title":"Monitoring Your Services","type":0,"sectionRef":"#","url":"/docs/tutorials/monitoring-your-services","content":"","keywords":"","version":"Next"},{"title":"Status​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#status","content":" When deploying to Playground, you can monitor your service status from the Defang Portal.  When deploying to your own cloud, the primary way to monitor your services is through your cloud provider's dashboard. However, Defang does provide some tools for monitoring your service logs.  ","version":"Next","tagName":"h2"},{"title":"Logs​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#logs","content":" When deploying to Playground, your service's logs may be viewed in the Defang Portal.  By default when deploying, including to your own cloud, all output (stdout and stderr) from your app is logged and accessible via the Defang CLI. You can view these logs in real-time or for a time in the past. You can view logs for all your services, one service, or even one specific deployment of a service.  ","version":"Next","tagName":"h2"},{"title":"Tailing Live Logs For All Services​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#tailing-live-logs-for-all-services","content":" $ defang tail   ","version":"Next","tagName":"h3"},{"title":"Tailing Logs Since a Specific Time​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#tailing-logs-since-a-specific-time","content":" $ defang tail --since 1h   ","version":"Next","tagName":"h3"},{"title":"Tailing Logs For a Service​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#tailing-logs-for-a-service","content":" $ defang tail --name service-name   ","version":"Next","tagName":"h3"},{"title":"Build Time Logs​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#build-time-logs","content":" $ defang logs --type=build   All of the above flags can be combined to get the exact logs you need. See the CLI reference for defang tail for more information.  info To learn more about observability in Defang, check out the Observability page.Note that the Defang Portal only displays services deployed to Defang Playground. ","version":"Next","tagName":"h3"},{"title":"Setting Up Your GCP Account","type":0,"sectionRef":"#","url":"/docs/tutorials/setting_up_your_gcp_account","content":"","keywords":"","version":"Next"},{"title":"Step 1: Create Your GCP Account​","type":1,"pageTitle":"Setting Up Your GCP Account","url":"/docs/tutorials/setting_up_your_gcp_account#step-1-create-your-gcp-account","content":" Start by creating a Google Cloud account using the GCP account creation flow. If you already have an account skip to the next step.  Google GCP sign up page    ","version":"Next","tagName":"h3"},{"title":"Step 2: Create a GCP Project​","type":1,"pageTitle":"Setting Up Your GCP Account","url":"/docs/tutorials/setting_up_your_gcp_account#step-2-create-a-gcp-project","content":" To deploy apps using Defang, you need a GCP project. Projects help organize related resources such as services, IAM policies, quotas, and billing.  If you already have a project, skip to Step 3.  To create a new project:  Visit the GCP Console.Click the project selector button (it may say &quot;Select a project&quot; or display a previous project name).  Select project button to open the project dialog  Follow the prompts to create a new project.  info Take note of your Project ID — you’ll need it later when setting the GCP_PROJECT_ID environment variable.  Create a new project in the dialog    ","version":"Next","tagName":"h3"},{"title":"Step 3: Create Your Billing Account​","type":1,"pageTitle":"Setting Up Your GCP Account","url":"/docs/tutorials/setting_up_your_gcp_account#step-3-create-your-billing-account","content":" Billing accounts let Google allocate costs to specific entities or users. You’ll need one to deploy services.  In the GCP Console, open the navigation menu.Select Billing.  Billing menu option  In the billing side panel, select Manage billing accounts, then click Create account.Follow the steps to create a billing account. A credit card is required.  Billing management page    ","version":"Next","tagName":"h3"},{"title":"Step 4: Link Your Project to the Billing Account​","type":1,"pageTitle":"Setting Up Your GCP Account","url":"/docs/tutorials/setting_up_your_gcp_account#step-4-link-your-project-to-the-billing-account","content":" Once your project and billing account are created, link them together:  In the GCP Console, select your project from the project selector.Open the Billing section again from the left sidebar.Click Link a billing account.  Link billing account dialog  Choose the billing account to link.  Select a billing account to link    ","version":"Next","tagName":"h3"},{"title":"Step 5: Set Up Your GCP CLI​","type":1,"pageTitle":"Setting Up Your GCP Account","url":"/docs/tutorials/setting_up_your_gcp_account#step-5-set-up-your-gcp-cli","content":" To complete your setup, install the gcloud CLI by following the installation guide.  After installation, authenticate with:  gcloud auth application-default login   This will generate your application default credentials used during deployment.    Now you're ready to deploy! See the Deploy to GCP tutorial for next steps. ","version":"Next","tagName":"h3"},{"title":"Scaling Your Services","type":0,"sectionRef":"#","url":"/docs/tutorials/scaling-your-services","content":"","keywords":"","version":"Next"},{"title":"Scaling Resource Reservations​","type":1,"pageTitle":"Scaling Your Services","url":"/docs/tutorials/scaling-your-services#scaling-resource-reservations","content":" In order to scale a service's resource reservations, you will need to update the deploy section associated with your service in your application's compose.yaml file.  Use the resources section to specify the resource reservation requirements. These are the minimum resources which must be available for the platform to provision your service. You may end up with more resources than you requested, but you will never be allocated less.  For example, if my app needs 2 CPUs and 512MB of memory, I would update the compose.yaml file like this:  services: my_service: image: my_app:latest deploy: resources: reservations: cpus: &quot;2&quot; memory: &quot;512M&quot;   The minimum resources which can be reserved:  Resource\tMinimumCPUs\t0.5 Memory\t512M  info Note that the memory field must be specified as a &quot;byte value string&quot; using the {amount}{byte unit} format. The supported units are b (bytes), k or kb (kilobytes), m or mb (megabytes) and g or gb (gigabytes).  ","version":"Next","tagName":"h2"},{"title":"Scaling with Replicas​","type":1,"pageTitle":"Scaling Your Services","url":"/docs/tutorials/scaling-your-services#scaling-with-replicas","content":" In order to scale a service's replica count, you will need to update the deploy section associated with your service in your application's compose.yaml file.  Use the replicas section to specify the number of containers which should be running at any given time.  For example, if I want to run 3 instances of my app, I would update the compose.yaml file like this:  services: my_service: image: my_app:latest deploy: replicas: 3   ","version":"Next","tagName":"h2"},{"title":"Autoscaling Your Services​","type":1,"pageTitle":"Scaling Your Services","url":"/docs/tutorials/scaling-your-services#autoscaling-your-services","content":" Autoscaling allows your services to automatically adjust the number of replicas based on CPU usage — helping you scale up during traffic spikes and scale down during quieter periods.  Note: Autoscaling is only available to Pro tier or higher users.  ","version":"Next","tagName":"h2"},{"title":"Enabling Autoscaling​","type":1,"pageTitle":"Scaling Your Services","url":"/docs/tutorials/scaling-your-services#enabling-autoscaling","content":" To enable autoscaling for a service, add the x-defang-autoscaling: true extension under the service definition in your compose.yaml file and remove the replicas field in yourdeploy mapping, if present. Autoscaling is available in staging and production deployments modes only.  Example:  services: web: image: myorg/web:latest ports: - 80:80 x-defang-autoscaling: true   Once deployed, your services' CPU usage is monitored for how much load it is handling, sustained high loads will result in more replicas being started.  Requirements  BYOC, your own cloud platform account.You must be on the Pro or higher plan to use autoscaling. (Defang plans)replicas must NOT be definedOnly staging and production deployment modes supported. (Deployment modes)The service must be stateless or able to run in multiple instances. (Scaling)  Best Practices  Design your services to be horizontally scalable. (12 Factor App)Use shared or external storage if your service writes data. (e.g. Postgres or Redis managed services ) ","version":"Next","tagName":"h3"},{"title":"Migrating from Heroku","type":0,"sectionRef":"#","url":"/docs/tutorials/migrating-from-heroku","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#pre-requisites","content":" A Defang AccountThe Defang CLIThe Heroku CLI (optional, but recommended)Cloud Account Credentials AWSGCP  tip Do I need a Dockerfile? No, Defang will use Railpack to automatically build an OCI container for your application based on the source code and dependencies. Do I need a Docker Compose file? Defang does require a Docker Compose file to deploy your application, but you don't need to write one from scratch. Defang will automatically generate one for your Heroku application.  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Generating a Docker Compose file​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#step-1---generating-a-docker-compose-file","content":" Navigate to your project's working directory:  $ cd ~/w/vast-badlands $ ls Gemfile Procfile\tRakefile\tbin config.ru\tlib public test vendor Gemfile.lock\tREADME.md\tapp config db log storage tmp   Then run defang init and select Migrate from heroku:  $ defang init ? How would you like to start? [Use arrows to move, type to filter] Generate with AI Clone a sample &gt; Migrate from Heroku   A web browser may open, prompting you to login to Defang. Then, if you have the heroku CLI installed, you may be prompted to login with Heroku. Defang will delegate to the heroku CLI to create an authentication token so that it can access information about your deployment. The token defang creates will only be valid for 5 minutes.  tip What if I don't have the Heroku CLI installed?defang will prompt you for an auth token. You can paste it into the prompt after creating one in the Heroku Dashboard.  At this point, defang will fetch a list of your Heroku applications and prompt you to select the one you would like to migrate.  $ defang init ? How would you like to start? Migrate from Heroku * Ok, let's create a compose file for your existing deployment. * The Heroku CLI is installed, we'll use it to generate a short-lived authorization token ? Select the Heroku application to use as a source: [Use arrows to move, type to filter] &gt; vast-badlands-staging vast-badlands-production   Then, defang will request some information about your application from the Heroku API. This information will be used to generate a compose.yaml file which can then be deployed with Defang.  defang init ? How would you like to start? Migrate from heroku * Ok, let's create a compose file for your existing deployment. * The Heroku CLI is installed, we'll use it to generate a short-lived authorization token ? Select the Heroku application to use as a source: vast-badlands-production * Collecting information about &quot;vast-badlands-production&quot;... * Generating compose file... * Compose file written to compose.yaml Check the files in your favorite editor. To deploy this project, run defang compose up   At this point, defang will have generated a compose.yaml file that describes your application and its services. You can review this file in your favorite text editor.  The application I used had a single web dyno:  $ heroku ps -a vast-badlands-production === web (Eco): bin/rails server -p ${PORT:-5000} -e $RAILS_ENV (1)   And a single PostgreSQL database:  heroku addons -a vast-badlands-production Add-on Plan Price Max price State ────────────────────────────────────────── ─────────── ──────────── ───────── ─────── heroku-postgresql (postgresql-rosy-12345) essential-0 ~$0.007/hour $5/month created └─ as DATABASE   The compose.yaml file that defang generated looks like this:  services: postgres: image: postgres:17.4 environment: POSTGRES_DB: eb631mzx93pn27 POSTGRES_USER: postgres POSTGRES_PASSWORD: healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U $POSTGRES_USER&quot;] x-defang-postgres: &quot;true&quot; web: build: context: . command: - bin/rails server -p $PORT -e $RAILS_ENV ports: - &quot;5000:5000&quot; environment: DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB LANG: en_US.UTF-8 RACK_ENV: production RAILS_ENV: production RAILS_LOG_TO_STDOUT: enabled RAILS_SERVE_STATIC_FILES: enabled SECRET_KEY_BASE: PORT: 5000 POSTGRES_PASSWORD: $POSTGRES_PASSWORD depends_on: postgres: condition: service_healthy deploy: resources: limits: cpus: '1' memory: 512M release: build: context: . command: - bin/rails db:migrate environment: DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB RAILS_ENV: production SECRET_KEY_BASE: depends_on: postgres: condition: service_healthy deploy: resources: limits: cpus: '1' memory: 512M restart: &quot;no&quot;   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Deploying to your cloud account​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#step-2---deploying-to-your-cloud-account","content":" Now all you need to do is deploy your application to the cloud.  ","version":"Next","tagName":"h2"},{"title":"Deploying to AWS​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#deploying-to-aws","content":" If you're deploying to AWS, you'll need to invoke defang compose up --provider aws with your AWS access credentials in the environment:  Run the following command AWS_REGION=us-west-2 AWS_PROFILE=default defang compose up --provider aws * Using Defang Playground provider from stored preference ! Defang cannot monitor status of the following managed service(s): [postgres]. To check if the managed service is up, check the status of the service which depends on it. * Packaging the project files for release at /Users/defang/w/vast-badlands * Uploading the project files for release * Packaging the project files for web at /Users/defang/w/vast-badlands * Uploading the project files for web * Monitor your services' status in the defang portal - https://portal.defang.io/service/postgres - https://portal.defang.io/service/release - https://portal.defang.io/service/web * Tailing logs for deployment ID qhjwfbi6p1re ; press Ctrl+C to detach: 2025-08-28T14:46:14.632-07:00 cd Update started for stack defang-prod1 2025-08-28T14:46:17.801-07:00 cd ** Updating service &quot;postgres&quot; 2025-08-28T14:46:17.869-07:00 cd ** Building image for &quot;release&quot;... 2025-08-28T14:46:17.931-07:00 cd ** Building image for &quot;web&quot;... 2025-08-28T14:46:17.946-07:00 cd ** Updating service &quot;web&quot; 2025-08-28T14:46:20.003-07:00 cd ** Updated service &quot;postgres&quot; to revision 1 2025-08-28T14:47:00.757-07:00 postgres The files belonging to this database system will be owned by user &quot;postgres&quot;. 2025-08-28T14:47:00.757-07:00 postgres This user must also own the server process. 2025-08-28T14:47:00.758-07:00 postgres The database cluster will be initialized with locale &quot;en_US.utf8&quot;. 2025-08-28T14:47:00.758-07:00 postgres The default database encoding has accordingly been set to &quot;UTF8&quot;. 2025-08-28T14:47:00.758-07:00 postgres The default text search configuration will be set to &quot;english&quot;. 2025-08-28T14:47:00.758-07:00 postgres Data page checksums are disabled. 2025-08-28T14:47:00.758-07:00 postgres fixing permissions on existing directory /var/lib/postgresql/data ... ok 2025-08-28T14:47:00.758-07:00 postgres creating subdirectories ... ok 2025-08-28T14:47:00.758-07:00 postgres selecting dynamic shared memory implementation ... posix 2025-08-28T14:47:00.829-07:00 postgres selecting default &quot;max_connections&quot; ... 100 2025-08-28T14:47:00.924-07:00 postgres selecting default &quot;shared_buffers&quot; ... 128MB 2025-08-28T14:47:00.940-07:00 postgres selecting default time zone ... Etc/UTC 2025-08-28T14:47:00.941-07:00 postgres creating configuration files ... ok 2025-08-28T14:47:01.723-07:00 postgres running bootstrap script ... ok 2025-08-28T14:47:03.232-07:00 postgres performing post-bootstrap initialization ... ok 2025-08-28T14:47:03.368-07:00 postgres initdb: hint: You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb. 2025-08-28T14:47:03.368-07:00 postgres syncing data to disk ... ok 2025-08-28T14:47:03.368-07:00 postgres Success. You can now start the database server using: 2025-08-28T14:47:03.368-07:00 postgres pg_ctl -D /var/lib/postgresql/data -l logfile start 2025-08-28T14:47:03.530-07:00 postgres waiting for server to start....2025-08-28 21:47:03.530 UTC [48] LOG: starting PostgreSQL 17.4 (Debian 17.4-1.pgdg120+2) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit 2025-08-28T14:47:03.533-07:00 postgres 2025-08-28 21:47:03.533 UTC [48] LOG: listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; 2025-08-28T14:47:03.544-07:00 postgres 2025-08-28 21:47:03.544 UTC [51] LOG: database system was shut down at 2025-08-28 21:47:03 UTC 2025-08-28T14:47:03.550-07:00 postgres 2025-08-28 21:47:03.550 UTC [48] LOG: database system is ready to accept connections 2025-08-28T14:47:03.639-07:00 postgres done 2025-08-28T14:47:03.639-07:00 postgres server started 2025-08-28T14:47:04.033-07:00 postgres CREATE DATABASE 2025-08-28T14:47:04.034-07:00 postgres /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/* 2025-08-28T14:47:04.035-07:00 postgres waiting for server to shut down....2025-08-28 21:47:04.035 UTC [48] LOG: received fast shutdown request 2025-08-28T14:47:04.039-07:00 postgres 2025-08-28 21:47:04.039 UTC [48] LOG: aborting any active transactions 2025-08-28T14:47:04.040-07:00 postgres 2025-08-28 21:47:04.040 UTC [48] LOG: background worker &quot;logical replication launcher&quot; (PID 54) exited with exit code 1 2025-08-28T14:47:04.043-07:00 postgres 2025-08-28 21:47:04.042 UTC [49] LOG: shutting down 2025-08-28T14:47:04.045-07:00 postgres 2025-08-28 21:47:04.045 UTC [49] LOG: checkpoint starting: shutdown immediate 2025-08-28T14:47:04.158-07:00 postgres 2025-08-28 21:47:04.158 UTC [49] LOG: checkpoint complete: wrote 921 buffers (5.6%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.097 s, sync=0.008 s, total=0.116 s; sync files=301, longest=0.003 s, average=0.001 s; distance=4238 kB, estimate=4238 kB; lsn=0/1908990, redo lsn=0/1908990 2025-08-28T14:47:04.164-07:00 postgres 2025-08-28 21:47:04.164 UTC [48] LOG: database system is shut down 2025-08-28T14:47:03.368-07:00 postgres initdb: warning: enabling &quot;trust&quot; authentication for local connections 2025-08-28T14:47:04.235-07:00 postgres done 2025-08-28T14:47:04.235-07:00 postgres server stopped 2025-08-28T14:47:04.238-07:00 postgres PostgreSQL init process complete; ready for start up. 2025-08-28T14:47:04.269-07:00 postgres 2025-08-28 21:47:04.269 UTC [1] LOG: starting PostgreSQL 17.4 (Debian 17.4-1.pgdg120+2) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit 2025-08-28T14:47:04.323-07:00 postgres 2025-08-28 21:47:04.323 UTC [1] LOG: listening on IPv4 address &quot;0.0.0.0&quot;, port 5432 2025-08-28T14:47:04.324-07:00 postgres 2025-08-28 21:47:04.323 UTC [1] LOG: listening on IPv6 address &quot;::&quot;, port 5432 2025-08-28T14:47:04.329-07:00 postgres 2025-08-28 21:47:04.329 UTC [1] LOG: listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; 2025-08-28T14:47:04.338-07:00 postgres 2025-08-28 21:47:04.338 UTC [64] LOG: database system was shut down at 2025-08-28 21:47:04 UTC 2025-08-28T14:47:04.345-07:00 postgres 2025-08-28 21:47:04.345 UTC [1] LOG: database system is ready to accept connections 2025-08-28T14:51:54.551-07:00 cd ** Build succeeded for &quot;web&quot; 2025-08-28T14:51:56.626-07:00 cd ** Build succeeded for &quot;release&quot; 2025-08-28T14:52:04.407-07:00 postgres 2025-08-28 21:52:04.407 UTC [62] LOG: checkpoint starting: time 2025-08-28T14:52:06.028-07:00 postgres 2025-08-28 21:52:06.027 UTC [62] LOG: checkpoint complete: wrote 19 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.609 s, sync=0.004 s, total=1.621 s; sync files=11, longest=0.003 s, average=0.001 s; distance=28 kB, estimate=28 kB; lsn=0/190FA40, redo lsn=0/190F9E8 2025-08-28T14:52:32.418-07:00 release I, [2025-08-28T21:52:32.392682 #1] INFO -- : Migrating to CreateMembers (20240416182733) 2025-08-28T14:52:32.418-07:00 release == 20240416182733 CreateMembers: migrating ==================================== 2025-08-28T14:52:32.418-07:00 release -- create_table(:members) 2025-08-28T14:52:32.418-07:00 release -&gt; 0.0029s 2025-08-28T14:52:32.418-07:00 release == 20240416182733 CreateMembers: migrated (0.0030s) =========================== 2025-08-28T14:52:32.418-07:00 release I, [2025-08-28T21:52:32.400192 #1] INFO -- : Migrating to DeviseCreateUsers (20240417165503) 2025-08-28T14:52:32.418-07:00 release == 20240417165503 DeviseCreateUsers: migrating ================================ 2025-08-28T14:52:32.418-07:00 release -- create_table(:users) 2025-08-28T14:52:32.418-07:00 release -&gt; 0.0039s 2025-08-28T14:52:32.418-07:00 release -- add_index(:users, :email, {:unique=&gt;true}) 2025-08-28T14:52:32.418-07:00 release -&gt; 0.0013s 2025-08-28T14:52:32.418-07:00 release -- add_index(:users, :reset_password_token, {:unique=&gt;true}) 2025-08-28T14:52:32.418-07:00 release -&gt; 0.0008s 2025-08-28T14:52:32.418-07:00 release == 20240417165503 DeviseCreateUsers: migrated (0.0062s) ======================= 2025-08-28T14:52:32.418-07:00 release I, [2025-08-28T21:52:32.409275 #1] INFO -- : Migrating to AddUserIdToMembers (20240417202202) 2025-08-28T14:52:32.418-07:00 release == 20240417202202 AddUserIdToMembers: migrating =============================== 2025-08-28T14:52:32.418-07:00 release -- add_column(:members, :user_id, :integer) 2025-08-28T14:52:32.418-07:00 release -&gt; 0.0012s 2025-08-28T14:52:32.418-07:00 release -- add_index(:members, :user_id) 2025-08-28T14:52:32.418-07:00 release -&gt; 0.0009s 2025-08-28T14:52:32.418-07:00 release == 20240417202202 AddUserIdToMembers: migrated (0.0022s) ====================== 2025-08-28T14:52:45.061-07:00 cd ** Updated service &quot;web&quot; to revision 1 2025-08-28T14:52:49.353-07:00 cd Update succeeded in 6m34.758057781s ; provisioning... 2025-08-28T14:53:32.118-07:00 web =&gt; Booting Puma 2025-08-28T14:53:32.119-07:00 web =&gt; Rails 7.1.3.2 application starting in production 2025-08-28T14:53:32.119-07:00 web =&gt; Run `bin/rails server --help` for more startup options 2025-08-28T14:53:34.228-07:00 web Puma starting in single mode... 2025-08-28T14:53:34.228-07:00 web * Puma version: 6.4.2 (ruby 3.3.4-p94) (&quot;The Eagle of Durango&quot;) 2025-08-28T14:53:34.228-07:00 web * Min threads: 5 2025-08-28T14:53:34.228-07:00 web * Max threads: 5 2025-08-28T14:53:34.228-07:00 web * Environment: production 2025-08-28T14:53:34.228-07:00 web * PID: 1 2025-08-28T14:53:34.230-07:00 web * Listening on http://0.0.0.0:5000 2025-08-28T14:53:34.232-07:00 web Use Ctrl-C to stop   See our full tutorial on deploying to AWS.  ","version":"Next","tagName":"h3"},{"title":"Deploying to GCP​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#deploying-to-gcp","content":" If you're deploying to GCP, you'll need to invoke defang compose up --provider gcp with your GCP access credentials in the environment:  Run the following command GCP_PROJECT_ID=my-project-123456 defang compose up --provider gcp * Using Google Cloud Platform provider from command line flag ! Defang cannot monitor status of the following managed service(s): [postgres release]. To check if the managed service is up, check the status of the service which depends on it. ! service &quot;postgres&quot;: missing memory reservation; using provider-specific defaults. Specify deploy.resources.reservations.memory to avoid out-of-memory errors ! service &quot;web&quot;: ingress port without healthcheck defaults to GET / HTTP/1.1 * Packaging the project files for web at /Users/defang/wk/vast-badlands * Uploading the project files for web * Setting up defang CD in GCP project my-project-123456, this could take a few minutes * Packaging the project files for release at /Users/defang/wk/vast-badlands * Uploading the project files for release * Tailing logs for deployment ID fgdh4ct0hopz ; press Ctrl+C to detach: * Showing only build logs and runtime errors. Press V to toggle verbose mode. 2025-09-08T10:28:08.634-04:00 cd ** Update started for stack beta 2025-09-08T10:28:17.990-04:00 cd ** Updating service &quot;postgres&quot; 2025-09-08T10:28:44.773-04:00 cd ** Building image for &quot;release&quot;... 2025-09-08T10:28:58.012-04:00 cd ** Building image for &quot;web&quot;... 2025-09-08T10:47:02.479-04:00 release I, [2025-09-08T14:47:02.409371 #1] INFO -- : Migrating to CreateMembers (20240416182733) 2025-09-08T10:47:02.479-04:00 release == 20240416182733 CreateMembers: migrating ==================================== 2025-09-08T10:47:02.479-04:00 release -- create_table(:members) 2025-09-08T10:47:02.479-04:00 release -&gt; 0.0073s 2025-09-08T10:47:02.479-04:00 release == 20240416182733 CreateMembers: migrated (0.0073s) =========================== 2025-09-08T10:47:02.479-04:00 release I, [2025-09-08T14:47:02.432075 #1] INFO -- : Migrating to DeviseCreateUsers (20240417165503) 2025-09-08T10:47:02.479-04:00 release == 20240417165503 DeviseCreateUsers: migrating ================================ 2025-09-08T10:47:02.479-04:00 release -- create_table(:users) 2025-09-08T10:47:02.479-04:00 release -&gt; 0.0080s 2025-09-08T10:47:02.479-04:00 release -- add_index(:users, :email, {:unique=&gt;true}) 2025-09-08T10:47:02.479-04:00 release -&gt; 0.0022s 2025-09-08T10:47:02.479-04:00 release -- add_index(:users, :reset_password_token, {:unique=&gt;true}) 2025-09-08T10:47:02.479-04:00 release -&gt; 0.0021s 2025-09-08T10:47:02.479-04:00 release == 20240417165503 DeviseCreateUsers: migrated (0.0124s) ======================= 2025-09-08T10:47:02.479-04:00 release I, [2025-09-08T14:47:02.458370 #1] INFO -- : Migrating to AddUserIdToMembers (20240417202202) 2025-09-08T10:47:02.479-04:00 release == 20240417202202 AddUserIdToMembers: migrating =============================== 2025-09-08T10:47:02.479-04:00 release -- add_column(:members, :user_id, :integer) 2025-09-08T10:47:02.479-04:00 release -&gt; 0.0044s 2025-09-08T10:47:02.479-04:00 release -- add_index(:members, :user_id) 2025-09-08T10:47:02.479-04:00 release -&gt; 0.0019s 2025-09-08T10:47:02.479-04:00 release == 20240417202202 AddUserIdToMembers: migrated (0.0064s) ====================== 2025-09-08T10:48:16.157-04:00 web =&gt; Booting Puma 2025-09-08T10:48:16.157-04:00 web =&gt; Rails 7.1.3.2 application starting in production 2025-09-08T10:48:16.157-04:00 web =&gt; Run `bin/rails server --help` for more startup options 2025-09-08T10:48:18.625-04:00 web [1] Puma starting in cluster mode... 2025-09-08T10:48:18.625-04:00 web [1] * Puma version: 6.4.2 (ruby 3.3.4-p94) (&quot;The Eagle of Durango&quot;) 2025-09-08T10:48:18.625-04:00 web [1] * Min threads: 5 2025-09-08T10:48:18.625-04:00 web [1] * Max threads: 5 2025-09-08T10:48:18.625-04:00 web [1] * Environment: production 2025-09-08T10:48:18.626-04:00 web [1] * Master PID: 1 2025-09-08T10:48:18.626-04:00 web [1] * Workers: 2 2025-09-08T10:48:18.626-04:00 web [1] * Restarts: (✔) hot (✔) phased 2025-09-08T10:48:18.626-04:00 web [1] * Listening on http://0.0.0.0:5000 2025-09-08T10:48:18.627-04:00 web [1] Use Ctrl-C to stop   ","version":"Next","tagName":"h3"},{"title":"Deploying to DigitalOcean​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#deploying-to-digitalocean","content":" If you're deploying to GCP, you'll need to invoke defang compose up --provider digitalocean with your DigitalOcean access credentials in the environment:  warning Some Heroku applications may require some manual adjustments to be deployed to DigitalOcean with Defang. Dockerfiles are required for deployments to DigitalOcean, so you may need to create one if your application does not already have one. Support for automatic Dockerfile generation is coming soon with Railpack. Defang also does not yet support one-off jobs on DigitalOcean, so you will need to modify your services to run these tasks during initialization.  export DIGITALOCEAN_TOKEN=your_digitalocean_token export SPACES_ACCESS_KEY_ID=your_spaces_access_key_id export SPACES_SECRET_ACCESS_KEY=your_spaces_secret_access_key $ defang compose up --provider digitalocean   ","version":"Next","tagName":"h3"},{"title":"Step 3 - Migrating your data​","type":1,"pageTitle":"Migrating from Heroku","url":"/docs/tutorials/migrating-from-heroku#step-3---migrating-your-data","content":" tip If you need help with your migration, please reach out to our support team on Discord. ","version":"Next","tagName":"h2"},{"title":"Updating Your Services","type":0,"sectionRef":"#","url":"/docs/tutorials/updating-your-services","content":"","keywords":"","version":"Next"},{"title":"Updating a Service​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#updating-a-service","content":" To update your app (for example, updating the base image of your container, or making changes to your code) all you have to do is run the defang compose up command and it will build and deploy a new version.  ","version":"Next","tagName":"h2"},{"title":"Deploying New Services or Removing Existing Services​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#deploying-new-services-or-removing-existing-services","content":" If you are using Compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.  ","version":"Next","tagName":"h2"},{"title":"Deployment Modes​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#deployment-modes","content":" Defang offers multiple deployment modes. You can specify which mode you would like to be used when you deploy with the --mode flag on the CLI. The default mode is affordable. You may also specify balanced or high_availability.  $ defang compose up --mode=production   ","version":"Next","tagName":"h2"},{"title":"Development Mode (Default)​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#development-mode-default","content":" The default deployment mode is development. This is the In this mode, the existing services will be deprovisioned before your new service will be spun up. This means that there will be a short downtime while the new service is being provisioned.  ","version":"Next","tagName":"h3"},{"title":"Production Mode (Zero-downtime Updates)​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#production-mode-zero-downtime-updates","content":" If you are running in production mode, the update will be done with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.  ","version":"Next","tagName":"h3"},{"title":"Deleting your Application​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#deleting-your-application","content":" To delete your app, use defang compose down in your compose file working directory, or use the --project-name flag.  In some cases, particularly on the AWS platform, additional actions may be required. Specifically load balancers may have Deletion Protection on. To turn this off in the AWS Console for EC2 Load Balancers, follow these steps:  Select the load balancer corresponding to the app’s name.Go to the Attributes tab.Click the Edit button.Locate Deletion Protection and disable it.  info For more information on Deployment Modes, see the Deployment Modes concept documentation. ","version":"Next","tagName":"h2"},{"title":"How to Use Your Own Domain With AWS","type":0,"sectionRef":"#","url":"/docs/tutorials/use-your-own-domain-name","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#prerequisites","content":" A Defang AccountThe Defang CLIAWS Account Credentials  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Set up a Hosted Zone in AWS Route 53​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-1---set-up-a-hosted-zone-in-aws-route-53","content":" info If you purchased your domain with AWS, you can skip this step.  For Defang to be able to manage your domain, you need to create a public hosted zone in AWS Route 53. It should list four AWS nameservers and should look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 2 - Configure your DNS settings in your domain registrar​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-2---configure-your-dns-settings-in-your-domain-registrar","content":" info If you purchased your domain with AWS, you can skip this step.  You'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 3 - Set up Your Compose File​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-3---set-up-your-compose-file","content":" In your Compose file, specify the domain name you want to use, for example:  services: web: domainname: nextjs.defang.chewydemos.com build: context: ./web dockerfile: Dockerfile ports: target: 3000 mode: ingress   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Deploy​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-4---deploy","content":" Run the following command to deploy your service:  defang compose up   This will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your Compose file.      For a deeper discussion of how to use a custom domain with Defang, see our Domain concept docs. ","version":"Next","tagName":"h2"},{"title":"Using Codespaces and Gitpod","type":0,"sectionRef":"#","url":"/docs/tutorials/using-codespaces-gitpod","content":"","keywords":"","version":"Next"},{"title":"Using Codespaces With Defang​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#using-codespaces-with-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1 - Clone the Defang Codespace Project​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-1---clone-the-defang-codespace-project","content":" Start by cloning the Defang GitHub-Codespace repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed.  ","version":"Next","tagName":"h3"},{"title":"Step 2 - Create a Codespace​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-2---create-a-codespace","content":" Once you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.    ","version":"Next","tagName":"h3"},{"title":"Step 3 - Open in VS Code Desktop​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-3---open-in-vs-code-desktop","content":" For the defang login command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.    ","version":"Next","tagName":"h3"},{"title":"Step 4 - Run Defang Login​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-4---run-defang-login","content":" Within a VS Code desktop terminal, execute the following command.  defang login   Although it may initially refuse to connect on your localhost, going back will show a &quot;successfully logged in&quot; message, confirming that you're logged into Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 5 - Verify Running Services​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-5---verify-running-services","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services.  ","version":"Next","tagName":"h3"},{"title":"Using Gitpod With Defang​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#using-gitpod-with-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1 - Clone the Defang Gitpod Workspace Project​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-1---clone-the-defang-gitpod-workspace-project","content":" Start by cloning the Defang Gitpod-Workspace repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 2 - Initialize a Gitpod Workspace​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-2---initialize-a-gitpod-workspace","content":" Navigate https://gitpod.io/#&lt;your-repo-url&gt; to create your new workspace. In the repository, we have a YAML file indicating that we are using a pre-built Dockerfile which installs Defang CLI for you.  ","version":"Next","tagName":"h3"},{"title":"Step 3 - Lauch VS Code from Gitpod​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-3---lauch-vs-code-from-gitpod","content":" Open VS Code from Gitpod, you will likely need to have the Gitpod VS Code extension installed.      ","version":"Next","tagName":"h3"},{"title":"Step 4 - Run Defang Login​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-4---run-defang-login-1","content":" Within a VS Code desktop terminal, execute the following command.  defang login   ","version":"Next","tagName":"h3"},{"title":"Step 5 - Verify Running Services​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-5---verify-running-services-1","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services. ","version":"Next","tagName":"h3"},{"title":"Using 1-Click Deploy","type":0,"sectionRef":"#","url":"/docs/tutorials/using-one-click-deploy","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Choose a Sample​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-1---choose-a-sample","content":" Head to our list of samples and click a sample you want to deploy. Then, click on the button that says &quot;1-Click Deploy&quot;.      info Alternatively, you can find the &quot;1-Click Deploy&quot; button located in the README.md file of each sample's GitHub repository.   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Login​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-2---login","content":" For 1-click deployments to work, Defang must have your permission, which you can grant by logging in. If you are already logged in, you will be automatically taken to the next step.    ","version":"Next","tagName":"h2"},{"title":"Step 3 - Create Your Repo​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-3---create-your-repo","content":" Once logged in, you'll be redirected to GitHub. Click the &quot;Create repository button&quot; to create a new repository with the sample project.      ","version":"Next","tagName":"h2"},{"title":"Step 4 - Wait for Deployment to Complete​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-4---wait-for-deployment-to-complete","content":" A Github Action workflow will automatically start running to install Defang and deploy the sample to the Defang Playground. You can see this by going into the &quot;Actions&quot; tab in your GitHub repository.  You can view the status of your deployment in the Defang Portal, or by downloading the Defang CLI. You can also see deployment progress in the &quot;Actions&quot; tab of your GitHub repository:        tip If you decide to make a commit later to a repository created from 1-Click Deploy, then the project will automatically get deployed again to Defang Playground.  When it is completed, you can view your deployed app using the deployment link generated by Defang, which should appear similar to the format below:  https://&lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.defang.dev   ","version":"Next","tagName":"h2"},{"title":"Configuration in 1-Click Deploy​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#configuration-in-1-click-deploy","content":" If the sample you chose requires setting configuration, such as API keys, you can set sensitive config values as secrets in your GitHub repository and the GitHub Action can automatically handle those values for you. Learn how to manage config values with the Defang Github Action. ","version":"Next","tagName":"h3"},{"title":"Samples","type":0,"sectionRef":"#","url":"/docs/samples","content":"","keywords":"","version":"Next"},{"title":"Agentic Autogen​","type":1,"pageTitle":"Samples","url":"/docs/samples#agentic-autogen","content":" This sample shows an agentic Autogen application using Mistral and FastAPI, deployed with Defang. For demonstration purposes, it will require a Mistral AI API key (see Configuration for more details). However, you are free to modify it to use a different LLM, say the Defang OpenAI Access Gateway service, as an alternative. Note that the Vite React frontend is served through the FastAPI backend so that they can be treated as one service in production.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  MISTRAL_API_KEY​  An API key to access the Mistral AI API.  defang config set MISTRAL_API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Agentic Autogen  Short Description: An Autogen agent application using Mistral and FastAPI, deployed with Defang.  Tags: Agent, Autogen, Mistral, FastAPI, Vite, React, Python, JavaScript, AI  Languages: Python, JavaScript  ","version":"Next","tagName":"h3"},{"title":"Agentic LangGraph​","type":1,"pageTitle":"Samples","url":"/docs/samples#agentic-langgraph","content":" This sample demonstrates a LangGraph Agent application deployed with Defang. You can customize the agent's tools as needed. For example, it includes a Tavily Search tool for performing search queries, which requires a TAVILY_API_KEY (see Configuration for setup details).  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-1","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-1","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-1","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  TAVILY_API_KEY​  A Tavily API key for accessing Tavily Search.  defang config set TAVILY_API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-1","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Agentic LangGraph  Short Description: A LangGraph Agent application that can use tools, deployed with Defang.  Tags: Agent, LangGraph, LangChain, AI, OpenAI, Tavily  Languages: TypeScript  ","version":"Next","tagName":"h3"},{"title":"Agentic Strands​","type":1,"pageTitle":"Samples","url":"/docs/samples#agentic-strands","content":" This sample demonstrates a Strands Agent application, deployed with Defang. This Strands Agent can use tools, and is compatible with the Defang OpenAI Access Gateway.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-2","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-2","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-2","content":" For this sample, you will not need to provide any configuration. However, if you ever need to, below is an example of how to do so in Defang:  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-2","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Agentic Strands  Short Description: A Strands Agent application, deployed with Defang.  Tags: Python, Flask, Strands, AI, Agent  Languages: Python  ","version":"Next","tagName":"h3"},{"title":"Angular & Node.js​","type":1,"pageTitle":"Samples","url":"/docs/samples#angular--nodejs","content":" This sample demonstrates how to deploy a full-stack Angular and Node.js application with Defang. It uses Socket.IO for real-time communication. The Docker setup ensures the app can be easily built and deployed.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-3","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLIInstall Node.jsInstall Angular CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-3","content":" For development, we use two local containers, one for the frontend Angular service and one for the backend service in Express. It also uses Caddy as a web server for serving static files.  To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-3","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-3","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Angular &amp; Node.js  Short Description: A full-stack application using Angular for the frontend and Node.js with Socket.IO for the backend, containerized with Docker.  Tags: Angular, Node.js, Socket.IO, TypeScript, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Arduino Flask Wifi Server​","type":1,"pageTitle":"Samples","url":"/docs/samples#arduino-flask-wifi-server","content":" This sample contains an interactive wifi-connected UI program for a SenseCAP Indicator Device, built for an Embedded Systems project at Defang Software Labs.  The device has a square liquid-crystal touch screen display, and a ESP32-S3 chip that can be programmed in an Arduino environment.  The program welcome.ino, acting as a client, pings data every 5 seconds after it is connected to a wifi network. It uses a library called ArduinoHTTPClient. It is also recommended to use Arduino IDE when coding with .ino files. The program UI will display a message that is randomized in color and location on the screen at the same time during pings (every 5 seconds).  The Flask server in web_server.py receives these pings when it is initialized and connected to the same wifi network as the client. To initalize it, run python web_server.py. To view it, open localhost with the port number used. To deploy it to the cloud, run defang up in the \\welcome directory.  A helpful file called serial_reader.py decodes serial monitor readings to a readable format, allowing you to see Serial.println() messages in real time when running. To initalize it, run python serial_reader.py and see it show up in the terminal.  Here is a diagram showing the structure of the application.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-4","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-4","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-4","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-4","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Arduino Flask Wifi Server  Short Description: An Arduino wifi server built with Flask.  Tags: Arduino, Flask, Python, IoT, Wifi, Serial  Languages: python  ","version":"Next","tagName":"h3"},{"title":"BullMQ & BullBoard & Redis​","type":1,"pageTitle":"Samples","url":"/docs/samples#bullmq--bullboard--redis","content":" This sample demonstrates how to deploy a BullMQ message queue on top of managed Redis with a queue processor and a dashboard to monitor the queue.  Once your app is up and running you can go to the /board route for the board service to see the Bull Board dashboard and use the username admin and the board password you set to log in (see Configuration).  To add a job to the queue, you can go to the /add route of the api service. This will use some default values so you can test things out. You can also see an example of a post request in the sample HTTP request file.  The worker service is the queue processor that will process the jobs added to the queue. You can see in the compose.yaml file that the worker service is set to scale to 2 instances. This means that there will be 2 workers processing jobs from the queue. You can set this to your desired number of workers, but we wanted to show how you can increase the number of workers to handle more jobs.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-5","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-5","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-5","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  BOARD_PASSWORD​  Set a board password and use together with the board username admin when signing in.  defang config set BOARD_PASSWORD   QUEUE​  defang config set QUEUE   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-5","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: BullMQ &amp; BullBoard &amp; Redis  Short Description: A sample project with BullMQ, BullBoard, and Redis.  Tags: BullMQ, BullBoard, Redis, Express, Node.js, Message Queue, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Crew.ai Django Sample​","type":1,"pageTitle":"Samples","url":"/docs/samples#crewai-django-sample","content":" This sample shows how to use Crew.ai with a Django application. It provides a simple web interface that allows users to input text and receive a summary of the text in real-time using Django Channels with a Redis broker. It uses Celery to handle the Crew.ai tasks in the background with Redis as a broker. It uses Postgres as the database for Django.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-6","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-6","content":" To run the application locally, you can use the following command:  docker compose -f ./compose.local.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-6","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  POSTGRES_PASSWORD​  The password for the Postgres database.  defang config set POSTGRES_PASSWORD   SSL_MODE​  The SSL mode for the Postgres database.  defang config set SSL_MODE   DJANGO_SECRET_KEY​  The secret key for the Django application.  defang config set DJANGO_SECRET_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-6","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Crew.ai Django Sample  Short Description: A sample application that uses Crew.ai to summarize text in a background task, streamed to the user in real-time.  Tags: Django, Celery, Redis, Postgres, AI, ML  Languages: Python  ","version":"Next","tagName":"h3"},{"title":"C# & ASP.NET Core​","type":1,"pageTitle":"Samples","url":"/docs/samples#c--aspnet-core","content":" This sample project is a simple task manager application using ASP.NET Core for the backend and JavaScript for client-side component rendering.  It showcases how you could deploy a full-stack application with ASP.NET Core and JavaScript using Defang. The Docker setup ensures the app can be easily built and tested during development.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-7","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLIInstall ASP.NET Core  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-7","content":" For development, we use two local containers, one for the frontend service and one for the backend service in ASP.NET Core. It also uses Caddy as a web server for serving static files.  To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-7","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-7","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: C# &amp; ASP.NET Core  Short Description: A simple task manager application using C# and ASP.NET Core.  Tags: ASP.NET Core, JavaScript, C#  Languages: C#  ","version":"Next","tagName":"h3"},{"title":"Django​","type":1,"pageTitle":"Samples","url":"/docs/samples#django","content":" This sample is a simple Django to-do app that uses SQLite as the database, which will be reset every time you deploy. It is not production-ready. For production use cases, you should check out the Django + Postgres sample.  The app includes a management command which is run on startup to create a superuser with the username admin and password admin. This means you can login to the admin interface at /admin/ and see the Django admin interface without any additional steps. The example_app is already registered and the Todo model is already set up to be managed in the admin interface.  The Dockerfile and compose files are already set up for you and are ready to be deployed. Serving is done using Gunicorn and uses WhiteNoise for static files. The CSRF_TRUSTED_ORIGINS setting is configured to allow the app to run on a defang.dev subdomain.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-8","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-8","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-8","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-8","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Make sure to update the CSRF_TRUSTED_ORIGINS setting in the settings.py file to include an appropriate domain.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Django  Short Description: A simple Django app that uses SQLite as the database.  Tags: Django, SQLite, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Django Celery​","type":1,"pageTitle":"Samples","url":"/docs/samples#django-celery","content":" This is a sample Django application that uses Celery for background tasks. It uses Postgres as the database and Redis as the message broker.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-9","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-9","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-9","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  POSTGRES_PASSWORD​  The password for the Postgres database.  defang config set POSTGRES_PASSWORD   SECRET_KEY​  The secret key for the Django application.  defang config set SECRET_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-9","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Django Celery  Short Description: A Django application that uses Celery for background tasks, Postgres as the database, and Redis as the message broker.  Tags: Django, Celery, Postgres, Redis  Languages: python, sql  ","version":"Next","tagName":"h3"},{"title":"Django Channels & Redis & Postgres​","type":1,"pageTitle":"Samples","url":"/docs/samples#django-channels--redis--postgres","content":" This sample demonstrates how to get Django Channels up and running with Redis and Postgres both managed by Defang. It demonstrates how to do this with a simple chat application.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-10","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-10","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up   This will start the Django server, Redis, and Postgres and mounts your Django app so you get live reloading. You can access the Django server at http://localhost:8000.  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-10","content":" For this sample, you will need to provide the following configuration. Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  SECRET_KEY​  The secret key for your Django application. You can generate a new one by running python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'. A default, insecure key is used if this is not set, but you should set it for a production deployment.  POSTGRES_PASSWORD​  The password for your Postgres database. You need to set this before deploying for the first time.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying","content":" Open the terminal and type defang loginUse the defang config command to setup environment variables.Type defang compose up in the CLI.Your app will be running within a few minutes.  Title: Django Channels &amp; Redis &amp; Postgres  Short Description: A basic configuration of Django Channels with Redis and Postgres demonstrating a simple chat application.  Tags: Django, Channels, Redis, Postgres, Chat, Application  Languages: Python  ","version":"Next","tagName":"h3"},{"title":"Django & Postgres​","type":1,"pageTitle":"Samples","url":"/docs/samples#django--postgres","content":" This template is a customer relationship management list project developed using Python Django framework, offering a starting point to help you quickly build your customer management system. We use PostgreSQL as the database. We have prepared all the essential files for deployment. By spending less than 10 minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live to the world!  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-11","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-11","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-11","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  POSTGRES_PASSWORD​  The password for the PostgreSQL database.  defang config set POSTGRES_PASSWORD   SECRET_KEY​  The secret key is used to secure the Django application.  defang config set SECRET_KEY   ALLOWED_HOSTS​  The allowed hosts for the Django application. (i.e. the domain your app runs on)  defang config set ALLOWED_HOSTS   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-10","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Django &amp; PostgreSQL  Short Description: A customer relationship management list project developed using the Python Django framework, offering a starting point to help you quickly build your customer management system.  Tags: Django, PostgreSQL, Python, SQL  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Django-Railpack​","type":1,"pageTitle":"Samples","url":"/docs/samples#django-railpack","content":" This sample is a simple Django to-do app that uses SQLite as the database, which will be reset every time you deploy. It is not production-ready. For production use cases, you should check out the Django + Postgres sample.  The app includes a management command which is run on startup to create a superuser with the username admin and password admin. This means you can login to the admin interface at /admin/ and see the Django admin interface without any additional steps. The example_app is already registered and the Todo model is already set up to be managed in the admin interface.  The compose files are already set up for you and are ready to be deployed and the image is built by Railpack. Serving is done using Gunicorn and uses WhiteNoise for static files. The CSRF_TRUSTED_ORIGINS setting is configured to allow the app to run on a defang.dev subdomain.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-12","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-12","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-11","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Make sure to update the CSRF_TRUSTED_ORIGINS setting in the settings.py file to include an appropriate domain.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Django  Short Description: A simple Django app that uses SQLite as the database.  Tags: Django, SQLite, Python, Railpack  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Elysia & Bun​","type":1,"pageTitle":"Samples","url":"/docs/samples#elysia--bun","content":" A basic Elysia app running on Bun with a Dockerfile and compose.yaml ready to deploy to AWS with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-13","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-12","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-13","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-12","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Elysia &amp; Bun  Short Description: A basic Elysia app running on Bun with Defang.  Tags: Bun, Elysia, TypeScript, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"FastAPI​","type":1,"pageTitle":"Samples","url":"/docs/samples#fastapi","content":" This sample project demonstrates how to deploy FastAPI with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-14","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-13","content":" To run the application locally, you can use the following command:  docker compose -f compose.yaml -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-14","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-13","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: FastAPI  Short Description: A sample project demonstrating how to deploy FastAPI with Defang.  Tags: FastAPI, OpenAPI, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"FastAPI & PostgreSQL​","type":1,"pageTitle":"Samples","url":"/docs/samples#fastapi--postgresql","content":" This sample project demonstrates how to deploy FastAPI with PostgreSQL with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-15","content":" Download Defang CLI(optional) If you are using Defang BYOC, make sure you have properly authenticated your AWS account.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-14","content":" To run the development container(s) locally, do:  docker compose -f compose.dev.yaml up --build   Or to run the production container(s) locally, do:  POSTGRES_PASSWORD=postgres docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-15","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  POSTGRES_PASSWORD​  defang config set POSTGRES_PASSWORD   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-14","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: FastAPI &amp; PostgreSQL  Short Description: A sample project with FastAPI and PostgreSQL.  Tags: FastAPI, PostgreSQL, Python, SQL  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Feathers.js ​","type":1,"pageTitle":"Samples","url":"/docs/samples#feathersjs-","content":" This sample project demonstrates how to deploy a FeathersJS application on to AWS using Defang. We also demonstrate how to run the application in both development and production environments using Docker Compose.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-16","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI(Optional - for local development) Node.js  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-15","content":" For development, we use Docker to containerize the FeathersJS application. The Docker Compose configuration is defined in the compose.dev.yaml file.  To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-16","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-15","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Feathers.js  Short Description: A sample project demonstrating how to deploy a Feathers.js application using Defang. The application displays &quot;DefangxFeathersjs&quot; on the webpage.  Tags: Feathers.js, Node.js, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Flask​","type":1,"pageTitle":"Samples","url":"/docs/samples#flask","content":" This is a basic Flask to-do app that can be deployed with Defang. Note that alongside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.  This project is intended to provide a basic understanding of how to get started with Flask on Defang. The items are stored in memory and are lost when the server is restarted. It is not intended for production use. If you need something production ready, you should use a managed database like Postgres or MySQL.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-17","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-16","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-17","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-16","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Flask  Short Description: A basic Flask to-do app.  Tags: Flask, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Flask-Railpack​","type":1,"pageTitle":"Samples","url":"/docs/samples#flask-railpack","content":" This is a basic Flask to-do app that can be deployed with Defang. Note that alongside your .py file, include a requirements.txt so that the Railpack can install the necessary packages with pip.  This project is intended to provide a basic understanding of how to get started with Flask on Defang. The items are stored in memory and are lost when the server is restarted. It is not intended for production use. If you need something production ready, you should use a managed database like Postgres or MySQL.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-18","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-18","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-17","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Flask  Short Description: A basic Flask to-do app.  Tags: Flask, Python, Railpack  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Go HTTP Server​","type":1,"pageTitle":"Samples","url":"/docs/samples#go-http-server","content":" A very simple example of a Go service that listens on a port and returns information about the request.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-19","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-17","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-19","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-18","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go HTTP Server  Short Description: A simple Go application that echoes back the request.  Tags: Go, HTTP  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Go HTTP Form​","type":1,"pageTitle":"Samples","url":"/docs/samples#go-http-form","content":" This Go application demonstrates a simple form submission using the standard net/http library. Users can input their first name into a form, and upon submission, they will be greeted personally by the application.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-20","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-18","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-20","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-19","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go HTTP Form  Short Description: A simple Go application that demonstrates form submission using the net/http library.  Tags: Go, HTTP  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Golang-Http-Form-Railpack​","type":1,"pageTitle":"Samples","url":"/docs/samples#golang-http-form-railpack","content":" This Go application demonstrates a simple form submission using the standard net/http library. Users can input their first name into a form, and upon submission, they will be greeted personally by the application.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-21","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-21","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-20","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go HTTP Form  Short Description: A simple Go application that demonstrates form submission using the net/http library.  Tags: Go, HTTP, Railpack  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Go & MongoDB​","type":1,"pageTitle":"Samples","url":"/docs/samples#go--mongodb","content":" This sample is a task manager application that uses Go and MongoDB, deployed with Defang.  HTML and JavaScript are used for the frontend to interact with the backend via API calls. There is a go.mod file that includes dependencies for the Dockerfile to install.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-22","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-19","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-22","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  MONGO_INITDB_ROOT_USERNAME​  The username for the MongoDB database.  defang config set MONGO_INITDB_ROOT_USERNAME   MONGO_INITDB_ROOT_PASSWORD​  The password for the MongoDB database.  defang config set MONGO_INITDB_ROOT_PASSWORD   Using MongoDB Atlas​  If you want to use MongoDB Atlas, you can set the URI with defang config set MONGO_URI and remove the value from the MONGO_URI environment variable so that it is read from defang config. For example, in your compose.yaml file:  services: app: environment: - MONGO_URI # empty values are read from defang config   Using DocumentDB in AWS​  If you want to use DocumentDB in AWS, you can add the x-defang-mongodb extension to your compose.yaml file:  services: db: x-defang-mongodb: true   This will automatically provision a DocumentDB cluster in your AWS account.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-21","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go &amp; MongoDB  Short Description: A simple Go application that manages tasks with MongoDB.  Tags: Go, MongoDB, Atlas, Task Manager  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Golang & OpenAI​","type":1,"pageTitle":"Samples","url":"/docs/samples#golang--openai","content":" This sample demonstrates how to deploy a Go project with OpenAI using Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-23","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-20","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-23","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  OPENAI_KEY​  An API key to access the OpenAI API.  defang config set --name OPENAI_KEY   ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Samples","url":"/docs/samples#testing","content":" Below are some useful commands for testing.  echo &quot;Hello&quot; | curl -H &quot;Content-Type: application/text&quot; -d @- https://xxxxxxxx/prompt   or alternatively,  cat prompt.txt | curl -H &quot;Content-Type: application/text&quot; -d @- https://xxxxxxxx/prompt   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-22","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go &amp; OpenAI  Short Description: A simple Go application that interacts with the OpenAI API.  Tags: Go, OpenAI, ChatGPT  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Go & REST API​","type":1,"pageTitle":"Samples","url":"/docs/samples#go--rest-api","content":" This sample shows a Go HTTP server that uses a REST API to fetch data, deployed using Defang.  It serves two endpoints: / and /rates. The / endpoint responds with a JSON object containing the status, while the /rates endpoint fetches data from the Fiscal Data Treasury API and returns the response to the client.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-24","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-21","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-24","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-23","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go &amp; REST API  Short Description: A simple Go application that fetches fiscal data from an API.  Tags: Go, HTTP, Fiscal Data, REST API  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Go & S3​","type":1,"pageTitle":"Samples","url":"/docs/samples#go--s3","content":" This sample shows a simple Go application that uploads and downloads files from AWS S3, deployed with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-25","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-22","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-25","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  AWS_ACCESS_KEY​  An AWS access key to use S3.  defang config set --name AWS_ACCESS_KEY   AWS_SECRET_KEY​  An AWS secret key to use S3.  defang config set --name AWS_SECRET_KEY   ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Samples","url":"/docs/samples#testing-1","content":" Below is a useful command for testing.  curl -X POST -H 'Content-Type: application/json' -d '{ &quot;first_name&quot; : &quot;jane&quot;, &quot;last_name&quot; : &quot;doe&quot; }' https://xxxxxx/upload curl https://xxxxxx/download   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-24","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Go &amp; S3  Short Description: A simple Go application that uploads and downloads files from AWS S3.  Tags: Go, S3, AWS  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Go & Slack API​","type":1,"pageTitle":"Samples","url":"/docs/samples#go--slack-api","content":" This is a simple Slackbot that takes a request and posts the message from the body to a Slack channel.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-26","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  Slack API Token​  You'll need to head to https://api.slack.com/apps to create a Slack App.  Make sure to:  Give it the bot chat:write scopeInstall the app to your workspaceCopy the Bot User OAuth Access TokenInvite your bot to the channel you want it to post to using the @botname command in the channel (this will allow you to invite it)  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-23","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-26","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  SLACK_TOKEN​  This is the token you've copied previously for the Slack API.  defang config set SLACK_TOKEN   SLACK_CHANNEL_ID​  This is the ID of the Slack channel where the bot will post messages.  defang config set SLACK_CHANNEL_ID   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-25","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Samples","url":"/docs/samples#usage","content":" Once the Slackbot is deployed, you can send a POST request to the / endpoint with a JSON body containing the message you want to post to the Slack channel. Here's an example:  curl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\ -H 'content-type: application/json' \\ --data-raw $'{&quot;message&quot;:&quot;This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.&quot;}'   Title: Go &amp; Slack API  Short Description: A simple Slackbot that posts messages to a Slack channel.  Tags: Go, Slack, Bot  Languages: golang  ","version":"Next","tagName":"h3"},{"title":"Hasura & PostgreSQL​","type":1,"pageTitle":"Samples","url":"/docs/samples#hasura--postgresql","content":" This sample project demonstrates how to deploy Hasura with Defang and connect it to a Postgres database. We also demonstrate how to run a Postgres container during development and how to switch over to a managed postgres service like RDS, Neon, or others in production. If you want to get a compatible database ready to go really quickly for free, Neon is a quick and easy way to go. The sample populates the database with some sample data so you can quickly start playing with the Hasura console. It sets wide open permissions on the tables as well so you can start querying or mutating the data right away.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-27","content":" Download Defang CLIHave a managed database service configured and have the connection string ready.(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI(Optional) Install the Hasura CLI to create migrations and update metadata for your Hasura GraphQL api.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-24","content":" For development, we use a Postgres container. The Postgres container is defined in the compose.dev.yaml file. The Hasura container is defined in the compose.yaml file, with some overrides in the compose.dev.yaml file so it can correctly connect to the development database container.  To start the development environment, run docker compose -f ./compose.yaml -f ./compose.dev.yaml up. This will start the Postgres container and the Hasura container. The Hasura console will be available at http://localhost:8080 with the password password.Note: If you want to make changes to your database, permissions, etc. you should use the Hasura console and the Hasura CLI to make those changes. See the next section for more information.  Editing the database/permissions etc.​  If you want to edit the database, permissions, or any other Hasura settings such that you can deploy them to production, you should install the Hasura CLI. Then, after starting the development environment, you can run hasura console inside the ./hasura directory. This will open the Hasura console in your browser. Any changes you make in the console will be saved to the migrations and metadata directories. When you run defang compose up these changes will be applied to the production environment.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-1","content":" Open the terminal and type defang loginAdd your connection string as a defang config value by typing defang config set HASURA_GRAPHQL_DATABASE_URL and pasting your connection string (which should be in the format postgres://username:password@host:port/dbname)Setup a password for hasura by typing defang config set HASURA_GRAPHQL_ADMIN_SECRET and adding a password you would like to login with.Type defang compose up in the CLI.Your app will be running within a few minutes.  Title: Hasura &amp; PostgreSQL  Short Description: A sample project demonstrating how to deploy Hasura with Defang and connect it to a PostgreSQL database.  Tags: Hasura, GraphQL, PostgreSQL, Database  Languages: SQL, GraphQL  ","version":"Next","tagName":"h3"},{"title":"HTML & CSS & JavaScript​","type":1,"pageTitle":"Samples","url":"/docs/samples#html--css--javascript","content":" This sample shows how to get a static HTML, CSS and JavaScript website up and running with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-28","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-25","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-27","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-26","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: HTML &amp; CSS &amp; JavaScript  Short Description: A simple HTML, CSS and JavaScript website running on Defang.  Tags: HTML, CSS, JavaScript, Frontend  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Huginn​","type":1,"pageTitle":"Samples","url":"/docs/samples#huginn","content":" This sample shows how to deploy Huginn with Defang.  Huginn is a system for building agents that perform automated tasks for you online. Huginn's Agents can monitor the web, respond to events, and act on your behalf. They propagate events along a directed graph. It's like a customizable IFTTT or Zapier on your own server, ensuring data privacy.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-29","content":" Download Defang CLIHave a managed database service configured and ready, such as Neon PostgreSQL(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-26","content":" To run the application locally, you can use the following command:  docker compose -f ./compose.yaml -f ./compose.dev.yaml up   This will start the Postgres container and the Huginn container. Huginn will be available at http://localhost:3000 with the username admin and password password.  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-28","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  DATABASE_NAME​  The name of the database.  defang config set DATABASE_NAME   DATABASE_USERNAME​  The username used with the database.  defang config set DATABASE_USERNAME   DATABASE_PASSWORD​  The password used with the database.  defang config set DATABASE_PASSWORD   DATABASE_HOST​  The host of the database.  defang config set DATABASE_HOST   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-27","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Huginn  Short Description: A system for building agents that perform automated tasks for you online.  Tags: Huginn, Agents, Automation  Languages: Dockerfile  ","version":"Next","tagName":"h3"},{"title":"ImgProxy​","type":1,"pageTitle":"Samples","url":"/docs/samples#imgproxy","content":" This sample shows how to deploy ImgProxy with Defang. ImgProxy is a fast and secure standalone server for resizing and converting remote images. It can be deployed using the official Docker image, as documented here.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-30","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-27","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-29","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-28","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: ImgProxy  Short Description: A fast and secure standalone server for resizing and converting remote images  Tags: Imgproxy, Images, Server  Languages: N/A  ","version":"Next","tagName":"h3"},{"title":"Javalin Sample​","type":1,"pageTitle":"Samples","url":"/docs/samples#javalin-sample","content":" This sample demonstrates how to deploy a very basic Javalin sample with Defang. The sample simply outputs &quot;Defang x Javalin&quot; on the webpage.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-31","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-2","content":" Open the terminal and type defang loginType defang compose up in the CLI.Your app will be running within a few minutes.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-28","content":" For development, we use a local container. This can be seen in the compose.yaml file. To run the sample locally use the following command:  docker compose up --build   Title: Javalin  Short Description: A short hello world application demonstrating how to deploy Javalin onto Defang.  Tags: Javalin, Java, Maven  Languages: java  ","version":"Next","tagName":"h3"},{"title":"Langchain & Flask​","type":1,"pageTitle":"Samples","url":"/docs/samples#langchain--flask","content":" This sample is an endpoint that tells programming jokes and shows how to deploy a flask app that uses Langchain on to AWS via Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-32","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-3","content":" Open the terminal and type defang loginSet the environment variable OPENAI_KEY by typing defang config set OPENAI_KEY.Type defang compose up in the CLI.Your app will be running within a few minutes.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-29","content":" For development, first clone the project and navigate to its directory. After such, please run the command  docker compose up --build   This will start a Docker container with the flask app which will display the result of the langchain prompt.  Title: LangChain &amp; Flask  Short Description: A sample project demonstrating how to deploy LangChain with Flask on Defang.  Tags: LangChain, Flask, AI, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Managed LLM​","type":1,"pageTitle":"Samples","url":"/docs/samples#managed-llm","content":" This sample application demonstrates the use of OpenAI-compatible Managed LLMs (Large Language Models) with Defang.  Note: Using Docker Model Provider? See our Managed LLM with Docker Model Provider sample.  Using the Defang OpenAI Access Gateway, the feature x-defang-llm: true enables you to use Managed LLMs on the Defang Playground or on platforms offered by BYOC providers (such as AWS Bedrock or GCP Vertex AI) with an OpenAI-compatible SDK.  This allows switching from OpenAI to the Managed LLMs on supported cloud platforms without modifying your application code.  You can configure the LLM_MODEL and LLM_URL for the LLM separately for local development and production environments.  The LLM_MODEL is the LLM Model ID you are using.The LLM_URL is the bridge that provides authenticated access to the LLM model.  Ensure you have enabled model access for the model you intend to use. To do this, you can check your AWS Bedrock model access or GCP Vertex AI model access.  To learn about available LLM models in Defang, please see our Model Mapping documentation.  For more about Managed LLMs in Defang, please see our Managed LLMs documentation.  Defang OpenAI Access Gateway​  In the compose.yaml file, the llm service is used to route requests to the LLM API model. This is known as the Defang OpenAI Access Gateway.  The x-defang-llm property on the llm service must be set to true in order to use the OpenAI Access Gateway when deploying with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-33","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-30","content":" To run the application locally, you can use the following command:  docker compose -f compose.local.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-29","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Managed LLM  Short Description: An app using Managed LLMs with Defang's OpenAI Access Gateway.  Tags: LLM, OpenAI, Python, Bedrock, Vertex  Languages: Python  ","version":"Next","tagName":"h3"},{"title":"Managed LLM with Docker Model Provider​","type":1,"pageTitle":"Samples","url":"/docs/samples#managed-llm-with-docker-model-provider","content":" This sample application demonstrates using Managed LLMs with a Docker Model Provider, deployed with Defang.  Note: This version uses a Docker Model Provider for managing LLMs. For the version with Defang's OpenAI Access Gateway, please see our Managed LLM Sample instead.  The Docker Model Provider allows users to run LLMs locally using docker compose. It is a service with provider: in the compose.yaml file. Defang will transparently fixup your project to use AWS Bedrock or Google Cloud Vertex AI models during deployment.  You can configure the LLM_MODEL and LLM_URL for the LLM separately for local development and production environments.  The LLM_MODEL is the LLM Model ID you are using.The LLM_URL will be set by Docker and during deployment Defang will provide authenticated access to the LLM model in the cloud.  Ensure you have enabled model access for the model you intend to use. To do this, you can check your AWS Bedrock model access or GCP Vertex AI model access.  To learn about available LLM models in Defang, please see our Model Mapping documentation.  For more about Managed LLMs in Defang, please see our Managed LLMs documentation.  Docker Model Provider​  In the compose.yaml file, the llm service will route requests to the LLM API model using a Docker Model Provider.  The x-defang-llm property on the llm service must be set to true in order to use the Docker Model Provider when deploying with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-34","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-31","content":" To run the application locally, you can use the following command:  docker compose -f compose.local.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-30","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Managed LLM with Docker Model Provider  Short Description: An app using Managed LLMs with a Docker Model Provider, deployed with Defang.  Tags: LLM, Python, Bedrock, Vertex, Docker Model Provider  Languages: Python  ","version":"Next","tagName":"h3"},{"title":"MCP​","type":1,"pageTitle":"Samples","url":"/docs/samples#mcp","content":" This is a sample of a Model Context Protocol (MCP) chatbot application built with Next.js, Python, and Anthropic Claude, deployed using Defang.  This example uses Docker's mcp/time image as a base for the MCP Server (with MCP tools included), but it can be adapted to use any of the Docker MCP images.  How It Works​  Service 1 (Web Server with UI)​  The web server and UI are built in Next.js (see /service-1/src/app). The web server includes a forwarding action to connect to the MCP Client.  Service 2 (MCP Client and MCP Server)​  The MCP Client is written in Python and ran in a venv virtual environment. The MCP server is provided by the Docker mcp/time image. The MCP Server communicates with the MCP Client in a Quart app (i.e. Asynchronous Server Gateway Interface (ASGI) version of Flask) through the stdio transport method, as seen in /service-2/main.py. For more on MCP transport methods, see here.  Here's a breakdown of what happens when a user interacts with the UI:  When a user submits a query to the chatbot, the browser sends a request to the Next.js web server.The Next.js web server will forward this request to the MCP Client via a REST endpoint.The MCP Client processes the request by interacting with the Anthropic (Claude) API and tools available through the MCP Server.Once the response is generated, it is sent back to the Next.js web server and displayed to the user in the UI.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-35","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-32","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-30","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  ANTHROPIC_API_KEY​  An API key for accessing the Anthropic Claude API.  defang config set ANTHROPIC_API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-31","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Model Context Protocol (MCP) Chatbot  Short Description: An MCP (Model Context Protocol) chatbot assistant built with Next.js, Python, and Anthropic Claude.  Tags: MCP, Next.js, Python, Quart, Claude, AI, Anthropic, TypeScript, React, JavaScript  Languages: nodejs, python  ","version":"Next","tagName":"h3"},{"title":"Metabase & Postgres​","type":1,"pageTitle":"Samples","url":"/docs/samples#metabase--postgres","content":" Metabase is a simple and powerful analytics tool which lets anyone learn and make decisions from their company’s data. This sample demonstrates how to deploy Metabase with Defang. In development, we run a postgres container and in production, we use a managed postgres service. To build the sample, we used Neon, because of their simplicity and generous free tier.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-36","content":" Download Defang CLIHave a managed database service configured and have the connection details ready.(optional) If you are using Defang BYOC, make sure you have properly authenticated your AWS account.  ","version":"Next","tagName":"h3"},{"title":"Local​","type":1,"pageTitle":"Samples","url":"/docs/samples#local","content":" For development, we use a Postgres container. The Postgres container is defined in the compose.dev.yaml file. The Metabase container is defined in the compose.yaml file, with some overrides in the compose.dev.yaml file so it can correctly connect to the development database container.  To start the development environment, run docker compose -f ./compose.yaml -f ./compose.dev.yaml up. This will start the Postgres container and the Metabase container. Metabase will be available at http://localhost:3000.  Since Metabase is a self contained application, there isn't an actual development process, but you can use the development environment to see how Metabase works.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-4","content":" Open the terminal and type defang loginAdd your database connection details using defang config by typing defang config set &lt;CONFIG_VAL&gt; where &lt;CONFIG_VAL&gt; is the each of the following MB_DB_DBNAME, MB_DB_HOST, MB_DB_PORT, MB_DB_USER, MB_DB_PASS (to set the database name, host, port, user, and password respectively). For example defang config set MB_DB_DBNAME and pasting your database name.Type defang compose up in the CLI.Your app will be running within a few minutes.  Title: Metabase &amp; PostgreSQL  Short Description: A simple Metabase configuration with a PostgreSQL database.  Tags: Metabase, PostgreSQL, Analytics, Database  Languages: SQL  ","version":"Next","tagName":"h3"},{"title":"Next.js​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextjs","content":" A basic Next.js app with a Dockerfile and compose.yaml ready to deploy to AWS with Defang.  ","version":"Next","tagName":"h2"},{"title":"Steps​","type":1,"pageTitle":"Samples","url":"/docs/samples#steps","content":" Install DefangAuthenticate with Defang(optional) Authenticate with AWSRun defang compose up in the root of this project  ","version":"Next","tagName":"h3"},{"title":"Static Files (Experimental)​","type":1,"pageTitle":"Samples","url":"/docs/samples#static-files-experimental","content":" This example supports deployment to AWS as a static site. Static files will be copied to an S3 bucket. In the affordabledeployment mode (the default), the static files will be served over HTTP from an S3 bucket.  info Note that some top-level domains (TLDs), such as .app, require HSTS, which will disallow browsers from accessing the site over HTTP. If you want to use such a TLD, you must serve the static files over HTTPS by using either the balanced or high_availability deployment mode.  To serve the static files over HTTPS, use either the balanced or high_availability deployment mode, which will create a CloudFront distribution in front of the S3 bucket.  To deploy this project as a static site, run:  defang compose up -f compose.static.yaml --provider=aws --mode=balanced   Title: Next.js  Short Description: A basic Next.js app.  Tags: Next.js, React, Docker, Node.js, TypeScript, JavaScript, Static  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Next.js Blog​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextjs-blog","content":" This template is a starter project developed using Next.js designed to make it easy to launch a blog. It offers an excellent starting point to help you publish your content by simply modifying the MDX files included in _posts directory. We have prepared all the necessary files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!  ","version":"Next","tagName":"h2"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files","content":" A Dockerfile to describe the basic image of your applications.A docker-compose file to define and run multi-container Docker applications.A .dockerignore file to comply with the size limit (10MB).  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite","content":" Download Defang CLIIf you are using Defang BYOC, make sure you have properly authenticated your AWS accountPlus, make sure that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide","content":" Edit your content in the _posts directoryOpen the terminal and type defang loginType defang compose up in the CLINow your application will be launched  Title: Next.js Blog  Short Description: A starter project developed using Next.js designed to make it easy to launch a blog.  Tags: Next.js, Blog, Node.js, React, MDX, TypeScript, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Next.js & Claude​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextjs--claude","content":" This sample shows a Next.js and Claude application deployed using Defang. It uses Anthropic API for its chatbot functionality.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-37","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-33","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-31","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  ANTHROPIC_API_KEY​  An API key for Anthropic AI.  defang config set ANTHROPIC_API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-32","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Next.js &amp; Claude  Short Description: A fun chatbot created with Next.js and Claude.  Tags: Next.js, TypeScript, React, JavaScript, Chatbot, Claude, AI, Anthropic  Languages: TypeScript  ","version":"Next","tagName":"h3"},{"title":"Next.js CV​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextjs-cv","content":" This is a sample of a Next.js CV web application, deployed with Defang.  The template is based off of the repository https://github.com/BartoszJarocki/cv on GitHub.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-38","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-34","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-32","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-33","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Next.js CV  Short Description: A Next.js web app that displays a minimalist CV.  Tags: Next.js, React, TypeScript, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Nextra​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextra","content":" This template is a documentation starter project developed using Nextra, designed to streamline the creation of your documentation and quickly build a digital knowledgebase. You can add content easily by simply adding markdown files. This code-free solution requires no adjustments to the basic structure. We have prepared all the essential files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!  ","version":"Next","tagName":"h2"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-1","content":" A Dockerfile to describe the basic image of your applications.A docker-compose file to define and run multi-container Docker applications.A .dockerignore file to comply with the size limit (10MB).  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-1","content":" Download Defang CLIIf you are using Defang BYOC, make sure you have properly authenticated your AWS accountPlus, make sure that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide-1","content":" Open the terminal and type defang loginType defang compose up in the CLINow your application will be launched  Title: Nextra  Short Description: A documentation starter project developed using Nextra designed to streamline the creation of your documentation.  Tags: Next.js, Documentation, Nextra, Knowledgebase, Node.js, JavaScript, TypeScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Next.js & Postgres​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextjs--postgres","content":" This is a sample Next.js application that uses Postgres as a database. It is a simple example that demonstrates how to connect to a Postgres database from a Next.js application: on each request it takes the user's IP address, geo-locates it, and stores the result in the database, then displays the last 20 results on the home page.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-39","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-35","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-33","content":" For this sample, you will need to provide the following configuration. Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  POSTGRES_PASSWORD​  A password that will be used to connect to the Postgres database.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-5","content":" Open the terminal and type defang loginUse the defang config command to setup environment variables.Type defang compose up in the CLI.Your app will be running within a few minutes.  Title: Next.js &amp; Postgres  Short Description: A sample Next.js application that uses Postgres as a database.  Tags: Next.js, Postgres, Database, Node.js  Languages: TypeScript, JavaScript  ","version":"Next","tagName":"h3"},{"title":"Next.js-Railpack​","type":1,"pageTitle":"Samples","url":"/docs/samples#nextjs-railpack","content":" A simple Next.js app with a compose.yaml, ready to deploy to AWS using Defang. The container image is automatically built by Railpack.  ","version":"Next","tagName":"h2"},{"title":"Steps​","type":1,"pageTitle":"Samples","url":"/docs/samples#steps-1","content":" Install DefangAuthenticate with Defang(optional) Authenticate with AWSRun defang compose up in the root of this project  Title: Next.js  Short Description: A basic Next.js app.  Tags: Next.js, React, Node.js, TypeScript, JavaScript, Static, Railpack  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"NocoDB​","type":1,"pageTitle":"Samples","url":"/docs/samples#nocodb","content":" This sample demonstrates how to deploy a Nocodb instance with Defang. It's an open source alternative to AirTable, that makes it easy to organize and manage data.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-40","content":" Download Defang CLIA Postgres databaseS3 bucket and credentials, or S3 compatible alternative(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-34","content":" For this sample, you will need to provide the following configuration. Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  NC_DB​  Postgres database URL. NocoDB uses an odd, custom format for this. It should look like this: pg://my.pg.hostname.com:5432?u=postgres&amp;p=password&amp;d=nocodb&amp;ssl=true. Neon has a free tier and is easy to set up.  NC_S3_ENDPOINT​  S3 endpoint URL. Wasabi is a simple option for this if you don't already have an S3 bucket or don't have an AWS account you can use.  NC_S3_BUCKET_NAME​  Name of the S3 bucket.  NC_S3_REGION​  Region of the S3 bucket.  NC_S3_ACCESS_KEY​  Access key for the S3 bucket.  NC_S3_ACCESS_SECRET​  Access secret for the S3 bucket.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-6","content":" Open the terminal and type defang loginUse the deploy the configuration values specified above using the defang config set command.Type defang compose up in the CLI.Your app will be running within a few minutes.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-36","content":" For development, we use a local postgres container and a volume mount for file uploads. To run the app locally, just run:  docker compose --file compose.dev.yaml up --build  Title: NocoDB  Short Description: An open source alternative to AirTable.  Tags: NocoDB  Languages: Dockerfile  ","version":"Next","tagName":"h3"},{"title":"Node.js & SocketIO​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs--socketio","content":" This is a minimal chat application that shows how to use Socket.IO with Node.js with minimal code deployed with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-41","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-37","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-35","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-34","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC  Title: Node.js &amp; SocketIO  Short Description: A minimal chat application that shows how to use Socket.IO with Node.js.  Tags: Node.js, Chat, Socket.IO, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js & Express​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs--express","content":" This Node.js application, built with Express.js, is designed to inspect and display detailed information about incoming HTTP requests. It supports all HTTP methods and provides insights into the request path, method, headers, query parameters, and body. Note alongside your project, you should also include a package.json file that includes the relevant metadata such as package dependencies, scripts, project verrsions so that the Dockerfile can install necessary dependencies.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-42","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-38","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-36","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-35","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Node.js &amp; Express  Short Description: A Node.js application that inspects and displays detailed information about incoming HTTP requests.  Tags: Node.js, Express, HTTP, Request, Inspector, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js Express Form​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs-express-form","content":" This is a basic Node.js application using the Express framework to demonstrate handling a form submission. The application serves an HTML form where users can input their first name and then greets them personally upon submission.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-43","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-39","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-37","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-36","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Title: Node.js Express Form  Short Description: A Node.js application that handles form submissions using the Express framework.  Tags: Node.js, Express, HTTP, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js HTTP Server​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs-http-server","content":" This example shows how to build a minimal Node.js application using the Node.js runtime.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-44","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-40","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-38","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-37","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Title: Node.js HTTP Server  Short Description: A simple Node.js application that creates an HTTP server.  Tags: Node.js, HTTP, Server  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js & OpenAI​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs--openai","content":" A simple Node.js and OpenAI app deployed using Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-45","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-41","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-39","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  OPENAI_KEY​  An API key to access the OpenAI API.  defang config set OPENAI_KEY   ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Samples","url":"/docs/samples#testing-2","content":" Below are some useful commands for testing.  echo &quot;Hello&quot; | curl -H &quot;Content-Type: text/plain&quot; -d @- https://xxxxxxxx/prompt   or alternatively,  cat prompt.txt | curl -H &quot;Content-Type: application/text&quot; -d @- https://xxxxxxxx/prompt   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-38","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Title: Node.js &amp; OpenAI  Short Description: A simple Node.js application that interacts with the OpenAI API.  Tags: Node.js, OpenAI, API, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js & React & PostgreSQL​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs--react--postgresql","content":" This sample project demonstrates how to deploy a full-stack application using React for the frontend, Node.js for the backend, and PostgreSQL for the database.  In this sample, we have set up the essential files you need to deploy in production using Neon to host your database. We use a connection string to connect Neon to your code. By replacing the pre-configured connection string at .env and at the compose file to yours, you will be ready to deploy this sample with Neon.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-46","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-42","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up --build   Or run without using Docker by doing the following:  run npm install to install the nodejs dependencies in both the client directory and the server directorycreate or modify the .env file in both the client directory and the server directory with localhost, or create a .env.local to override the .env file.run npm start  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-40","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  DATABASE_URL​  A connection to the database, which should be in the format of postgres://username:password@host:port/dbname.  defang config set DATABASE_URL   REACT_APP_API_URL​  A URL for the React App. For this, you will need to update the compose.yaml file to replace &lt;YOUR_USERNAME&gt; with your username, which you can get by running defang whoami.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-39","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Title: Node.js &amp; React &amp; PostgreSQL  Short Description: A full-stack to-do list application.  Tags: Node.js, React, Full-stack, PostgreSQL, JavaScript, SQL  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js & REST API​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs--rest-api","content":" This is a simple Node.js application that uses Express.js to create a REST API. It has two endpoints: one that returns a status message, and another that fetches and returns average interest rates data from the U.S. Department of the Treasury's Fiscal Data API.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-47","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-43","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-41","content":" For this sample, you will not need to provide configuration.  If you wish to provide configuration, see below for an example of setting a configuration for a value named API_KEY.  defang config set API_KEY   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-40","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Title: Node.js &amp; REST API  Short Description: A simple Node.js application that creates a REST API and fetches data from the U.S. Department of the Treasury's Fiscal Data API.  Tags: Node.js, REST API, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Node.js & S3​","type":1,"pageTitle":"Samples","url":"/docs/samples#nodejs--s3","content":" A simple Node.js and AWS S3 app deployed using Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-48","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-44","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-42","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  AWS_ACCESS_KEY​  An API key to access AWS services.  defang config set AWS_ACCESS_KEY   AWS_SECRET_KEY​  An API key to access AWS services.  defang config set AWS_SECRET_KEY   ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Samples","url":"/docs/samples#testing-3","content":" Below is a useful command for testing.  curl -X POST -H 'Content-Type: application/json' -d '{ &quot;first_name&quot; : &quot;jane&quot;, &quot;last_name&quot; : &quot;doe&quot; }' https://xxxxxx/upload curl https://xxxxxx/download   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-41","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Title: Node.js &amp; S3  Short Description: A simple Node.js application that uploads and downloads files from AWS S3.  Tags: Node.js, S3, AWS, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Nounly​","type":1,"pageTitle":"Samples","url":"/docs/samples#nounly","content":" Nounly (also known as Noun.ly) is a URL shortener website built with Go, JavaScript and Redis, and can be deployed with Defang as a sample.  The URL shortener appends a noun to the end of a Defang-deployed URL to create the new shortened URL. For reference, you can view the real Noun.ly website here.  &quot;Share the web through words.&quot; - Creator of Nounly  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-49","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-45","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-43","content":" For this sample, you will need to provide the following configuration:  Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  PROJECT_HONEYPOT_KEY​  A Project Honey Pot API key that is used for anti-spamming. It is optional, but please include a non-empty string value.  defang config set PROJECT_HONEYPOT_KEY   SHARED_SECRETS​  A JSON object string of shared secrets that are used for API clients. It is optional, and the default value is {} if you do not have any shared secrets.  defang config set SHARED_SECRETS   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-42","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Nounly  Short Description: A URL shortener website built with Go, JavaScript, and Redis.  Tags: Go, JavaScript, Redis, URL shortener  Languages: golang, javascript  ","version":"Next","tagName":"h3"},{"title":"Ollama​","type":1,"pageTitle":"Samples","url":"/docs/samples#ollama","content":" This sample demonstrates how to deploy Ollama with Defang, along with a Next.js frontend using the AI SDK for smooth streaming conversations. By default it runs a very small model (llama3.2:1b) which can perform well with just a CPU, but we've included lines that you can uncomment in the compose file to enable GPU support and run a larger model like gemma:7b. If you want to deploy to a GPU powered instance, you will need to use your own AWS account with Defang BYOC.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-50","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-46","content":" To run the application locally, you can use the following command:  docker compose -f compose.dev.yaml up   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-43","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the defang playground by opening up your terminal and typing defang up.  Keep in mind that the playground does not support GPU instances.  BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run defang up in a terminal that has access to your AWS environment variables.  Title: Ollama  Short Description: Ollama is a tool that lets you easily run large language models.  Tags: AI, LLM, ML, Llama, Mistral, Next.js, AI SDK,  Languages: Typescript  ","version":"Next","tagName":"h3"},{"title":"Phoenix & Postgres​","type":1,"pageTitle":"Samples","url":"/docs/samples#phoenix--postgres","content":" Defang is the easiest way to deploy containerized apps like this Phoenix + Postgres sample to AWS. This is a sample Phoenix application that uses a PostgreSQL database. The sample doesn't add anything to the database, but is based off of the default Phoenix getting started instructions which add a postgres database to the application.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-51","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-47","content":" To run the application locally, you can use the following command:  docker compose -f compose.yaml -f compose.dev.yaml up --build   This will run Phoenix in development mode. If you need to run any commands in the container, after you have run the command above and started the container, you can run the command in a new terminal:  docker compose -f compose.yaml -f compose.dev.yaml exec phoenix bash   ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-7","content":" Open the terminal and type defang loginProvide values for SECRET_KEY_BASE and DATABASE_URL SECRET_KEY_BASE is a secret key used by Phoenix to sign cookies and other things. You can generate one by running docker compose -f compose.yaml -f compose.dev.yaml run --rm phoenix mix phx.gen.secretDATABASE_URL is the connection string for your PostgreSQL database. It should look something like ecto://username:password@hostname/dbname Type defang compose up in the CLI.Your app will be running within a few minutes.  Title: Phoenix &amp; PostgreSQL  Short Description: A sample Phoenix application that uses a PostgreSQL database.  Tags: Phoenix, PostgreSQL, Database, Elixir  Languages: Elixir  ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Samples","url":"/docs/samples#pulumi","content":" This basic example shows you how to use the Defang Pulumi provider to deploy the nodejs-http sample with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-52","content":" Install the Defang CLI by following the instructions in the Defang CLI documentation.  Install the dependencies:  npm install   ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-8","content":" Create a new stack:  pulumi stack init production   Login to Defang:  defang login   Deploy the application:  pulumi up   Title: Pulumi  Short Description: A basic Pulumi example.  Tags: Pulumi, Node.js, HTTP, Server, TypeScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Pulumi & Remix & Postgres​","type":1,"pageTitle":"Samples","url":"/docs/samples#pulumi--remix--postgres","content":" In this example, we run a Remix application connected to a Postgres database using Prisma as an ORM. When we deploy our service to Defang, we also deploy a Postgres service and database using Aiven so we can run our full application in the cloud.  ","version":"Next","tagName":"h2"},{"title":"Running Locally​","type":1,"pageTitle":"Samples","url":"/docs/samples#running-locally","content":" To run this example locally, you'll need to have a Postgres database. You can run one locally with Docker:  docker run -p 5432:5432 -e POSTGRES_PASSWORD=password -d postgres   Create a .env file with the following:  DATABASE_URL=&quot;postgresql://postgres:password@localhost:5432/postgres?schema=public&quot;   Then run npm install and npm run dev in the remix directory to start the application.  ","version":"Next","tagName":"h3"},{"title":"Deploying to Defang​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-to-defang","content":" First, cd into the pulumi directory and make sure you're logged into Defang with defang login and into Pulumi with pulumi login.  Next, head to your Aiven account and create an api token, then run the following command to store it in your Pulumi stack config:  pulumi config set --secret aiven:apiToken &lt;YourToken&gt;   You'll also need to make sure you have an Aiven organization with a billing method attached to a billing group. Get the organization id and the billing group id and add them to your config with the following commands:  pulumi config set --secret aivenOrganizationId &lt;OrgId&gt; pulumi config set --secret aivenBillingGroupId &lt;BillingGroupId&gt;   Now, run pulumi up to deploy your application to Defang and Aiven! Head to the portal to check on status, or run defang services.  Title: Pulumi &amp; Remix &amp; PostgreSQL  Short Description: A full-stack example using Remix, Prisma, and Aiven.  Tags: Full-stack, Remix, Prisma, Aiven, PostgreSQL, Pulumi, Node.js, TypeScript, SQL  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Flask & Form Submission​","type":1,"pageTitle":"Samples","url":"/docs/samples#flask--form-submission","content":" This Flask application provides a basic example of handling form submissions. It displays an HTML form where users can input their first name. Upon submission, the application greets the user by name on a new page. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.  ","version":"Next","tagName":"h2"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-2","content":" A Dockerfile.A compose file to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-2","content":" Download Defang CLIIf you are using Defang BYOC, make sure you have properly authenticated your AWS account (optional)  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide-2","content":" Open the terminal and type defang loginType defang compose up in the CLIYour app should be up and running with Defang in minutes!  Title: Python &amp; Form  Short Description: A short Python example for form submission in Flask.  Tags: Python, Flask, Form  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Python & Implicit & GPU​","type":1,"pageTitle":"Samples","url":"/docs/samples#python--implicit--gpu","content":" This Music Recommendation API provides artist recommendations based on collaborative filtering using the Alternating Least Squares (ALS) algorithm from the implicit library. The dataset utilized is from Last.fm. Note that alongside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. It demonstrates how to use a GPU with Python and the implicit library with Defang.  ","version":"Next","tagName":"h2"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-3","content":" A Dockerfile.A compose file to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-3","content":" Download Defang CLIIf you are using Defang BYOC, make sure you have properly authenticated your AWS account (optional)  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide-3","content":" Open the terminal and type defang loginType defang compose up in the CLIYour app should be up and running with Defang in minutes!  Title: Python &amp; Implicit &amp; GPU  Short Description: A Music Recommendation API that provides artist recommendations based on collaborative filtering using the ALS algorithm from the Implicit library, leveraging a GPU.  Tags: Music, Recommendation, API, Collaborative Filtering, Implicit, GPU, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Python & Flask & HTTP​","type":1,"pageTitle":"Samples","url":"/docs/samples#python--flask--http","content":" This Flask application is designed to inspect and return detailed information about HTTP requests. It supports both GET and POST methods, providing insights into the request path, method, headers, query parameters, and body. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Samples","url":"/docs/samples#features","content":" Support both GET and POST HTTP methodsDetailed information about the request, including path, method, headers, query parameters, and body.  ","version":"Next","tagName":"h3"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-4","content":" A Dockerfile.A compose file to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-4","content":" Download Defang CLIIf you are using Defang BYOC, make sure you have properly authenticated your AWS account (optional)  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide-4","content":" Open the terminal and type defang loginType defang compose up in the CLIYour app should be up and running with Defang in minutes!  Title: Python &amp; Flask &amp; HTTP  Short Description: A Flask application that inspects and returns detailed information about HTTP requests.  Tags: Flask, HTTP, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Python & Flask & OpenAI​","type":1,"pageTitle":"Samples","url":"/docs/samples#python--flask--openai","content":" ","version":"Next","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"Samples","url":"/docs/samples#setup","content":" This sample requires an API key to access the OpenAI API. The name of the config value is referenced in the compose.yaml file. To provide a value for it, you can use the Defang CLI like this:  defang config set --name OPENAI_KEY   and then enter the value when prompted.  ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Samples","url":"/docs/samples#testing-4","content":" echo &quot;Hello&quot; | curl -H &quot;Content-Type: application/text&quot; -d @- https://xxxxxxxx/prompt   or  cat prompt.txt | curl -H &quot;Content-Type: application/text&quot; -d @- https://xxxxxxxx/prompt   Title: Python &amp; Flask &amp; OpenAI  Short Description: An app that demonstrates how to use the OpenAI API with Python and Flask.  Tags: Python, Flask, OpenAI, AI, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Python & REST API​","type":1,"pageTitle":"Samples","url":"/docs/samples#python--rest-api","content":" This Flask application fetches average interest rates from the Fiscal Data Treasury API. It provides endpoints to check the status of the API and to retrieve the latest average interest rates. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Samples","url":"/docs/samples#features-1","content":" Endpoint to check API status. Endpoint to fetch average interest rates from the Fiscal Data Treasury API.  ","version":"Next","tagName":"h3"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-5","content":" A Dockerfile.A compose file to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). This is optional  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-5","content":" Download Defang CLIIf you are using Defang BYOC, make sure you have properly authenticated your AWS account (optional)  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide-5","content":" Open the terminal and type defang loginType defang compose up in the CLIYour app should be up and running with Defang in minutes!  Title: Python &amp; REST API  Short Description: A Flask application that fetches average interest rates from the Fiscal Data Treasury API.  Tags: Flask, REST API, Python  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Python & Flask & AWS S3​","type":1,"pageTitle":"Samples","url":"/docs/samples#python--flask--aws-s3","content":" This sample requires an API key to access AWS S3. The name of the config values is referenced in the compose.yaml file. To provide a value for it, you can use the Defang CLI like this:  defang config set --name AWS_ACCESS_KEY defang config set --name AWS_SECRET_KEY   and then enter the value when prompted.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Samples","url":"/docs/samples#testing-5","content":" curl -X POST -H 'Content-Type: application/json' -d '{ &quot;first_name&quot; : &quot;jane&quot;, &quot;last_name&quot; : &quot;doe&quot; }' https://xxxxxx/upload curl https://xxxxxx/download   Title: Python &amp; Flask &amp; AWS S3  Short Description: An app that demonstrates how to upload and download files from AWS S3 using Python and Flask.  Tags: Python, Flask, AWS, S3  Languages: python  ","version":"Next","tagName":"h3"},{"title":"Ruby on Rails​","type":1,"pageTitle":"Samples","url":"/docs/samples#ruby-on-rails","content":" This template is a member list project developed using Ruby on Rails, offering a starting point to help you quickly build your team management system. We have prepared all the essential files for deployment. By spending less than 10 minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live to the world!  ","version":"Next","tagName":"h2"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-6","content":" A Dockerfile to describe the basic image of your applications.A docker-compose file to define and run multi-container Docker applications.A .dockerignore file to comply with the size limit (10MB).  ","version":"Next","tagName":"h3"},{"title":"Development Using Dev Containers​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-using-dev-containers","content":" Open the working directory with Visual Studio Code or any editor which supports Dev Containers.Click on the bottom left corner of the window where you see &quot;Reopen in Container&quot;.Open up a shell in the VS Code terminal and run docker compose -f compose.dev.yaml up --build.  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-44","content":" For this sample, you will need to provide the following configuration. Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.  POSTGRES_PASSWORD​  This password will be used to initialize the PostgreSQL database and to connect to it.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-44","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the defang playground by opening up your terminal and typing defang up.  BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run defang --provider=aws up in a terminal that has access to your AWS environment variables.  Title: Ruby on Rails  Short Description: A basic member list project developed using Ruby on Rails.  Tags: Ruby, Rails  Languages: Ruby  ","version":"Next","tagName":"h3"},{"title":"React​","type":1,"pageTitle":"Samples","url":"/docs/samples#react","content":" This sample shows how to get a simple React app up and running with Defang. It includes Vite and ESLint, which are common build tools for React development.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-53","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-48","content":" To run the application locally, you can use the following command (make sure you've got npm and Node.js installed):  npm install npm run dev   To run it using a Docker container, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-45","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: React  Short Description: A minimal React app running on Defang.  Tags: React, Vite, JavaScript, Frontend  Languages: JavaScript  ","version":"Next","tagName":"h3"},{"title":"React-Vite-Railpack​","type":1,"pageTitle":"Samples","url":"/docs/samples#react-vite-railpack","content":" This sample shows how to get a simple React app up and running with Defang. It includes Vite and ESLint, which are common build tools for React development. The container image is automatically built by Railpack.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-54","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-49","content":" To run the application locally, you can use the following command (make sure you've got npm and Node.js installed):  npm install npm run dev   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-46","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: React  Short Description: A minimal React app running on Defang.  Tags: React, Vite, JavaScript, Frontend, Railpack  Languages: JavaScript  ","version":"Next","tagName":"h3"},{"title":"Redis & JavaScript​","type":1,"pageTitle":"Samples","url":"/docs/samples#redis--javascript","content":" This is a Redis and JavaScript application, deployed with Defang.  Note that Defang supports the use of managed Redis in production deployments. You can enable this feature by adding the x-defang-redis: true tag to your Redis service in the compose.yaml file.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-55","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate with your cloud provider account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-50","content":" To run the application locally, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-47","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC​  If you want to deploy to your own cloud account, you can use Defang BYOC.  Title: Redis &amp; JavaScript  Short Description: A Redis and JavaScript application, deployed with Defang.  Tags: Redis, JavaScript  Languages: JavaScript  ","version":"Next","tagName":"h3"},{"title":"Rocket​","type":1,"pageTitle":"Samples","url":"/docs/samples#rocket","content":" This sample demonstrates how to deploy a very simple Rocket app. Rocket is a web framework for Rust.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-56","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticate against your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-51","content":" To run the application locally, you can use the following command:  docker compose up   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-48","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the defang playground by opening up your terminal and typing defang up.  BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run defang --provider=aws up in a terminal that has access to your AWS environment variables.  Title: Rocket  Short Description: A simple Rocket app.  Tags: Rocket  Languages: Rust  ","version":"Next","tagName":"h3"},{"title":"Sailsjs​","type":1,"pageTitle":"Samples","url":"/docs/samples#sailsjs","content":" This sample demosntrates how to deploy a very basic Sailsjs sample with Defang. The sample simply outputs hello world on the webpage.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-57","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-9","content":" Open the terminal and type defang loginType defang compose up in the CLI.Your app will be running within a few minutes.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-52","content":" For development, we use a local container. This can be seen in the compose.yaml document. To run the sample locally after cloning the respository, you can run on docker by using the following command:  docker compose -f compose.dev.yaml up --build  Title: Sails.js  Short Description: A short hello world application demonstrating how to deploy Sails.js onto Defang.  Tags: Sails.js, Node.js  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Sails.js & PostgreSQL​","type":1,"pageTitle":"Samples","url":"/docs/samples#sailsjs--postgresql","content":" This sample project demonstrates how to deploy  Sailsjs with Defang and connect it to a Postgres database. Furthermore, we emonstrate how to run a local Postgres container during development vs a managed postgres service (Neon). For a quick database set up please go to Neon and follow set up instructions. The sample starts with a no tasks in the database and allows us to add tasks on the fly. It sets wide open permissions on the tables as well so you can start querying or mutating the data right away.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-58","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI(Optional) [Neon CLI] (https://neon.tech/docs/reference/neon-cli)  ","version":"Next","tagName":"h3"},{"title":"Deploying production​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-production","content":" Open the terminal and type defang loginAdd your connection string for the third party postgres database in the DATABASE_URL part of the compose.yaml sectionType defang compose up in the CLI.Your app will be running within a few minutes.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-53","content":" For development, we use a Postgres container. The Postgres container is defined in the compose.dev.yaml file. The Neon postgres container is defined in the compose.yaml file, with some overrides in the compose.dev.yaml file so it correctly connects to the development database container. To start your own, please have the env variables, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, and SESSION_SECRET ready.  To start the development environment, run:  docker compose -f compose.dev.yaml up --build   Title: Sails.js &amp; PostgreSQL  Short Description: A sample project demonstrating how to deploy a project with PostgreSQL and Sails.js.  Tags: PostgreSQL, Sails.js, SQL, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Svelte & Node.js & MySQL​","type":1,"pageTitle":"Samples","url":"/docs/samples#svelte--nodejs--mysql","content":" This sample project demonstrates how to deploy a full-stack application using Svelte for the frontend, Node.js for the backend, and MySQL for the database. The project uses Docker to containerize the services, making it easy to run in both development and production environments.  ","version":"Next","tagName":"h2"},{"title":"NOTE​","type":1,"pageTitle":"Samples","url":"/docs/samples#note","content":" This sample showcases how you could deploy a full-stack application with Defang and Svelte and NodeJS. However, it deploys mysql db as a defang service. Defang services are ephemeral and should not be used to run stateful workloads in production as they will be reset on every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. In the future, Defang will help you provision and connect to managed databases.  ","version":"Next","tagName":"h3"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-7","content":" Download [Defang CLI] (https://github.com/DefangLabs/defang)(optional) If you are using [Defang BYOC] (https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated your AWS account.(optional for local development) [Docker CLI] (https://docs.docker.com/engine/install/)  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-6","content":" Download [Defang CLI] (https://github.com/DefangLabs/defang)(optional) If you are using Defang BYOC make sure you have properly[Docker CLI] (https://docs.docker.com/engine/install/)[NodeJS] (https://nodejs.org/en/download/package-manager)  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-54","content":" For development, we use a local container. This can be seen in the compose.yaml file and the server.js file where we create a pool of connections. To run the sample locally after clonging the respository, you can run on docker by doing docker compose up --build --build or run without using Docker by doing the following:  run npm install to install the nodejs dependenciescreate an .env file on the svelte directory specifying the appropriate environment variables.run npm start  Editing the database/permissions etc.​  If you want to edit the database, such that you can deploy them to production, you should install the mySQL CLI and mySQL workbench to gain access to a GUI so that you can make your changes to the database. After running defang compose up these changes will be reflected.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-10","content":" Open the terminal and type defang loginType defang compose up in the CLI.Your app will be running within a few minutes.  Title: Svelte &amp; Node.js &amp; MySQL  Short Description: A full-stack application using Svelte for the frontend, Node.js for the backend, and MySQL for the database.  Tags: Svelte, Node.js, MySQL, Full-stack, JavaScript, TypeScript, SQL  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Sveltekit​","type":1,"pageTitle":"Samples","url":"/docs/samples#sveltekit","content":" This sample shows how to get a minimal SvelteKit app up and running with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-59","content":" Download Defang CLIHave a managed database service configured and have the connection string ready.(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional - for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-55","content":" To develop this app, you can run the sveltekit commands as you normally would on your local machine in the sveltekit directory. If you plan on adding other services, you might want to run it with docker compose. We have provided a compose.dev.yaml file and a dev.Dockefile to help you get started. Just run docker compose -f compose.dev.yaml up --build to start your Sveltekit app in dev mode in a container.  ","version":"Next","tagName":"h3"},{"title":"Deploying​","type":1,"pageTitle":"Samples","url":"/docs/samples#deploying-11","content":" Open the terminal and type defang loginType defang compose up in the CLI.Your app will be running within a few minutes.  Title: SvelteKit  Short Description: A minimal SvelteKit app running on Defang.  Tags: SvelteKit, TypeScript, JavaScript, Svelte, Node.js, Frontend, TypeScript, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Sveltekit & MongoDB​","type":1,"pageTitle":"Samples","url":"/docs/samples#sveltekit--mongodb","content":" This is a project that demonstrate both client side component rendering and hydration as well as serverside rendering with external API route configuration. Furthermore, there is also a mongodb connection (not hosted on the atlas) to cache the queried results.  ","version":"Next","tagName":"h2"},{"title":"NOTE​","type":1,"pageTitle":"Samples","url":"/docs/samples#note-1","content":" This sample showcases how you could deploy a full-stack application with Defang and Sveltekit. However, it deploys mongodb as a defang service. Defang services are ephemeral and should not be used to run stateful workloads in production as they will be reset on every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. In the future, Defang will help you provision and connect to managed databases.  ","version":"Next","tagName":"h3"},{"title":"Essential Setup Files​","type":1,"pageTitle":"Samples","url":"/docs/samples#essential-setup-files-8","content":" Download [Defang CLI] (https://github.com/DefangLabs/defang)(optional) If you are using [Defang BYOC] (https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated your AWS account.(optional for local development) [Docker CLI] (https://docs.docker.com/engine/install/)  ","version":"Next","tagName":"h3"},{"title":"Prerequisite​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisite-7","content":" Download [Defang CLI] (https://github.com/DefangLabs/defang) (optional) If you are using Defang BYOC make sure you have properly [Docker CLI] (https://docs.docker.com/engine/install/) [NodeJS] (https://nodejs.org/en/download/package-manager)  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-56","content":" For development, we use a local container. This can be seen in the compose.yaml and /src/routes/api/songs/+server.js file and the server.js file where we create a pool of connections. To run the sample locally after clonging the respository, you can run on docker by doing  docker compose up --build  ","version":"Next","tagName":"h3"},{"title":"A Step-by-Step Guide​","type":1,"pageTitle":"Samples","url":"/docs/samples#a-step-by-step-guide-6","content":" Open the terminal and type defang loginType defang compose up in the CLIYour app should be up and running with Defang in minutes!  Title: SvelteKit &amp; MongoDB  Short Description: A full-stack application using SvelteKit for the frontend and MongoDB for the database.  Tags: SvelteKit, MongoDB, Full-stack, Node.js, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Mistral & vLLM​","type":1,"pageTitle":"Samples","url":"/docs/samples#mistral--vllm","content":" This guide demonstrates how to deploy Mistral using vLLM. You'll need a Hugging Face token to begin.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-60","content":" Hugging Face token  ","version":"Next","tagName":"h3"},{"title":"Steps​","type":1,"pageTitle":"Samples","url":"/docs/samples#steps-2","content":" Set the Hugging Face Token First, set the Hugging Face token using the defang config command. defang config set --name HF_TOKEN Launch with Defang Compose Run the following command to start the services: defang compose up The provided compose.yaml file includes the Mistral service. It's configured to run on an AWS instance with GPU support. The file also includes a UI service built with Next.js, utilizing Vercel's AI SDK. OpenAI SDK: We use the OpenAI sdk, but set the baseURL to our Mistral endpoint. Note: The API route does not use a system prompt, as the Mistral model we're deploying currently does not support this feature. To get around this we inject a couple messages at the front of the conversation providing the context (see the ui/src/app/api/chat/route.ts file). Other than that, the integration with the OpenAI SDK should be structured as expected. Changing the content: The content for the bot is set in the ui/src/app/api/chat/route.ts file. You can edit the prompt in there to change the behaviour. You'll notice that it also pulls from ui/src/app/docs.md to provide content for the bot to use. You can edit this file to change its &quot;knowledge&quot;.  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Samples","url":"/docs/samples#configuration-45","content":" The Docker Compose file is ready to deploy Mistral and the UI service.The UI uses Next.js and Vercel's AI SDK for seamless integration.  By following these steps, you should be able to deploy Mistral along with a custom UI on AWS, using GPU capabilities for enhanced performance.  Title: Mistral &amp; vLLM  Short Description: Deploy Mistral with a custom UI using vLLM.  Tags: Mistral, vLLM, AI, Nextjs, GPU, Node.js, TypeScript, JavaScript  Languages: nodejs  ","version":"Next","tagName":"h3"},{"title":"Vue.js​","type":1,"pageTitle":"Samples","url":"/docs/samples#vuejs","content":" This sample shows how to get a minimal Vue.js app up and running with Defang.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Samples","url":"/docs/samples#prerequisites-61","content":" Download Defang CLI(Optional) If you are using Defang BYOC authenticated with your AWS account(Optional for local development) Docker CLI  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Samples","url":"/docs/samples#development-57","content":" To run the application locally, you can use the following command (make sure you've got npm and Node.js installed):  npm run dev   To run it using a Docker container, you can use the following command:  docker compose up --build   ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Samples","url":"/docs/samples#deployment-49","content":" [!NOTE] Download Defang CLI  Defang Playground​  Deploy your application to the Defang Playground by opening up your terminal and typing:  defang compose up   BYOC (AWS)​  If you want to deploy to your own cloud account, you can use Defang BYOC:  Authenticate your AWS account, and check that you have properly set your environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY.Run in a terminal that has access to your AWS environment variables: defang --provider=aws compose up   Title: Vue.js  Short Description: A minimal Vue.js app running on Defang.  Tags: Vue.js, Vite, Node.js, Frontend, JavaScript  Languages: nodejs ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}