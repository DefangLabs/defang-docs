[
  {
    "name": "angular-express",
    "category": "nodejs",
    "readme": "# Angular & Node.js\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-angular-express-template%26template_owner%3DDefangSamples)\n\nThis project demonstrates both client-side component rendering and hydration with Angular, as well as server-side rendering with Node.js and Socket.IO for real-time communication. It also includes Docker configurations for easy deployment.\n\n## NOTE\n\nThis sample showcases how you could deploy a full-stack application with Angular and Node.js using Defang. The Docker setup ensures the app can be easily built and deployed.\n\n## Essential Setup Files\n\n1. Download [Defang CLI](https://github.com/defang-io/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/defang-io/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) make sure you have properly authenticated your AWS account\n3. [Node.js](https://nodejs.org/en/download/package-manager/)\n4. [Angular CLI](https://angular.io/cli)\n\n## A Step-by-Step Guide for deployment\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n## Development\n\nFor development, we use two local containers, one for the frontend Angular service and one for the backend service in Express. It also uses Caddy as a web server for serving static files. To run the sample locally after cloning the repository, you can run on Docker by doing:\n\n1. `docker compose -f compose.dev.yaml up --build`\n\n---\n\nTitle: Angular & Node.js\n\nShort Description: A full-stack application using Angular for the frontend and Node.js with Socket.IO for the backend, containerized with Docker.\n\nTags: Angular, Node.js, Socket.IO, TypeScript, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "angular-express",
    "title": "Angular & Node.js",
    "shortDescription": "A full-stack application using Angular for the frontend and Node.js with Socket.IO for the backend, containerized with Docker.",
    "tags": [
      "Angular",
      "Node.js",
      "Socket.IO",
      "TypeScript",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "bullmq-bullboard-redis",
    "category": "nodejs",
    "readme": "# BullMQ & BullBoard & Redis\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-bullmq-bullboard-redis-template%26template_owner%3DDefangSamples)\n\nThis sample project demonstrates how to deploy a BullMQ message queue on top of managed Redis with a queue processor and a dashboard to monitor the queue.\n\nOnce your app is up and running you can go to the `/board` route for the `board` service to see the Bull Board dashboard and use the username `admin` and the password you set to log in (see [Deploying](#deploying)).\n\nTo add a job to the queue, you can go to the `/add` route of the `api` service. This will use some default values so you can test things out. You can also see an example of a post request in the [sample http request](./api/add.test.http) file.\n\nThe `worker` service is the queue processor that will process the jobs added to the queue. You can see in the `compose.yaml` file that the `worker` service is set to scale to 2 instances. This means that there will be 2 workers processing jobs from the queue. You can set this to your desired number of workers, but we wanted to show how you can increase the number of workers to handle more jobs.\n\n## Prerequisites\n\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. (optional) If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Run `defang config set BOARD_PASSWORD` to set the password for the BullBoard dashboard.\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n## Local Development\n\n1. Run `docker compose -f compose.dev.yaml up --build`\n\n---\n\nTitle: BullMQ & BullBoard & Redis\n\nShort Description: A sample project with BullMQ, BullBoard, and Redis.\n\nTags: BullMQ, BullBoard, Redis, Express, Node.js, Message Queue, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "bullmq-bullboard-redis",
    "title": "BullMQ & BullBoard & Redis",
    "shortDescription": "A sample project with BullMQ, BullBoard, and Redis.",
    "tags": [
      "BullMQ",
      "BullBoard",
      "Redis",
      "Express",
      "Node.js",
      "Message Queue",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ],
    "configs": [
      "BOARD_PASSWORD",
      "QUEUE",
      "QUEUE",
      "QUEUE"
    ]
  },
  {
    "name": "csharp-dotnet",
    "category": "C#",
    "readme": "# C# & ASP.NET Core\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-csharp-dotnet-template%26template_owner%3DDefangSamples)\n\nThis project is a simple task manager application using ASP.NET Core. We show case how to deploy it to both Defang and Docker for both prod and dev environments.\n\n## NOTE\n\nThis sample showcases how you could deploy a full-stack application with ASP.NET Core and JavaScript using Defang. The Docker setup ensures the app can be easily built and tested during development.\n\n## Essential Setup Files\n\n1. Download [Defang CLI](https://github.com/defang-io/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/defang-io/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) make sure you have properly authenticated your AWS account\n3. [ASP.NET Core](https://dotnet.microsoft.com/download/dotnet-core)\n\n## A Step-by-Step Guide for deployment\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n## Development\n\nFor development, we use two local containers, one for the frontend service and one for the backend service in ASP.NET Core. It also uses Caddy as a web server for serving static files. To run the sample locally after cloning the repository, you can run on Docker by doing:\n\n`docker compose -f compose.dev.yaml up --build`\n\n---\n\nTitle: C# & ASP.NET Core\n\nShort Description: A task manager using ASP.NET Core containerized with Docker.\n\nTags: ASP.NET Core, JavaScript, C#\n\nLanguages: C#\n",
    "directoryName": "csharp-dotnet",
    "title": "C# & ASP.NET Core",
    "shortDescription": "A task manager using ASP.NET Core containerized with Docker.",
    "tags": [
      "ASP.NET Core",
      "JavaScript",
      "C#"
    ],
    "languages": [
      "C#"
    ]
  },
  {
    "name": "django",
    "category": "python",
    "readme": "# Django\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-django-template%26template_owner%3DDefangSamples)\n\nThis is a simple example of how to run Django on Defang. It is a simple Todo app that uses SQLite as the database.\n\n### NOTE\n\nThis sample is a simple Django app that uses SQLite as the database, which will be reset every time you deploy. **It is not production-ready**. For production use cases, you should check out the Django + Postgres sample.\n\nThe app includes a management command which is run on startup to create a superuser with the username `admin` and password `admin`. This means you can login to the admin interface at `/admin/` and see the Django admin interface without any additional steps. The `example_app` is already registered and the `Todo` model is already set up to be managed in the admin interface.\n\nThe Dockerfile and compose files are already set up for you and are ready to be deployed. Serving is done using [Gunicorn](https://gunicorn.org/) and uses [WhiteNoise](https://whitenoise.readthedocs.io/en/latest/) for static files. The `CSRF_TRUSTED_ORIGINS` setting is configured to allow the app to run on a `defang.dev` subdomain.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) to describe the basic image of your applications.\n2. A [docker-compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications.\n3. A [.dockerignore](https://docs.docker.com/build/building/context/#dockerignore-files) file to comply with the size limit (10MB).\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n   Plus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n\n1. (optional) If you are using Defang BYOC, make sure to update the `CSRF_TRUSTED_ORIGINS` setting in the `settings.py` file to include an appropriate domain.\n2. Open the terminal and type `defang login`\n3. Type `defang compose up` in the CLI\n4. Now your application will be launched\n\n---\n\nTitle: Django\n\nShort Description: A simple Django app that uses SQLite as the database.\n\nTags: Django, SQLite, Python\n\nLanguages: python\n",
    "directoryName": "django",
    "title": "Django",
    "shortDescription": "A simple Django app that uses SQLite as the database.",
    "tags": [
      "Django",
      "SQLite",
      "Python"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "django-postgres",
    "category": "python",
    "readme": "# Django & Postgres\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-django-postgres-template%26template_owner%3DDefangSamples)\n\nThis template is a customer relationship management list project developed using Python Django framework, offering a starting point to help you quickly build your customer management system. We use PostgreSQL as the database. We have prepared all the essential files for deployment. By spending less than 10 minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live to the world!\n\n## NOTE\n\nThis sample showcases how you could deploy a full-stack application with Defang and Django. However, it deploys postgres as a defang service. Defang [services](https://12factor.net/processes) are ephemeral and should not be used to run stateful workloads in production as they will be reset on every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. If you stick to Rail's default SQLite database, your stored data will be lost on every deployment, and in some other situations. In the future, Defang will help you provision and connect to managed databases.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) to describe the basic image of your applications.\n2. A [docker-compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications.\n3. A [.dockerignore](https://docs.docker.com/build/building/context/#dockerignore-files) file to comply with the size limit (10MB).\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n   Plus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide for Deployment\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Now your application will be launched\n\n---\n\nTitle: Django & PostgreSQL\n\nShort Description: A customer relationship management list project developed using the Python Django framework, offering a starting point to help you quickly build your customer management system.\n\nTags: Django, PostgreSQL, Python, SQL\n\nLanguages: python\n",
    "directoryName": "django-postgres",
    "title": "Django & PostgreSQL",
    "shortDescription": "A customer relationship management list project developed using the Python Django framework, offering a starting point to help you quickly build your customer management system.",
    "tags": [
      "Django",
      "PostgreSQL",
      "Python",
      "SQL"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "elysia",
    "category": "nodejs",
    "readme": "# Elysia & Bun\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-elysia-template%26template_owner%3DDefangSamples)\n\nA basic [Elysia](https://elysiajs.com/) app running on [Bun](https://bun.sh/) with a Dockerfile and compose.yaml ready to deploy to AWS with [Defang](https://defang.io).\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Deploying\n\n1. Run `defang login` if you are not yet logged in.\n2. Run `defang compose up`.\n3. Your app will be running within a few minutes.\n\n## Local Development\n\n1. Run `docker compose -f compose.dev.yaml up --build`\n\n---\n\nTitle: Elysia & Bun\n\nShort Description: A basic Elysia app running on Bun with Defang.\n\nTags: Bun, Elysia, TypeScript, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "elysia",
    "title": "Elysia & Bun",
    "shortDescription": "A basic Elysia app running on Bun with Defang.",
    "tags": [
      "Bun",
      "Elysia",
      "TypeScript",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "fastapi",
    "category": "python",
    "readme": "# FastAPI\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-fastapi-template%26template_owner%3DDefangSamples)\n\nThis sample project demonstrates how to deploy FastAPI with Defang.\n\n## Prerequisites\n\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. (optional) If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n## Development\n\nTo run your FastAPI app locally, you'll need to have Docker installed on your machine. You can then run:\n\n```bash\ndocker compose -f compose.yaml -f compose.dev.yaml up --build\n```\n\nThat will start your FastAPI app on `http://localhost:8000` with hot reloading enabled.\n\n---\n\nTitle: FastAPI\n\nShort Description: A sample project demonstrating how to deploy FastAPI with Defang.\n\nTags: FastAPI, OpenAPI, Python\n\nLanguages: python\n",
    "directoryName": "fastapi",
    "title": "FastAPI",
    "shortDescription": "A sample project demonstrating how to deploy FastAPI with Defang.",
    "tags": [
      "FastAPI",
      "OpenAPI",
      "Python"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "fastapi-postgres",
    "category": "python",
    "readme": "# FastAPI & PostgreSQL\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-fastapi-postgres-template%26template_owner%3DDefangSamples)\n\nThis sample project demonstrates how to deploy FastAPI with PostgreSQL with Defang.\n\n## Prerequisites\n\n1. Download <a href=\"https://github.com/defang-io/defang\">Defang CLI</a>\n2. (optional) If you are using <a href=\"https://docs.defang.io/docs/concepts/defang-byoc\">Defang BYOC</a>, make sure you have properly <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">authenticated your AWS account</a>.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n## Local Development\n\n1. Run `docker compose -f compose.dev.yaml up --build`\n\n---\n\nTitle: FastAPI & PostgreSQL\n\nShort Description: A sample project with FastAPI and PostgreSQL.\n\nTags: FastAPI, PostgreSQL, Python, SQL\n\nLanguages: python\n",
    "directoryName": "fastapi-postgres",
    "title": "FastAPI & PostgreSQL",
    "shortDescription": "A sample project with FastAPI and PostgreSQL.",
    "tags": [
      "FastAPI",
      "PostgreSQL",
      "Python",
      "SQL"
    ],
    "languages": [
      "python"
    ],
    "configs": [
      "DATABASE_URL"
    ]
  },
  {
    "name": "feathersjs",
    "category": "nodejs",
    "readme": "# Feathers.js \n\nThis sample project demonstrates how to deploy a FeathersJS application on to AWS using Defang. We also demonstrate how to run the application in both development and production environments using Docker Compose.\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-feathersjs-template%26template_owner%3DDefangSamples)\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang) (for Defang deployment)\n2. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n3. (Optional - for local development) [Node.js](https://nodejs.org/en/download/)\n\n### Local Development\n\nFor development, we use Docker to containerize the FeathersJS application. The Docker Compose configuration is defined in the `compose.dev.yaml` file.\n\nTo start the development environment, run:\n\n```sh\ndocker compose -f compose.dev.yaml up --build\n```\n\n# Deploying\n\n1. Open the terminal and type defang login\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n---\n\nTitle: Feathers.js\n\nShort Description: A sample project demonstrating how to deploy a Feathers.js application using Defang. The application displays \"DefangxFeathersjs\" on the webpage.\n\nTags: Feathers.js, Node.js, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "feathersjs",
    "title": "Feathers.js",
    "shortDescription": "A sample project demonstrating how to deploy a Feathers.js application using Defang. The application displays \"DefangxFeathersjs\" on the webpage.",
    "tags": [
      "Feathers.js",
      "Node.js",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "flask",
    "category": "python",
    "readme": "# Flask\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-flask-template%26template_owner%3DDefangSamples)\n\nThis is a sample of a basic Flask TODO app. The items are stored in memory and are lost when the server is restarted, but it should give you a basic idea of how to get started with Flask on Defang. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.\n\n### NOTE:\n\nThis sample is a simple Flask app that demonstrates how to create a TODO app using Flask. The items are stored in memory and are lost when the server is restarted. This sample is intended to provide a basic understanding of how to get started with Flask on Defang. **it is not intended for production use**. If you need something production ready, you should use a managed database like Postgres or MySQL.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed).\n3. A [.dockerignore](https://docs.docker.com/build/building/context/#dockerignore-files) to ignore files that are not needed in the Docker image or will be generated during the build process.\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n## One click deployment\n\n---\n\nTitle: Flask\n\nShort Description: A basic Flask to do app.\n\nTags: Flask, Python\n\nLanguages: python\n",
    "directoryName": "flask",
    "title": "Flask",
    "shortDescription": "A basic Flask to do app.",
    "tags": [
      "Flask",
      "Python"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "golang-http",
    "category": "golang",
    "readme": "# Go HTTP Server\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-http-template%26template_owner%3DDefangSamples)\n\nA very simple example of a Go service that listens on a port and returns information about the request.\n\n---\n\nTitle: Go HTTP Server\n\nShort Description: A simple Go application that echoes back the request.\n\nTags: Go, HTTP\n\nLanguages: golang\n",
    "directoryName": "golang-http",
    "title": "Go HTTP Server",
    "shortDescription": "A simple Go application that echoes back the request.",
    "tags": [
      "Go",
      "HTTP"
    ],
    "languages": [
      "golang"
    ]
  },
  {
    "name": "golang-http-form",
    "category": "golang",
    "readme": "# Go HTTP Form\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-http-form-template%26template_owner%3DDefangSamples)\n\nThis Go application demonstrates a simple form submission using the standard net/http library. Users can input their first name into a form, and upon submission, they will be greeted personally by the application.\n\n## Features\n\n1. Simple form to submit a user's first name.\n2. Personalized greeting displayed in response to the form submission\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Go HTTP Form\n\nShort Description: A simple Go application that demonstrates form submission using the net/http library.\n\nTags: Go, HTTP\n\nLanguages: golang\n",
    "directoryName": "golang-http-form",
    "title": "Go HTTP Form",
    "shortDescription": "A simple Go application that demonstrates form submission using the net/http library.",
    "tags": [
      "Go",
      "HTTP"
    ],
    "languages": [
      "golang"
    ]
  },
  {
    "name": "golang-mongodb-atlas",
    "category": "golang",
    "readme": "# Go & MongoDB Atlas\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-mongodb-atlas-template%26template_owner%3DDefangSamples)\n\n## Overview\n\nThis sample is is a web-based task manager designed to help users manage their tasks efficiently. It allows users to add, delete, and view tasks in a simple and intuitive interface. This application is ideal for anyone looking to enhance their productivity by keeping track of their daily activities. There is a go.mod file that includes dependencies for the Dockerfile to install\n\n## Features\n\nCreate Tasks: Users can add new tasks with descriptions.\nDelete Tasks: Users can remove tasks when they are completed or no longer needed.\nView Tasks: Users can view a list of their current tasks.\n\n## Technology\n\nBackend: The application is built with Go (Golang), utilizing the powerful net/http standard library for handling HTTP requests and responses.\nDatabase: MongoDB is used for storing tasks. It is a NoSQL database that offers high performance, high availability, and easy scalability.\nFrontend: Basic HTML and JavaScript are used for the frontend to interact with the backend via API calls.\nEnvironment: Designed to run in containerized environments using Docker, which ensures consistency across different development and production environments.\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n   Plus, make sure that you have properly set all environment variables up\n3. There is a environment variable named MONGO_URI for the MONGODB connection string, in the compose file, be sure to put your mongodb URI, i.e.\n   mongodb+srv://<username>:<pwd>@host\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Go & MongoDB Atlas\n\nShort Description: A simple Go application that manages tasks with MongoDB Atlas.\n\nTags: Go, MongoDB, Atlas, Task Manager\n\nLanguages: golang\n",
    "directoryName": "golang-mongodb-atlas",
    "title": "Go & MongoDB Atlas",
    "shortDescription": "A simple Go application that manages tasks with MongoDB Atlas.",
    "tags": [
      "Go",
      "MongoDB",
      "Atlas",
      "Task Manager"
    ],
    "languages": [
      "golang"
    ]
  },
  {
    "name": "golang-openai",
    "category": "golang",
    "readme": "# Golang & OpenAI\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-mongodb-atlas-template%26template_owner%3DDefangSamples)\n\n## Setup\n\nThis sample requires an API key to access the OpenAI API. The name of the config value is referenced in the compose.yaml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name OPENAI_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\n\n```\necho \"Hello\" | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\n\nor\n\n```\ncat prompt.txt | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\n\n---\n\nTitle: Go & OpenAI\n\nShort Description: A simple Go application that interacts with the OpenAI API.\n\nTags: Go, OpenAI, ChatGPT\n\nLanguages: golang\n",
    "directoryName": "golang-openai",
    "title": "Go & OpenAI",
    "shortDescription": "A simple Go application that interacts with the OpenAI API.",
    "tags": [
      "Go",
      "OpenAI",
      "ChatGPT"
    ],
    "languages": [
      "golang"
    ],
    "configs": [
      "OPENAI_KEY"
    ]
  },
  {
    "name": "golang-rest-api",
    "category": "golang",
    "readme": "# Go & REST API\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-rest-api-template%26template_owner%3DDefangSamples)\n\nThis is a simple HTTP server written in Go that serves two endpoints: / and /rates. The / endpoint responds with a JSON object containing the status, while the /rates endpoint fetches data from the Fiscal Data Treasury API and returns the response to the client.\n\n---\n\nTitle: Go & REST API\n\nShort Description: A simple Go application that fetches fiscal data from an API.\n\nTags: Go, HTTP, Fiscal Data, REST API\n\nLanguages: golang\n",
    "directoryName": "golang-rest-api",
    "title": "Go & REST API",
    "shortDescription": "A simple Go application that fetches fiscal data from an API.",
    "tags": [
      "Go",
      "HTTP",
      "Fiscal Data",
      "REST API"
    ],
    "languages": [
      "golang"
    ]
  },
  {
    "name": "golang-s3",
    "category": "golang",
    "readme": "# Go & S3\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-s3-template%26template_owner%3DDefangSamples)\n\n## Setup\n\nThis sample requires an API key to access AWS S3. The name of the config value is referenced in the compose.yaml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name AWS_ACCESS_KEY\ndefang config set --name AWS_SECRET_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\n\ncurl -X POST -H 'Content-Type: application/json' -d '{ \"first_name\" : \"jane\", \"last_name\" : \"doe\" }' https://xxxxxx/upload\ncurl https://xxxxxx/download\n\n---\n\nTitle: Go & S3\n\nShort Description: A simple Go application that uploads and downloads files from AWS S3.\n\nTags: Go, S3, AWS\n\nLanguages: golang\n",
    "directoryName": "golang-s3",
    "title": "Go & S3",
    "shortDescription": "A simple Go application that uploads and downloads files from AWS S3.",
    "tags": [
      "Go",
      "S3",
      "AWS"
    ],
    "languages": [
      "golang"
    ],
    "configs": [
      "AWS_ACCESS_KEY",
      "AWS_SECRET_KEY"
    ]
  },
  {
    "name": "golang-slackbot",
    "category": "golang",
    "readme": "# Go & Slack API\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-golang-slackbot-template%26template_owner%3DDefangSamples)\n\nThis is a simple slackbot that takes a request and posts the message from the body to a slack channel.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/getting-started).\n\n### Slack API Token\n\nYou'll need to head to https://api.slack.com/apps to create a Slack App.\n\nMake sure to:\n\n- Give it the bot `chat:write` scope\n- Install the app to your workspace\n- Copy the Bot User OAuth Access Token\n- Invite your bot to the channel you want it to post to using the `@botname` command in the channel (this will allow you to invite it)\n\n## Configure\n\nBefore deploying the Slackbot, you need to set up some config values. These config values are environment variables that the Slackbot needs to function correctly. The values are:\n\n- `SLACK_TOKEN`: This is the token you copied previously for the Slack API.\n- `SLACK_CHANNEL_ID`: This is the ID of the Slack channel where the bot will post messages.\n\nYou can set these config parameters using the `defang config set` command. Here's how:\n\n```sh\ndefang config set --name SLACK_TOKEN --value your_slack_token\ndefang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id\n```\n\n## Deploy\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang playground.\n\n```sh\ndefang compose up\n```\n\n## Usage\n\nOnce the Slackbot is deployed, you can send a POST request to the `/` endpoint with a JSON body containing the message you want to post to the Slack channel. Here's an example:\n\n```sh\ncurl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\\n  -H 'content-type: application/json' \\\n  --data-raw $'{\"message\":\"This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.\"}'\n```\n\n---\n\nTitle: Go & Slack API\n\nShort Description: A simple Slackbot that posts messages to a Slack channel.\n\nTags: Go, Slack, Bot\n\nLanguages: golang\n",
    "directoryName": "golang-slackbot",
    "title": "Go & Slack API",
    "shortDescription": "A simple Slackbot that posts messages to a Slack channel.",
    "tags": [
      "Go",
      "Slack",
      "Bot"
    ],
    "languages": [
      "golang"
    ],
    "configs": [
      "SLACK_TOKEN",
      "SLACK_CHANNEL_ID"
    ]
  },
  {
    "name": "hasura",
    "category": "SQL",
    "readme": "# Hasura & PostgreSQL\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-hasura-template%26template_owner%3DDefangSamples)\n\nThis sample project demonstrates how to deploy Hasura with Defang and connect it to a Postgres database. We also demonstrate how to run a Postgres container during development and how to switch over to a managed postgres service like RDS, Neon, or others in production. If you want to get a compatible database ready to go really quickly for free, [Neon](https://neon.tech/) is a quick and easy way to go. The sample populates the database with some sample data so you can quickly start playing with the Hasura console. It sets wide open permissions on the tables as well so you can start querying or mutating the data right away.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. Have a managed database service configured and have the connection string ready.\n3. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n4. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n5. (Optional) [Install the Hasura CLI](https://hasura.io/docs/latest/hasura-cli/install-hasura-cli/) to create migrations and update metadata for your Hasura GraphQL api.\n\n## Development\n\nFor development, we use a Postgres container. The Postgres container is defined in the `compose.dev.yaml` file. The Hasura container is defined in the `compose.yaml` file, with some overrides in the `compose.dev.yaml` file so it can correctly connect to the development database container.\n\nTo start the development environment, run `docker compose -f ./compose.yaml -f ./compose.dev.yaml up`. This will start the Postgres container and the Hasura container. The Hasura console will be available at `http://localhost:8080` with the password `password`.\n**Note:** _If you want to make changes to your database, permissions, etc. you should use the Hasura console and the Hasura CLI to make those changes. See the next section for more information._\n\n### Editing the database/permissions etc.\n\nIf you want to edit the database, permissions, or any other Hasura settings such that you can deploy them to production, you should [install the Hasura CLI](https://hasura.io/docs/latest/hasura-cli/install-hasura-cli/). Then, after starting the development environment, you can run `hasura console` _inside the `./hasura` directory_. This will open the Hasura console in your browser. Any changes you make in the console will be saved to the `migrations` and `metadata` directories. When you run `defang compose up` these changes will be applied to the production environment.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Add your connection string as a defang config value by typing `defang config set HASURA_GRAPHQL_DATABASE_URL` and pasting your connection string (which should be in the format `postgres://username:password@host:port/dbname`)\n3. Setup a password for hasura by typing `defang config set HASURA_GRAPHQL_ADMIN_SECRET` and adding a password you would like to login with.\n4. Type `defang compose up` in the CLI.\n5. Your app will be running within a few minutes.\n\n---\n\nTitle: Hasura & PostgreSQL\n\nShort Description: A sample project demonstrating how to deploy Hasura with Defang and connect it to a PostgreSQL database.\n\nTags: Hasura, GraphQL, PostgreSQL, Database\n\nLanguages: SQL, GraphQL\n",
    "directoryName": "hasura",
    "title": "Hasura & PostgreSQL",
    "shortDescription": "A sample project demonstrating how to deploy Hasura with Defang and connect it to a PostgreSQL database.",
    "tags": [
      "Hasura",
      "GraphQL",
      "PostgreSQL",
      "Database"
    ],
    "languages": [
      "SQL",
      "GraphQL"
    ],
    "configs": [
      "HASURA_GRAPHQL_DATABASE_URL",
      "HASURA_GRAPHQL_ADMIN_SECRET"
    ]
  },
  {
    "name": "html-css-js",
    "category": "nodejs",
    "readme": "# HTML & CSS & JavaScript\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-html-css-javascript-template%26template_owner%3DDefangSamples)\n\nThis sample shows how to get a static HTML + CSS + JavaScript website up and running with Defang.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command:\n\n```bash\ndocker compose up --build\n```\n\n\n## Deployment\n\n> [!NOTE]\n> Download [Defang CLI](https://github.com/DefangLabs/defang)\n\n### Defang Playground\n\nDeploy your application to the Defang Playground by opening up your terminal and typing:\n```bash\ndefang compose up\n```\n\n### BYOC (AWS)\n\nIf you want to deploy to your own cloud account, you can use Defang BYOC:\n\n1. [Authenticate your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), and check that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n2. Run in a terminal that has access to your AWS environment variables:\n    ```bash\n    defang --provider=aws compose up\n    ```\n---\n\nTitle: HTML & CSS & JavaScript\n\nShort Description: A simple HTML + CSS + JavaScript website running on Defang. \n\nTags: HTML, CSS, JavaScript, Frontend\n\nLanguages: nodejs\n",
    "directoryName": "html-css-js",
    "title": "HTML & CSS & JavaScript",
    "shortDescription": "A simple HTML + CSS + JavaScript website running on Defang. ",
    "tags": [
      "HTML",
      "CSS",
      "JavaScript",
      "Frontend"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "huginn",
    "category": "Dockerfile",
    "readme": "# Huginn\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-huginn-template%26template_owner%3DDefangSamples)\n\nHuginn is a system for building agents that perform automated tasks for you online. Huginn's Agents can monitor the web, respond to events, and act on your behalf. They propagate events along a directed graph. It's like a customizable IFTTT or Zapier on your own server, ensuring data privacy.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. Have a managed database service configured and have the connection details ready. Neon postgres is a good free option.\n3. (optional) If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html).\n\n## Local\n\nFor development, we use a Postgres container. The Postgres container is defined in the `compose.dev.yaml` file. The Huginn container is defined in the `compose.yaml` file, with some overrides in the `compose.dev.yaml` file so it can correctly connect to the local database container.\n\nTo start the local environment, run `docker compose -f ./compose.yaml -f ./compose.dev.yaml up`. This will start the Postgres container and the Huginn container. Huginn will be available at `http://localhost:3000` with the username `admin` and password `password`.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Add your database connection details using `defang config` by typing `defang config set <CONFIG_VAL>` where `<CONFIG_VAL>` is the each of the following `DATABASE_NAME`, `DATABASE_USERNAME`, `DATABASE_PASSWORD`, `DATABASE_HOST`. For example `defang config set DATABASE_NAME` and pasting your database name.\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n---\n\nTitle: Huginn\n\nShort Description: A system for building agents that perform automated tasks for you online.\n\nTags: Huginn, Agents, Automation\n\nLanguages: Dockerfile\n",
    "directoryName": "huginn",
    "title": "Huginn",
    "shortDescription": "A system for building agents that perform automated tasks for you online.",
    "tags": [
      "Huginn",
      "Agents",
      "Automation"
    ],
    "languages": [
      "Dockerfile"
    ],
    "configs": [
      "DATABASE_NAME",
      "DATABASE_USERNAME",
      "DATABASE_PASSWORD",
      "DATABASE_HOST"
    ]
  },
  {
    "name": "imgproxy",
    "category": "N/A",
    "readme": "# ImgProxy\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-imgproxy-template%26template_owner%3DDefangSamples)\n\nImgProxy is a fast and secure standalone server for resizing and converting remote images. It can be deployed using the official Docker image, as documented [here](https://docs.imgproxy.net/installation#docker).\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/getting-started).\n\n## Build and run the application\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang cloud.\n\n```sh\ndefang compose up\n```\n\n---\n\nTitle: ImgProxy\n\nShort Description: A fast and secure standalone server for resizing and converting remote images\n\nTags: Imgproxy, Images, Server\n\nLanguages: N/A\n",
    "directoryName": "imgproxy",
    "title": "ImgProxy",
    "shortDescription": "A fast and secure standalone server for resizing and converting remote images",
    "tags": [
      "Imgproxy",
      "Images",
      "Server"
    ],
    "languages": [
      "N/A"
    ]
  },
  {
    "name": "javalin",
    "category": "java",
    "readme": "# Javalin Sample\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-javalin-template%26template_owner%3DDefangSamples)\n\nThis sample demonstrates how to deploy a very basic Javalin sample with Defang. The sample simply outputs \"Defang x Javalin\" on the webpage.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n## Development\n\nFor development, we use a local container. This can be seen in the compose.yaml file. To run the sample locally use the following command:\n\n```bash\ndocker compose up --build\n```\n\n---\n\nTitle: Javalin\n\nShort Description: A short hello world application demonstrating how to deploy Javalin onto Defang.\n\nTags: Javalin, Java, Maven\n\nLanguages: java\n",
    "directoryName": "javalin",
    "title": "Javalin",
    "shortDescription": "A short hello world application demonstrating how to deploy Javalin onto Defang.",
    "tags": [
      "Javalin",
      "Java",
      "Maven"
    ],
    "languages": [
      "java"
    ]
  },
  {
    "name": "langchain",
    "category": "python",
    "readme": "# Langchain & Flask\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-langchain-template%26template_owner%3DDefangSamples)\n\nThis sample is an endpoint that tells programming jokes and shows how to deploy a flask app that uses Langchain on to AWS via Defang.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Set the environment variable `OPENAI_KEY` by typing `defang config set OPENAI_KEY`.\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n## Development\n\nFor development, first clone the project and navigate to its directory. After such, please run the command\n\n```\ndocker compose up --build\n```\n\nThis will start a Docker container with the flask app which will display the result of the langchain prompt.\n\n---\n\nTitle: LangChain & Flask\n\nShort Description: A sample project demonstrating how to deploy LangChain with Flask on Defang.\n\nTags: LangChain, Flask, AI, Python\n\nLanguages: python\n",
    "directoryName": "langchain",
    "title": "LangChain & Flask",
    "shortDescription": "A sample project demonstrating how to deploy LangChain with Flask on Defang.",
    "tags": [
      "LangChain",
      "Flask",
      "AI",
      "Python"
    ],
    "languages": [
      "python"
    ],
    "configs": [
      "OPENAI_KEY"
    ]
  },
  {
    "name": "metabase",
    "category": "SQL",
    "readme": "# Metabase & Postgres\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-metabase-template%26template_owner%3DDefangSamples)\n\nMetabase is a simple and powerful analytics tool which lets anyone learn and make decisions from their company’s data. This sample demonstrates how to deploy Metabase with Defang. In development, we run a postgres container and in production, we use a managed postgres service. To build the sample, we used Neon, because of their simplicity and generous free tier.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. Have a managed database service configured and have the connection details ready.\n3. (optional) If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html).\n\n## Local\n\nFor development, we use a Postgres container. The Postgres container is defined in the `compose.dev.yaml` file. The Metabase container is defined in the `compose.yaml` file, with some overrides in the `compose.dev.yaml` file so it can correctly connect to the development database container.\n\nTo start the development environment, run `docker compose -f ./compose.yaml -f ./compose.dev.yaml up`. This will start the Postgres container and the Metabase container. Metabase will be available at `http://localhost:3000`.\n\nSince Metabase is a self contained application, there isn't an actual development process, but you can use the development environment to see how Metabase works.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Add your database connection details using `defang config` by typing `defang config set <CONFIG_VAL>` where `<CONFIG_VAL>` is the each of the following `MB_DB_DBNAME`, `MB_DB_HOST`, `MB_DB_PORT`, `MB_DB_USER`, `MB_DB_PASS` (to set the database name, host, port, user, and password respectively). For example `defang config set MB_DB_DBNAME` and pasting your database name.\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n---\n\nTitle: Metabase & PostgreSQL\n\nShort Description: A simple Metabase configuration with a PostgreSQL database.\n\nTags: Metabase, PostgreSQL, Analytics, Database\n\nLanguages: SQL\n",
    "directoryName": "metabase",
    "title": "Metabase & PostgreSQL",
    "shortDescription": "A simple Metabase configuration with a PostgreSQL database.",
    "tags": [
      "Metabase",
      "PostgreSQL",
      "Analytics",
      "Database"
    ],
    "languages": [
      "SQL"
    ],
    "configs": [
      "MB_DB_DBNAME",
      "MB_DB_PORT",
      "MB_DB_USER",
      "MB_DB_PASS",
      "MB_DB_HOST"
    ]
  },
  {
    "name": "nextjs",
    "category": "nodejs",
    "readme": "# Next.js\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nextjs-template%26template_owner%3DDefangSamples)\n\nA basic Next.js app with a Dockerfile and compose.yaml ready to deploy to AWS with [Defang](https://defang.io).\n\n## Steps\n\n1. [Install Defang](https://docs.defang.io/docs/getting-started/installing)\n2. [Authenticate with Defang](https://docs.defang.io/docs/getting-started/authenticating)\n3. (optional) [Authenticate with AWS](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n4. Run `defang compose up` in the root of this project\n\n---\n\nTitle: Next.js\n\nShort Description: A basic Next.js app.\n\nTags: Next.js, React, Docker, AWS, Node.js, TypeScript, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nextjs",
    "title": "Next.js",
    "shortDescription": "A basic Next.js app.",
    "tags": [
      "Next.js",
      "React",
      "Docker",
      "AWS",
      "Node.js",
      "TypeScript",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nextjs-blog",
    "category": "nodejs",
    "readme": "# Next.js Blog\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nextjs-blog-template%26template_owner%3DDefangSamples)\n\nThis template is a starter project developed using Next.js designed to make it easy to launch a blog. It offers an excellent starting point to help you publish your content by simply modifying the MDX files included in `_posts` directory. We have prepared all the necessary files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) to describe the basic image of your applications.\n2. A [docker-compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications.\n3. A [.dockerignore](https://docs.docker.com/build/building/context/#dockerignore-files) file to comply with the size limit (10MB).\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n   Plus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n\n1. Edit your content in the `_posts` directory\n2. Open the terminal and type `defang login`\n3. Type `defang compose up` in the CLI\n4. Now your application will be launched\n\n---\n\nTitle: Next.js Blog\n\nShort Description: A starter project developed using Next.js designed to make it easy to launch a blog.\n\nTags: Next.js, Blog, Node.js, React, MDX, TypeScript, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nextjs-blog",
    "title": "Next.js Blog",
    "shortDescription": "A starter project developed using Next.js designed to make it easy to launch a blog.",
    "tags": [
      "Next.js",
      "Blog",
      "Node.js",
      "React",
      "MDX",
      "TypeScript",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nextjs-documentation",
    "category": "nodejs",
    "readme": "# Nextra\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nextjs-documentation-template%26template_owner%3DDefangSamples)\n\nThis template is a documentation starter project developed using Nextra, designed to streamline the creation of your documentation and quickly build a digital knowledgebase. You can add content easily by simply adding markdown files. This code-free solution requires no adjustments to the basic structure. We have prepared all the essential files for deployment. By spending just a few minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live in no time!\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) to describe the basic image of your applications.\n2. A [docker-compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications.\n3. A [.dockerignore](https://docs.docker.com/build/building/context/#dockerignore-files) file to comply with the size limit (10MB).\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n   Plus, make sure that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Now your application will be launched\n\n---\n\nTitle: Nextra\n\nShort Description: A documentation starter project developed using Nextra designed to streamline the creation of your documentation.\n\nTags: Next.js, Documentation, Nextra, Knowledgebase, Node.js, JavaScript, TypeScript\n\nLanguages: nodejs\n",
    "directoryName": "nextjs-documentation",
    "title": "Nextra",
    "shortDescription": "A documentation starter project developed using Nextra designed to streamline the creation of your documentation.",
    "tags": [
      "Next.js",
      "Documentation",
      "Nextra",
      "Knowledgebase",
      "Node.js",
      "JavaScript",
      "TypeScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nextjs-postgres",
    "category": "TypeScript",
    "readme": "# Next.js & Postgres\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nextjs-postgres-template%26template_owner%3DDefangSamples)\n\nThis is a sample Next.js application that uses Postgres as a database. It is a simple example that demonstrates how to connect to a Postgres database from a Next.js application: on each request it takes the user's IP address, geo-locates it, and stores the result in the database, then displays the last 20 results on the home page.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command:\n\n```bash\ndocker compose -f compose.dev.yaml up --build\n```\n\n## Configuration\n\nFor this sample, you will need to provide the following [configuration](https://docs.defang.io/docs/concepts/configuration). Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.\n\n### `POSTGRES_PASSWORD`\nA password that will be used to connect to the Postgres database.\n\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Use the [`defang config`](https://docs.defang.io/docs/concepts/compose#configuration) command to setup environment variables.\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n---\n\nTitle: Next.js & Postgres\n\nShort Description: A sample Next.js application that uses Postgres as a database.\n\nTags: Next.js, Postgres, Database, Node.js\n\nLanguages: TypeScript, JavaScript\n",
    "directoryName": "nextjs-postgres",
    "title": "Next.js & Postgres",
    "shortDescription": "A sample Next.js application that uses Postgres as a database.",
    "tags": [
      "Next.js",
      "Postgres",
      "Database",
      "Node.js"
    ],
    "languages": [
      "TypeScript",
      "JavaScript"
    ],
    "configs": [
      "POSTGRES_PASSWORD",
      "POSTGRES_PASSWORD"
    ]
  },
  {
    "name": "nocodb",
    "category": "Dockerfile",
    "readme": "# NocoDB\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nocodb-template%26template_owner%3DDefangSamples)\n\nThis sample demonstrates how to deploy a Nocodb instance with Defang. It's an open source alternative to AirTable, that makes it easy to organize and manage data.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. A Postgres database\n3. S3 bucket and credentials, or S3 compatible alternative\n4. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n5. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Configuration\n\nFor this sample, you will need to provide the following [configuration](https://docs.defang.io/docs/concepts/configuration). Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.\n\n### `NC_DB`\n\nPostgres database URL. NocoDB uses an odd, custom format for this. It should look like this: `pg://my.pg.hostname.com:5432?u=postgres&p=password&d=nocodb&ssl=true`. [Neon](https://neon.tech/) has a free tier and is easy to set up.\n\n### `NC_S3_ENDPOINT`\n\nS3 endpoint URL. [Wasabi](https://wasabi.com/) is a simple option for this if you don't already have an S3 bucket or don't have an AWS account you can use.\n\n### `NC_S3_BUCKET_NAME`\n\nName of the S3 bucket.\n\n### `NC_S3_REGION`\n\nRegion of the S3 bucket.\n\n### `NC_S3_ACCESS_KEY`\n\nAccess key for the S3 bucket.\n\n### `NC_S3_ACCESS_SECRET`\n\nAccess secret for the S3 bucket.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Use the deploy the configuration values specified above using the [`defang config set` command](https://docs.defang.io/docs/concepts/configuration).\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n## Development\n\nFor development, we use a local postgres container and a volume mount for file uploads. To run the app locally, just run:\n\n`docker compose --file compose.dev.yaml up --build`\n\n---\n\nTitle: NocoDB\n\nShort Description: An open source alternative to AirTable.\n\nTags: NocoDB\n\nLanguages: Dockerfile\n",
    "directoryName": "nocodb",
    "title": "NocoDB",
    "shortDescription": "An open source alternative to AirTable.",
    "tags": [
      "NocoDB"
    ],
    "languages": [
      "Dockerfile"
    ],
    "configs": [
      "NC_DB",
      "NC_S3_ENDPOINT",
      "NC_S3_BUCKET_NAME",
      "NC_S3_REGION",
      "NC_S3_ACCESS_KEY",
      "NC_S3_ACCESS_SECRET"
    ]
  },
  {
    "name": "nodejs-chatroom",
    "category": "nodejs",
    "readme": "# Node.js & SocketIO\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-chatroom-template%26template_owner%3DDefangSamples)\n\nThis is a minimal chat application that shows how to use Socket.IO with Node.js with minimal code deployed with Defang.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/getting-started).\n\n## Build and run the application\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang cloud.\n\n```sh\ndefang compose up\n```\n\n---\n\nTitle: Node.js & SocketIO\n\nShort Description: A minimal chat application that shows how to use Socket.IO with Node.js.\n\nTags: Node.js, Chat, Socket.IO, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-chatroom",
    "title": "Node.js & SocketIO",
    "shortDescription": "A minimal chat application that shows how to use Socket.IO with Node.js.",
    "tags": [
      "Node.js",
      "Chat",
      "Socket.IO",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nodejs-express",
    "category": "nodejs",
    "readme": "# Node.js & Express\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-express-template%26template_owner%3DDefangSamples)\n\nThis Node.js application, built with Express.js, is designed to inspect and display detailed information about incoming HTTP requests. It supports all HTTP methods and provides insights into the request path, method, headers, query parameters, and body. Note alongside your project, you should also include a package.json file that includes the relevant metadata such as package dependencies, scripts, project verrsions so that the Dockerfile can install necessary dependencies.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed).\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Node.js & Express\n\nShort Description: A Node.js application that inspects and displays detailed information about incoming HTTP requests.\n\nTags: Node.js, Express, HTTP, Request, Inspector, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-express",
    "title": "Node.js & Express",
    "shortDescription": "A Node.js application that inspects and displays detailed information about incoming HTTP requests.",
    "tags": [
      "Node.js",
      "Express",
      "HTTP",
      "Request",
      "Inspector",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nodejs-form",
    "category": "nodejs",
    "readme": "# Node.js Express Form\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-form-template%26template_owner%3DDefangSamples)\n\nThis is a basic Node.js application using the Express framework to demonstrate handling a form submission. The application serves an HTML form where users can input their first name and then greets them personally upon submission. Note alongside your project, you should also include a package.json file that includes the relevant metadata such as package dependencies, scripts, project verrsions so that the Dockerfile can install necessary dependencies.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed).\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Node.js Express Form\n\nShort Description: A Node.js application that handles form submissions using the Express framework.\n\nTags: Node.js, Express, HTTP, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-form",
    "title": "Node.js Express Form",
    "shortDescription": "A Node.js application that handles form submissions using the Express framework.",
    "tags": [
      "Node.js",
      "Express",
      "HTTP",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nodejs-http",
    "category": "nodejs",
    "readme": "# Node.js HTTP Server\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-http-template%26template_owner%3DDefangSamples)\n\nThis example shows how to build a minimal Node.js application using the [Node.js](https://nodejs.org/) runtime.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/getting-started).\n\n## Build and run the application\n\nIf you have environment variables configured for your [own cloud account](https://docs.defang.io/docs/concepts/defang-byoc), this will deploy the application to your cloud account, otherwise it will deploy to the Defang cloud.\n\n```sh\ndefang compose up\n```\n\n---\n\nTitle: Node.js HTTP Server\n\nShort Description: A simple Node.js application that creates an HTTP server.\n\nTags: Node.js, HTTP, Server\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-http",
    "title": "Node.js HTTP Server",
    "shortDescription": "A simple Node.js application that creates an HTTP server.",
    "tags": [
      "Node.js",
      "HTTP",
      "Server"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nodejs-openai",
    "category": "nodejs",
    "readme": "# Node.js & OpenAI\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-openai-template%26template_owner%3DDefangSamples)\n\n## Setup\n\nThis sample requires an API key to access the OpenAI API. The name of the config value is referenced in the compose.yaml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\n\ndefang config set --name OPENAI_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\n\n```\necho \"Hello\" | curl -H \"Content-Type: text/plain\" -d @- https://xxxxxxxx/prompt\n```\n\nor\n\n```\ncat prompt.txt | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\n\n---\n\nTitle: Node.js & OpenAI\n\nShort Description: A simple Node.js application that interacts with the OpenAI API.\n\nTags: Node.js, OpenAI, API, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-openai",
    "title": "Node.js & OpenAI",
    "shortDescription": "A simple Node.js application that interacts with the OpenAI API.",
    "tags": [
      "Node.js",
      "OpenAI",
      "API",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ],
    "configs": [
      "OPENAI_KEY"
    ]
  },
  {
    "name": "nodejs-react-postgres",
    "category": "nodejs",
    "readme": "# Node.js & React & PostgreSQL\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-react-postgres-template%26template_owner%3DDefangSamples)`\n\nThis sample project demonstrates how to deploy a full-stack application using React for the frontend, Node.js for the backend, and PostgreSQL for the database. The project uses Docker to containerize the services, making it easy to run in both development and production environments.\n\nIn this sample, we have set up the essential files you need to deploy in production using [Neon](https://neon.tech/) to host your database. We use a connection string to connect Neon to your code. By replacing the pre-configured connection string at .env and at the compose file to yours, you will be ready to deploy this sample with Neon.\n\n## Essential Setup Files\n\n1. Download [Defang CLI] (https://github.com/defang-io/defang)\n2. (optional) If you are using [Defang BYOC] (https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated your AWS account.\n3. (optional for local development) [Docker CLI] (https://docs.docker.com/engine/install/)\n\n## Development\n\nTo start the development environment, run `docker compose -f ./compose.yaml -f ./compose.dev.yaml up`. This will start the Postgres container, the React container, and the NodeJS container. The development container (compose.dev.yaml) will override the production container (compose.yaml).\n\nOr run without using Docker by doing the following:\n\n1. run npm install to install the nodejs dependencies in both the `client` directory and the `server` directory\n2. create or modify the .env file in both the `client` directory and the `server` directory with localhost, or create a .env.local to override the .env file.\n3. run npm start\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Add your connection string as a defang config value by typing `defang config set DATABASE_URL` and pasting your connection string (which should be in the format `postgres://username:password@host:port/dbname`)\n3. Update your `compose.yaml` file to replace `<YOUR_USERNAME>` with your username (which you can get by running `defang whoami`. \"Tenant\" is your username.)\n4. Type `defang compose up` in the CLI.\n5. Your app will be running within a few minutes.\n\n---\n\nTitle: Node.js & React & PostgreSQL\n\nShort Description: A full-stack to-do list application.\n\nTags: Node.js, React, Full-stack, PostgreSQL, JavaScript, SQL\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-react-postgres",
    "title": "Node.js & React & PostgreSQL",
    "shortDescription": "A full-stack to-do list application.",
    "tags": [
      "Node.js",
      "React",
      "Full-stack",
      "PostgreSQL",
      "JavaScript",
      "SQL"
    ],
    "languages": [
      "nodejs"
    ],
    "configs": [
      "DATABASE_URL"
    ]
  },
  {
    "name": "nodejs-rest-api",
    "category": "nodejs",
    "readme": "# Node.js & REST API\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-rest-api-template%26template_owner%3DDefangSamples)\n\nThis is a simple Node.js application that uses Express.js to create a REST API. It has two endpoints: one that returns a status message, and another that fetches and returns average interest rates data from the U.S. Department of the Treasury's Fiscal Data API.\n\n---\n\nTitle: Node.js & REST API\n\nShort Description: A simple Node.js application that creates a REST API and fetches data from the U.S. Department of the Treasury's Fiscal Data API.\n\nTags: Node.js, REST API, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-rest-api",
    "title": "Node.js & REST API",
    "shortDescription": "A simple Node.js application that creates a REST API and fetches data from the U.S. Department of the Treasury's Fiscal Data API.",
    "tags": [
      "Node.js",
      "REST API",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "nodejs-s3",
    "category": "nodejs",
    "readme": "# Node.js & S3\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-nodejs-s3-template%26template_owner%3DDefangSamples)\n\n## Setup\n\nThis sample requires an API key to access AWS S3. The name of the config value is referenced in the compose.yaml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name AWS_ACCESS_KEY\ndefang config set --name AWS_SECRET_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\n\ncurl -X POST -H 'Content-Type: application/json' -d '{ \"first_name\" : \"jane\", \"last_name\" : \"doe\" }' https://xxxxxx/upload\ncurl https://xxxxxx/download\n\n---\n\nTitle: Node.js & S3\n\nShort Description: A simple Node.js application that uploads and downloads files from AWS S3.\n\nTags: Node.js, S3, AWS, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "nodejs-s3",
    "title": "Node.js & S3",
    "shortDescription": "A simple Node.js application that uploads and downloads files from AWS S3.",
    "tags": [
      "Node.js",
      "S3",
      "AWS",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ],
    "configs": [
      "AWS_ACCESS_KEY",
      "AWS_SECRET_KEY"
    ]
  },
  {
    "name": "ollama",
    "category": "Typescript",
    "readme": "# Ollama\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-ollama-template%26template_owner%3DDefangSamples)\n\nThis sample demonstrates how to deploy [Ollama](https://ollama.com/) with Defang, along with a Next.js frontend using the [AI SDK](https://www.npmjs.com/package/ai) for smooth streaming conversations. By default it runs a very small model (`llama3.2:1b`) which can perform well with just a CPU, but we've included lines that you can uncomment in the compose file to enable GPU support and run a larger model like `gemma:7b`. If you want to deploy to a GPU powered instance, you will need to use your own AWS account with [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc).\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command:\n\n```bash\ndocker compose -f compose.dev.yaml up\n```\n\n## Deployment\n\n> [!NOTE]\n> Download [Defang CLI](https://github.com/DefangLabs/defang)\n\n### Defang Playground\n\nDeploy your application to the defang playground by opening up your terminal and typing `defang up`.\n\n**Keep in mind that the playground does not support GPU instances.**\n\n### BYOC (AWS)\n\nIf you want to deploy to your own cloud account, you can use Defang BYOC:\n\n1. [Authenticate your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), and that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n2. Run `defang up` in a terminal that has access to your AWS environment variables.\n\n---\n\nTitle: Ollama\n\nShort Description: Ollama is a tool that lets you easily run large language models.\n\nTags: AI, LLM, ML, Llama, Mistral, Next.js, AI SDK, \n\nLanguages: Typescript\n",
    "directoryName": "ollama",
    "title": "Ollama",
    "shortDescription": "Ollama is a tool that lets you easily run large language models.",
    "tags": [
      "AI",
      "LLM",
      "ML",
      "Llama",
      "Mistral",
      "Next.js",
      "AI SDK",
      ""
    ],
    "languages": [
      "Typescript"
    ]
  },
  {
    "name": "phoenix-postgres",
    "category": "Elixir",
    "readme": "# Phoenix & Postgres\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-phoenix-postgres-template%26template_owner%3DDefangSamples)\n\nDefang is the easiest way to deploy containerized apps like this Phoenix + Postgres sample to AWS. This is a sample Phoenix application that uses a PostgreSQL database. The sample doesn't add anything to the database, but is based off of the default Phoenix getting started instructions which add a postgres database to the application.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command:\n\n```bash\ndocker compose -f compose.yaml -f compose.dev.yaml up --build\n```\n\nThis will run Phoenix in development mode. If you need to run any commands in the container, after you have run the command above and started the container, you can run the command in a new terminal:\n\n```bash\ndocker compose -f compose.yaml -f compose.dev.yaml exec phoenix bash\n```\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Provide values for `SECRET_KEY_BASE` and `DATABASE_URL`\n   - `SECRET_KEY_BASE` is a secret key used by Phoenix to sign cookies and other things. You can generate one by running `docker compose -f compose.yaml -f compose.dev.yaml run --rm phoenix mix phx.gen.secret`\n   - `DATABASE_URL` is the connection string for your PostgreSQL database. It should look something like `ecto://username:password@hostname/dbname`\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n---\n\nTitle: Phoenix & PostgreSQL\n\nShort Description: A sample Phoenix application that uses a PostgreSQL database.\n\nTags: Phoenix, PostgreSQL, Database, Elixir\n\nLanguages: Elixir\n",
    "directoryName": "phoenix-postgres",
    "title": "Phoenix & PostgreSQL",
    "shortDescription": "A sample Phoenix application that uses a PostgreSQL database.",
    "tags": [
      "Phoenix",
      "PostgreSQL",
      "Database",
      "Elixir"
    ],
    "languages": [
      "Elixir"
    ],
    "configs": [
      "SECRET_KEY_BASE",
      "DATABASE_URL"
    ]
  },
  {
    "name": "pulumi",
    "category": "nodejs",
    "readme": "# Pulumi\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-pulumi-template%26template_owner%3DDefangSamples)\n\nThis basic example shows you how to use the Defang Pulumi provider to deploy the nodejs-http sample with Defang.\n\n## Prerequisites\n\nInstall the Defang CLI by following the instructions in the [Defang CLI documentation](https://docs.defang.io/docs/getting-started).\n\nInstall the dependencies:\n\n```sh\nnpm install\n```\n\n## Deploying\n\nCreate a new stack:\n\n```sh\npulumi stack init production\n```\n\nLogin to Defang:\n\n```sh\ndefang login\n```\n\nDeploy the application:\n\n```sh\npulumi up\n```\n\n---\n\nTitle: Pulumi\n\nShort Description: A basic Pulumi example.\n\nTags: Pulumi, Node.js, HTTP, Server, TypeScript\n\nLanguages: nodejs\n",
    "directoryName": "pulumi",
    "title": "Pulumi",
    "shortDescription": "A basic Pulumi example.",
    "tags": [
      "Pulumi",
      "Node.js",
      "HTTP",
      "Server",
      "TypeScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "pulumi-remix-postgres",
    "category": "nodejs",
    "readme": "# Pulumi & Remix & Postgres\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-pulumi-remix-postgres-template%26template_owner%3DDefangSamples)\n\nIn this example, we run a Remix application connected to a Postgres database using Prisma as an ORM. When we deploy our service to [Defang](https://defang.io/), we also deploy a Postgres service and database using [Aiven](https://aiven.io/) so we can run our full application in the cloud.\n\n## Running Locally\n\nTo run this example locally, you'll need to have a Postgres database. You can run one locally with Docker:\n\n```\ndocker run -p 5432:5432 -e POSTGRES_PASSWORD=password -d postgres\n```\n\nCreate a `.env` file with the following:\n\n```\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/postgres?schema=public\"\n```\n\nThen run `npm install` and `npm run dev` in the `remix` directory to start the application.\n\n## Deploying to Defang\n\nFirst, `cd` into the `pulumi` directory and make sure you're logged into Defang with `defang login` and into Pulumi with `pulumi login`.\n\nNext, head to your Aiven account and create an api token, then run the following command to store it in your Pulumi stack config:\n\n```\npulumi config set --secret aiven:apiToken <YourToken>\n```\n\nYou'll also need to make sure you have an Aiven organization with a billing method attached to a billing group. Get the organization id and the billing group id and add them to your config with the following commands:\n\n```\npulumi config set --secret aivenOrganizationId <OrgId>\npulumi config set --secret aivenBillingGroupId <BillingGroupId>\n```\n\nNow, run `pulumi up` to deploy your application to Defang and Aiven! Head to the [portal](https://portal.defang.dev) to check on status, or run `defang services`.\n\n---\n\nTitle: Pulumi & Remix & PostgreSQL\n\nShort Description: A full-stack example using Remix, Prisma, and Aiven.\n\nTags: Full-stack, Remix, Prisma, Aiven, PostgreSQL, Pulumi, Node.js, TypeScript, SQL\n\nLanguages: nodejs\n",
    "directoryName": "pulumi-remix-postgres",
    "title": "Pulumi & Remix & PostgreSQL",
    "shortDescription": "A full-stack example using Remix, Prisma, and Aiven.",
    "tags": [
      "Full-stack",
      "Remix",
      "Prisma",
      "Aiven",
      "PostgreSQL",
      "Pulumi",
      "Node.js",
      "TypeScript",
      "SQL"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "python-form",
    "category": "python",
    "readme": "# Flask & Form Submission\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-python-form-template%26template_owner%3DDefangSamples)\n\nThis Flask application provides a basic example of handling form submissions. It displays an HTML form where users can input their first name. Upon submission, the application greets the user by name on a new page. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Python & Form\n\nShort Description: A short Python example for form submission in Flask.\n\nTags: Python, Flask, Form\n\nLanguages: python\n",
    "directoryName": "python-form",
    "title": "Python & Form",
    "shortDescription": "A short Python example for form submission in Flask.",
    "tags": [
      "Python",
      "Flask",
      "Form"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "python-implicit-gpu",
    "category": "python",
    "readme": "# Python & Implicit & GPU\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-python-implicit-gpu-template%26template_owner%3DDefangSamples)\n\nThis Music Recommendation API provides artist recommendations based on collaborative filtering using the Alternating Least Squares (ALS) algorithm from the implicit library. The dataset utilized is from Last.fm. Note that alongside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip. It demonstrates how to use a GPU with Python and the implicit library with Defang.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Python & Implicit & GPU\n\nShort Description: A Music Recommendation API that provides artist recommendations based on collaborative filtering using the ALS algorithm from the Implicit library, leveraging a GPU.\n\nTags: Music, Recommendation, API, Collaborative Filtering, Implicit, GPU, Python\n\nLanguages: python\n",
    "directoryName": "python-implicit-gpu",
    "title": "Python & Implicit & GPU",
    "shortDescription": "A Music Recommendation API that provides artist recommendations based on collaborative filtering using the ALS algorithm from the Implicit library, leveraging a GPU.",
    "tags": [
      "Music",
      "Recommendation",
      "API",
      "Collaborative Filtering",
      "Implicit",
      "GPU",
      "Python"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "python-minimal",
    "category": "python",
    "readme": "# Python & Flask & HTTP\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-python-minimal-template%26template_owner%3DDefangSamples)\n\nThis Flask application is designed to inspect and return detailed information about HTTP requests. It supports both GET and POST methods, providing insights into the request path, method, headers, query parameters, and body. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.\n\n## Features\n\n1. Support both GET and POST HTTP methods\n2. Detailed information about the request, including path, method, headers, query parameters, and body.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). (compose.yaml file)\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Python & Flask & HTTP\n\nShort Description: A Flask application that inspects and returns detailed information about HTTP requests.\n\nTags: Flask, HTTP, Python\n\nLanguages: python\n",
    "directoryName": "python-minimal",
    "title": "Python & Flask & HTTP",
    "shortDescription": "A Flask application that inspects and returns detailed information about HTTP requests.",
    "tags": [
      "Flask",
      "HTTP",
      "Python"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "python-openai",
    "category": "python",
    "readme": "# Python & Flask & OpenAI\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-python-openai-template%26template_owner%3DDefangSamples)\n\n## Setup\n\nThis sample requires an API key to access the OpenAI API. The name of the config value is referenced in the compose.yaml file. To provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name OPENAI_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\n\n```\necho \"Hello\" | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\n\nor\n\n```\ncat prompt.txt | curl -H \"Content-Type: application/text\" -d @- https://xxxxxxxx/prompt\n```\n\n---\n\nTitle: Python & Flask & OpenAI\n\nShort Description: An app that demonstrates how to use the OpenAI API with Python and Flask.\n\nTags: Python, Flask, OpenAI, AI, Python\n\nLanguages: python\n",
    "directoryName": "python-openai",
    "title": "Python & Flask & OpenAI",
    "shortDescription": "An app that demonstrates how to use the OpenAI API with Python and Flask.",
    "tags": [
      "Python",
      "Flask",
      "OpenAI",
      "AI",
      "Python"
    ],
    "languages": [
      "python"
    ],
    "configs": [
      "OPENAI_KEY"
    ]
  },
  {
    "name": "python-rest-api",
    "category": "python",
    "readme": "# Python & REST API\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-python-rest-api-template%26template_owner%3DDefangSamples)\n\nThis Flask application fetches average interest rates from the Fiscal Data Treasury API. It provides endpoints to check the status of the API and to retrieve the latest average interest rates. Note that alognside your .py file, include a requirements.txt so that the Dockerfile can install the necessary packages with pip.\n\n## Features\n\nEndpoint to check API status.\nEndpoint to fetch average interest rates from the Fiscal Data Treasury API.\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n2. A [compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications (this is how Defang identifies services to be deployed). This is optional\n\n## Prerequisite\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc), make sure you have properly [authenticated your AWS account (optional)](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html)\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: Python & REST API\n\nShort Description: A Flask application that fetches average interest rates from the Fiscal Data Treasury API.\n\nTags: Flask, REST API, Python\n\nLanguages: python\n",
    "directoryName": "python-rest-api",
    "title": "Python & REST API",
    "shortDescription": "A Flask application that fetches average interest rates from the Fiscal Data Treasury API.",
    "tags": [
      "Flask",
      "REST API",
      "Python"
    ],
    "languages": [
      "python"
    ]
  },
  {
    "name": "python-s3",
    "category": "python",
    "readme": "# Python & Flask & AWS S3\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-python-s3-template%26template_owner%3DDefangSamples)\n\nThis sample requires an API key to access AWS S3. The name of the config values is referenced in the compose.yaml file.\nTo provide a value for it, you can use the Defang CLI like this:\n\n```\ndefang config set --name AWS_ACCESS_KEY\ndefang config set --name AWS_SECRET_KEY\n```\n\nand then enter the value when prompted.\n\n## Testing\n\ncurl -X POST -H 'Content-Type: application/json' -d '{ \"first_name\" : \"jane\", \"last_name\" : \"doe\" }' https://xxxxxx/upload\ncurl https://xxxxxx/download\n\n---\n\nTitle: Python & Flask & AWS S3\n\nShort Description: An app that demonstrates how to upload and download files from AWS S3 using Python and Flask.\n\nTags: Python, Flask, AWS S3\n\nLanguages: python\n",
    "directoryName": "python-s3",
    "title": "Python & Flask & AWS S3",
    "shortDescription": "An app that demonstrates how to upload and download files from AWS S3 using Python and Flask.",
    "tags": [
      "Python",
      "Flask",
      "AWS S3"
    ],
    "languages": [
      "python"
    ],
    "configs": [
      "AWS_ACCESS_KEY",
      "AWS_SECRET_KEY"
    ]
  },
  {
    "name": "rails",
    "category": "Ruby",
    "readme": "# Ruby on Rails\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-rails-template%26template_owner%3DDefangSamples)\n\nThis template is a member list project developed using Ruby on Rails, offering a starting point to help you quickly build your team management system. We have prepared all the essential files for deployment. By spending less than 10 minutes setting up the environment, as detailed in the prerequisites, and executing the commands in our step-by-step guide, your website will be ready to go live to the world!\n\n## Essential Setup Files\n\n1. A [Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) to describe the basic image of your applications.\n2. A [docker-compose file](https://docs.defang.io/docs/concepts/compose) to define and run multi-container Docker applications.\n3. A [.dockerignore](https://docs.docker.com/build/building/context/#dockerignore-files) file to comply with the size limit (10MB).\n\n## Development Using [Dev Containers](https://containers.dev/)\n\n1. Open the working directory with Visual Studio Code or any editor which supports Dev Containers.\n2. Click on the bottom left corner of the window where you see \"Reopen in Container\".\n3. Open up a shell in the VS Code terminal and run `docker compose -f compose.dev.yaml up --build`.\n\n\n## Configuration\n\nFor this sample, you will need to provide the following [configuration](https://docs.defang.io/docs/concepts/configuration). Note that if you are using the 1-click deploy option, you can set these values as secrets in your GitHub repository and the action will automatically deploy them for you.\n\n### `POSTGRES_PASSWORD`\nThis password will be used to initialize the PostgreSQL database and to connect to it.\n\n\n## Deployment\n\n> [!NOTE]\n> Download [Defang CLI](https://github.com/DefangLabs/defang)\n\n### Defang Playground\n\nDeploy your application to the defang playground by opening up your terminal and typing `defang up`.\n\n### BYOC (AWS)\n\nIf you want to deploy to your own cloud account, you can use Defang BYOC:\n\n1. [Authenticate your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), and check that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n2. Run `defang --provider=aws up` in a terminal that has access to your AWS environment variables.\n\n---\n\nTitle: Ruby on Rails\n\nShort Description: A basic member list project developed using Ruby on Rails.\n\nTags: Ruby, Rails\n\nLanguages: Ruby\n",
    "directoryName": "rails",
    "title": "Ruby on Rails",
    "shortDescription": "A basic member list project developed using Ruby on Rails.",
    "tags": [
      "Ruby",
      "Rails"
    ],
    "languages": [
      "Ruby"
    ],
    "configs": [
      "POSTGRES_PASSWORD",
      "POSTGRES_PASSWORD"
    ]
  },
  {
    "name": "react",
    "category": "JavaScript",
    "readme": "# React\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-react-template%26template_owner%3DDefangSamples)\n\nThis sample shows how to get a simple React app up and running with Defang. \nIt includes Vite and ESLint, which are common build tools for React development. \n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc) authenticate with your cloud provider account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command (make sure you've got `npm` and [Node.js](https://nodejs.org/en) installed):\n\n```bash\nnpm run dev\n```\n\nTo run it using a Docker container, you can use the following command:\n\n```bash\ndocker compose up --build\n```\n\n## Deployment\n\n> [!NOTE]\n> Download [Defang CLI](https://github.com/DefangLabs/defang)\n\n### Defang Playground\n\nDeploy your application to the Defang Playground by opening up your terminal and typing:\n```bash\ndefang compose up\n```\n\n### BYOC (AWS)\n\nIf you want to deploy to your own cloud account, you can use Defang BYOC:\n\n1. [Authenticate your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), and check that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n2. Run in a terminal that has access to your AWS environment variables:\n    ```bash\n    defang --provider=aws compose up\n    ```\n\n---\n\nTitle: React\n\nShort Description: A minimal React app running on Defang. \n\nTags: React, Vite, JavaScript, Frontend\n\nLanguages: JavaScript\n",
    "directoryName": "react",
    "title": "React",
    "shortDescription": "A minimal React app running on Defang. ",
    "tags": [
      "React",
      "Vite",
      "JavaScript",
      "Frontend"
    ],
    "languages": [
      "JavaScript"
    ]
  },
  {
    "name": "rocket",
    "category": "Rust",
    "readme": "# Rocket\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-rocket-template%26template_owner%3DDefangSamples)\n\nThis sample demonstrates how to deploy a very simple Rocket app. Rocket is a web framework for Rust.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticate against your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command:\n\n```bash\ndocker compose up\n```\n\n## Deployment\n\n> [!NOTE]\n> Download [Defang CLI](https://github.com/DefangLabs/defang)\n\n### Defang Playground\n\nDeploy your application to the defang playground by opening up your terminal and typing `defang up`.\n\n### BYOC (AWS)\n\nIf you want to deploy to your own cloud account, you can use Defang BYOC:\n\n1. [Authenticate your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), and check that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n2. Run `defang --provider=aws up` in a terminal that has access to your AWS environment variables.\n\n---\n\nTitle: Rocket\n\nShort Description: A simple Rocket app.\n\nTags: Rocket\n\nLanguages: Rust\n",
    "directoryName": "rocket",
    "title": "Rocket",
    "shortDescription": "A simple Rocket app.",
    "tags": [
      "Rocket"
    ],
    "languages": [
      "Rust"
    ]
  },
  {
    "name": "sailsjs",
    "category": "nodejs",
    "readme": "# Sailsjs\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-sailsjs-template%26template_owner%3DDefangSamples)\n\nThis sample demosntrates how to deploy a very basic Sailsjs sample with Defang. The sample simply outputs hello world on the webpage.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n## Development\n\nFor development, we use a local container. This can be seen in the compose.yaml document. To run the sample locally after cloning the respository, you can run on docker by using the following command:\n\n1. docker compose -f compose.dev.yaml up --build\n\n---\n\nTitle: Sails.js\n\nShort Description: A short hello world application demonstrating how to deploy Sails.js onto Defang.\n\nTags: Sails.js, Node.js\n\nLanguages: nodejs\n",
    "directoryName": "sailsjs",
    "title": "Sails.js",
    "shortDescription": "A short hello world application demonstrating how to deploy Sails.js onto Defang.",
    "tags": [
      "Sails.js",
      "Node.js"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "sailsjs-postgres",
    "category": "nodejs",
    "readme": "# Sails.js & PostgreSQL\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-sailsjs-postgres-template%26template_owner%3DDefangSamples)\n\nThis sample project demonstrates how to deploy\n\nSailsjs with Defang and connect it to a Postgres database. Furthermore, we emonstrate how to run a local Postgres container during development vs a managed postgres service (Neon). For a quick database set up please go to [Neon](https://neon.tech/) and follow set up instructions. The sample starts with a no tasks in the database and allows us to add tasks on the fly. It sets wide open permissions on the tables as well so you can start querying or mutating the data right away.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n4. (Optional) [Neon CLI] (https://neon.tech/docs/reference/neon-cli)\n\n## Deploying production\n\n1. Open the terminal and type `defang login`\n2. Add your connection string for the third party postgres database in the DATABASE_URL part of the compose.yaml section\n3. Type `defang compose up` in the CLI.\n4. Your app will be running within a few minutes.\n\n## Development\n\nFor development, we use a Postgres container. The Postgres container is defined in the `compose.dev.yaml` file. The Neon postgres container is defined in the `compose.yaml` file, with some overrides in the `compose.dev.yaml` file so it correctly connects to the development database container. To start your own, please have the env variables, `POSTGRES_USER`, `POSTGRES_PASSWORD`, `POSTGRES_DB`, and `SESSION_SECRET` ready.\n\nTo start the development environment, run:\n\n```\ndocker compose -f compose.dev.yaml up --build\n```\n\n---\n\nTitle: Sails.js & PostgreSQL\n\nShort Description: A sample project demonstrating how to deploy a project with PostgreSQL and Sails.js.\n\nTags: PostgreSQL, Sails.js, SQL, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "sailsjs-postgres",
    "title": "Sails.js & PostgreSQL",
    "shortDescription": "A sample project demonstrating how to deploy a project with PostgreSQL and Sails.js.",
    "tags": [
      "PostgreSQL",
      "Sails.js",
      "SQL",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ],
    "configs": [
      "DATABASE_URL",
      "SESSION_SECRET"
    ]
  },
  {
    "name": "svelte-mysql",
    "category": "nodejs",
    "readme": "# Svelte & Node.js & MySQL\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-svelte-mysql-template%26template_owner%3DDefangSamples)\n\nThis sample project demonstrates how to deploy a full-stack application using Svelte for the frontend, Node.js for the backend, and MySQL for the database. The project uses Docker to containerize the services, making it easy to run in both development and production environments.\n\n## NOTE\n\nThis sample showcases how you could deploy a full-stack application with Defang and Svelte and NodeJS. However, it deploys mysql db as a defang service. Defang [services](https://12factor.net/processes) are ephemeral and should not be used to run stateful workloads in production as they will be reset on every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. In the future, Defang will help you provision and connect to managed databases.\n\n## Essential Setup Files\n\n1. Download [Defang CLI] (https://github.com/DefangLabs/defang)\n2. (optional) If you are using [Defang BYOC] (https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated your AWS account.\n3. (optional for local development) [Docker CLI] (https://docs.docker.com/engine/install/)\n\n## Prerequisite\n\n1. Download [Defang CLI] (https://github.com/DefangLabs/defang)\n2. (optional) If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc) make sure you have properly\n3. [Docker CLI] (https://docs.docker.com/engine/install/)\n4. [NodeJS] (https://nodejs.org/en/download/package-manager)\n\n## Development\n\nFor development, we use a local container. This can be seen in the compose.yaml file and the server.js file where we create a pool of connections. To run the sample locally after clonging the respository, you can run on docker by doing _docker compose up --build --build_ or run without using Docker by doing the following:\n\n1. run npm install to install the nodejs dependencies\n2. create an .env file on the svelte directory specifying the appropriate environment variables.\n3. run npm start\n\n### Editing the database/permissions etc.\n\nIf you want to edit the database, such that you can deploy them to production, you should [install the mySQL CLI](https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-install-linux-quick.html) and mySQL workbench to gain access to a GUI so that you can make your changes to the database. After running defang compose up these changes will be reflected.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n---\n\nTitle: Svelte & Node.js & MySQL\n\nShort Description: A full-stack application using Svelte for the frontend, Node.js for the backend, and MySQL for the database.\n\nTags: Svelte, Node.js, MySQL, Full-stack, JavaScript, TypeScript, SQL\n\nLanguages: nodejs\n",
    "directoryName": "svelte-mysql",
    "title": "Svelte & Node.js & MySQL",
    "shortDescription": "A full-stack application using Svelte for the frontend, Node.js for the backend, and MySQL for the database.",
    "tags": [
      "Svelte",
      "Node.js",
      "MySQL",
      "Full-stack",
      "JavaScript",
      "TypeScript",
      "SQL"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "sveltekit",
    "category": "nodejs",
    "readme": "# Sveltekit\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-sveltekit-template%26template_owner%3DDefangSamples)\n\nThis sample shows how to get a minimal SvelteKit app up and running with Defang.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. Have a managed database service configured and have the connection string ready.\n3. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n4. (Optional - for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo develop this app, you can run the sveltekit commands as you normally would on your local machine in the sveltekit directory. If you plan on adding other services, you might want to run it with docker compose. We have provided a `compose.dev.yaml` file and a `dev.Dockefile` to help you get started. Just run `docker compose -f compose.dev.yaml up --build` to start your Sveltekit app in dev mode in a container.\n\n## Deploying\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI.\n3. Your app will be running within a few minutes.\n\n---\n\nTitle: SvelteKit\n\nShort Description: A minimal SvelteKit app running on Defang.\n\nTags: SvelteKit, TypeScript, JavaScript, Svelte, Node.js, Frontend, TypeScript, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "sveltekit",
    "title": "SvelteKit",
    "shortDescription": "A minimal SvelteKit app running on Defang.",
    "tags": [
      "SvelteKit",
      "TypeScript",
      "JavaScript",
      "Svelte",
      "Node.js",
      "Frontend",
      "TypeScript",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "sveltekit-mongodb",
    "category": "nodejs",
    "readme": "# Sveltekit & MongoDB\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-sveltekit-mongodb-template%26template_owner%3DDefangSamples)\n\nThis is a project that demonstrate both client side component rendering and hydration as well as serverside rendering with external API route configuration. Furthermore, there is also a mongodb connection (not hosted on the atlas) to cache the queried results.\n\n## NOTE\n\nThis sample showcases how you could deploy a full-stack application with Defang and Sveltekit. However, it deploys mongodb as a defang service. Defang [services](https://12factor.net/processes) are ephemeral and should not be used to run stateful workloads in production as they will be reset on every deployment. For production use cases you should use a managed database like RDS, Aiven, or others. In the future, Defang will help you provision and connect to managed databases.\n\n## Essential Setup Files\n\n1. Download [Defang CLI] (https://github.com/DefangLabs/defang)\n2. (optional) If you are using [Defang BYOC] (https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated your AWS account.\n3. (optional for local development) [Docker CLI] (https://docs.docker.com/engine/install/)\n\n## Prerequisite\n\n1. Download [Defang CLI] (https://github.com/DefangLabs/defang)\n2. (optional) If you are using [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc) make sure you have properly\n3. [Docker CLI] (https://docs.docker.com/engine/install/)\n\n4. [NodeJS] (https://nodejs.org/en/download/package-manager)\n\n## Development\n\nFor development, we use a local container. This can be seen in the compose.yaml and /src/routes/api/songs/+server.js file and the server.js file where we create a pool of connections. To run the sample locally after clonging the respository, you can run on docker by doing\n\n1.  docker compose up --build\n\n## A Step-by-Step Guide\n\n1. Open the terminal and type `defang login`\n2. Type `defang compose up` in the CLI\n3. Your app should be up and running with Defang in minutes!\n\n---\n\nTitle: SvelteKit & MongoDB\n\nShort Description: A full-stack application using SvelteKit for the frontend and MongoDB for the database.\n\nTags: SvelteKit, MongoDB, Full-stack, Node.js, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "sveltekit-mongodb",
    "title": "SvelteKit & MongoDB",
    "shortDescription": "A full-stack application using SvelteKit for the frontend and MongoDB for the database.",
    "tags": [
      "SvelteKit",
      "MongoDB",
      "Full-stack",
      "Node.js",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  },
  {
    "name": "vllm",
    "category": "nodejs",
    "readme": "# Mistral & vLLM\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-vllm-template%26template_owner%3DDefangSamples)\n\nThis guide demonstrates how to deploy Mistral using vLLM. You'll need a Hugging Face token to begin.\n\n## Prerequisites\n\n- Hugging Face token\n\n## Steps\n\n1. **Set the Hugging Face Token**\n\n   First, set the Hugging Face token using the `defang config` command.\n\n   ```bash\n   defang config set --name HF_TOKEN\n   ```\n\n2. **Launch with Defang Compose**\n\n   Run the following command to start the services:\n\n   ```bash\n   defang compose up\n   ```\n\n   The provided `compose.yaml` file includes the Mistral service. It's configured to run on an AWS instance with GPU support. The file also includes a UI service built with Next.js, utilizing Vercel's AI SDK.\n\n   > **OpenAI SDK:** We use the OpenAI sdk, but set the `baseURL` to our Mistral endpoint.\n\n   > **Note:** The API route does not use a system prompt, as the Mistral model we're deploying currently does not support this feature. To get around this we inject a couple messages at the front of the conversation providing the context (see the `ui/src/app/api/chat/route.ts` file). Other than that, the integration with the OpenAI SDK should be structured as expected.\n\n   > **Changing the content:** The content for the bot is set in the `ui/src/app/api/chat/route.ts` file. You can edit the prompt in there to change the behaviour. You'll notice that it also pulls from `ui/src/app/docs.md` to provide content for the bot to use. You can edit this file to change its \"knowledge\".\n\n## Configuration\n\n- The Docker Compose file is ready to deploy Mistral and the UI service.\n- The UI uses Next.js and Vercel's AI SDK for seamless integration.\n\nBy following these steps, you should be able to deploy Mistral along with a custom UI on AWS, using GPU capabilities for enhanced performance.\n\n---\n\nTitle: Mistral & vLLM\n\nShort Description: Deploy Mistral with a custom UI using vLLM.\n\nTags: Mistral, vLLM, AI, Nextjs, GPU, Node.js, TypeScript, JavaScript\n\nLanguages: nodejs\n",
    "directoryName": "vllm",
    "title": "Mistral & vLLM",
    "shortDescription": "Deploy Mistral with a custom UI using vLLM.",
    "tags": [
      "Mistral",
      "vLLM",
      "AI",
      "Nextjs",
      "GPU",
      "Node.js",
      "TypeScript",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ],
    "configs": [
      "HF_TOKEN"
    ]
  },
  {
    "name": "vuejs",
    "category": "nodejs",
    "readme": "# Vue.js\n\n[![1-click-deploy](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3Dsample-vuejs-template%26template_owner%3DDefangSamples)\n\nThis sample shows how to get a minimal Vue.js app up and running with Defang.\n\n## Prerequisites\n\n1. Download [Defang CLI](https://github.com/DefangLabs/defang)\n2. (Optional) If you are using [Defang BYOC](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) authenticated with your AWS account\n3. (Optional for local development) [Docker CLI](https://docs.docker.com/engine/install/)\n\n## Development\n\nTo run the application locally, you can use the following command (make sure you've got `npm` and [Node.js](https://nodejs.org/en) installed):\n\n```bash\nnpm run dev\n```\n\nTo run it using a Docker container, you can use the following command:\n\n```bash\ndocker compose up --build\n```\n\n## Deployment\n\n> [!NOTE]\n> Download [Defang CLI](https://github.com/DefangLabs/defang)\n\n### Defang Playground\n\nDeploy your application to the Defang Playground by opening up your terminal and typing:\n```bash\ndefang compose up\n```\n\n### BYOC (AWS)\n\nIf you want to deploy to your own cloud account, you can use Defang BYOC:\n\n1. [Authenticate your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), and check that you have properly set your environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`.\n2. Run in a terminal that has access to your AWS environment variables:\n    ```bash\n    defang --provider=aws compose up\n    ```\n---\n\nTitle: Vue.js\n\nShort Description: A minimal Vue.js app running on Defang.\n\nTags: Vue.js, Vite, Node.js, Frontend, JavaScript\n\nLanguages: nodejs\n\n",
    "directoryName": "vuejs",
    "title": "Vue.js",
    "shortDescription": "A minimal Vue.js app running on Defang.",
    "tags": [
      "Vue.js",
      "Vite",
      "Node.js",
      "Frontend",
      "JavaScript"
    ],
    "languages": [
      "nodejs"
    ]
  }
]