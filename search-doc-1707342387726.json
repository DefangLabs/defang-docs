{"searchDocs":[{"title":"Announcing the Private Beta for the Defang Opinionated Platform","type":0,"sectionRef":"#","url":"/blog/announcement","content":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Accounts","type":0,"sectionRef":"#","url":"/docs/concepts/accounts","content":"","keywords":"","version":"Next"},{"title":"Creating an Account​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#creating-an-account","content":" To create an account, simply login to Defang and accept the terms of service using the CLI.  At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#structure","content":" Your GitHub username will be used as your Defang username and your Defang username is used to group all your services and to generate domains for your services with the following structure:  &lt;username&gt;-&lt;servicename&gt;--&lt;port&gt;.prod1.defang.dev   warning Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.  info We plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future. ","version":"Next","tagName":"h2"},{"title":"Compose","type":0,"sectionRef":"#","url":"/docs/concepts/compose","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#how-it-works","content":" You can define your services using a docker-compose.yml file in the root of your project, or use the defang generate command to generate one (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services.  When you run defang up, Defang will read your docker-compose.yml file and deploy the services named in that file to the cloud.  ","version":"Next","tagName":"h2"},{"title":"Service Name Resolution​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#service-name-resolution","content":" One thing to keep in mind is that, at the time of this writing, Defang identifies services by the user/account name and the service name (as defined in the docker-compose.yml file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#configuration","content":" If you have a service that depends on a secret like an api key, you can set that secret using the CLI:  defang secret set --name MY_API_KEY   and then connect it to the service by specifying it in the docker-compose.yml:  services: my-service: secrets: - MY_API_KEY   Configuration &amp; Secrets Read more about configuration in the configuration page and about secrets in the secrets page. ","version":"Next","tagName":"h2"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/concepts/configuration","content":"Configuration Defang allows you to configure your application using environment variables. You can set environment variables in your docker-compose.yml file, or in your Pulumi program. Using Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks. You can also use secrets to store sensitive information like API keys and database passwords. Sample You can find a sample of how to set environment variables with Pulumi here.","keywords":"","version":"Next"},{"title":"Defang BYOC","type":0,"sectionRef":"#","url":"/docs/concepts/defang-byoc","content":"","keywords":"","version":"Next"},{"title":"AWS​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#aws","content":" info Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024.  Please read the AWS Provider documentation for more details about how the AWS provider works and how to get started.  ","version":"Next","tagName":"h2"},{"title":"Azure​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#azure","content":" info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#gcp","content":" info We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue. ","version":"Next","tagName":"h2"},{"title":"Defang Playground","type":0,"sectionRef":"#","url":"/docs/concepts/defang-playground","content":"","keywords":"","version":"Next"},{"title":"Limitations​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#limitations","content":" There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC.  ","version":"Next","tagName":"h2"},{"title":"No Custom Domain Support​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#no-custom-domain-support","content":" When you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own domains to Defang Playground services.  ","version":"Next","tagName":"h3"},{"title":"Max Resources​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#max-resources","content":" Services: 5CPUs: 2Memory: 8GBReplicas: 2 ","version":"Next","tagName":"h3"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/docs/concepts/deployments","content":"Deployment When you deploy using Defang, whether it's with defang compose up with a compose file or using a Pulumi program, Defang will build your services in the cloud and manage the deployment process for you. If you provide a Dockerfile and build context, Defang will upload the files found within the build context to the cloud (either yours in Defang BYOC or ours in Defang Playground), build the image, and store it in the cloud provider's container registry. Defang will also make sure to get your new service up and running before deprovisioning any old services so you don't have to worry about downtime. info In Defang BYOC, Defang will use your cloud provider account to build and store your images. In Defang Playground we will build and store your images for you.","keywords":"","version":"Next"},{"title":"Observability","type":0,"sectionRef":"#","url":"/docs/concepts/observability","content":"","keywords":"","version":"Next"},{"title":"Tail​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#tail","content":" The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service.  defang tail --name my-service defang tail --etag ua119053ehi2   ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#architecture","content":" In BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed. ","version":"Next","tagName":"h2"},{"title":"Portal","type":0,"sectionRef":"#","url":"/docs/concepts/portal","content":"Portal You can log into the Defang portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications. You can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. info We will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, but we're working on it!","keywords":"","version":"Next"},{"title":"Pulumi","type":0,"sectionRef":"#","url":"/docs/concepts/pulumi","content":"","keywords":"","version":"Next"},{"title":"Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defang-pulumi-provider","content":" To get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project:  npmpnpmyarn npm i @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"Sample​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#sample","content":" The following is a minimal example of a Pulumi program that defines a Defang service:  import * as defang from &quot;@defang-io/pulumi-defang/lib&quot;; const service = new defang.DefangService(&quot;my-service&quot;, { image: &quot;strm/helloworld-http:latest&quot;, ports: [{ target: 80, mode: &quot;ingress&quot;, protocol: &quot;http&quot;, }], });  ","version":"Next","tagName":"h2"},{"title":"Resources","type":0,"sectionRef":"#","url":"/docs/concepts/resources","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#docker-compose","content":" services: gpu-service: deploy: replicas: 3 resources: reservations: cpus: '1.0' memory: 2048M devices: - capabilities: [&quot;gpu&quot;]   ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#pulumi","content":" const service = new defang.DefangService(&quot;gpu-service&quot;, { deploy: { replicas: 3, resources: { reservations: { cpu: 1.0, memory: 2048, devices: [{capabilities: ['gpu']}] } } } });   GPUs If you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the docker-compose documentation. This is the only supported value in the deploy.resources.reservations.devices section. ","version":"Next","tagName":"h3"},{"title":"Secrets","type":0,"sectionRef":"#","url":"/docs/concepts/secrets","content":"","keywords":"","version":"Next"},{"title":"Connecting Services​","type":1,"pageTitle":"Secrets","url":"/docs/concepts/secrets#connecting-services","content":" If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi.  Sample You can find a sample of how to set secrets here.  ","version":"Next","tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"Secrets","url":"/docs/concepts/secrets#providers","content":" Here are the different ways secrets are stored depending on the provider you are using:  AWS ","version":"Next","tagName":"h2"},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/concepts/services","content":"Services Defang allows you deploy services defined as containers. You can define your services using a compose file or a Pulumi program. Services can be exposed to the internet or kept private, and can communicate between themselves using the following conventions for hostnames: &lt;username&gt;-&lt;service-name&gt; You can learn more about accounts and usernames in the accounts page. Service Names Service names are defined in your compose file or your Pulumi program. You can learn more about about how to define services with compose files here and services with Pulumi here. You can learn more about how services are deployed in the deployment page. info While this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions.","keywords":"","version":"Next"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/docs/faq","content":"","keywords":"","version":"Next"},{"title":"Which cloud/region is the app being deployed to?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#which-cloudregion-is-the-app-being-deployed-to","content":" Currently we are deploying to AWS us-west-2.  ","version":"Next","tagName":"h3"},{"title":"Can I bring my own AWS or other cloud account?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-bring-my-own-aws-or-other-cloud-account","content":" With the current release, which is designed for customers to try out the Defang model with non-production apps, your apps are deployed to Defang’s AWS account. We are working on bring-your-own-account for an upcoming release.  ","version":"Next","tagName":"h3"},{"title":"On AWS, can I deploy to services such as EC2, EKS, or Lambda?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#on-aws-can-i-deploy-to-services-such-as-ec2-eks-or-lambda","content":" The current release includes support for containers only, deployed to ECS. Future releases shall include support for Lambda, EC2 etc. Using our Pulumi provider, it is possible to combine Defang services with other native AWS resources.  ","version":"Next","tagName":"h3"},{"title":"Can I access AWS storage services such as S3 or database services such as RDS ? How?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-access-aws-storage-services-such-as-s3-or-database-services-such-as-rds--how","content":" Yes, you can access any storage service from the underlying cloud platform (AWS) or from a remote database service. To secure access from your Defang services, you should use our published public IPs in your AWS security group or IP allow list.  ","version":"Next","tagName":"h3"},{"title":"Do you plan to support other clouds?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#do-you-plan-to-support-other-clouds","content":" While we currently deploy to AWS, the Defang model is designed to be inherently portable. We plan to support other clouds in future releases.  ","version":"Next","tagName":"h3"},{"title":"Can I run production apps on DOP?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-run-production-apps-on-dop","content":" The current release of DOP is meant for testing and trial purposes only. Deployment of productions apps is not supported and explicitly disallowed by the Terms of Service. ","version":"Next","tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Install the CLI​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#install-the-cli","content":" First, you'll need to install the Defang CLI. The CLI is the primary way to interact with Defang. It allows you to create, deploy, and manage your services. You can find the different installation methods here.  ","version":"Next","tagName":"h3"},{"title":"Authenticate with Defang​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#authenticate-with-defang","content":" To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command:  defang login   info To learn more about how authentication works in defang, check out the authenticating page.  ","version":"Next","tagName":"h3"},{"title":"Build and Deploy Services​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#build-and-deploy-services","content":" Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  Create an outline using AIBuild and deploy your codeDeploy existing containersDeploy using Pulumi  ","version":"Next","tagName":"h3"},{"title":"Monitor Services​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#monitor-services","content":" By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service.  From the CLI: defang tail --name service1 From the Defang Portal: https://portal.defang.dev/  info To learn more about observability in Defang, check out the observability page.Note that the Defang Portal only displays services deployed to Defang Playground.  ","version":"Next","tagName":"h3"},{"title":"Update Services​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#update-services","content":" To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.  info If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state. ","version":"Next","tagName":"h3"},{"title":"Authenticating","type":0,"sectionRef":"#","url":"/docs/getting-started/authenticating","content":"Authenticating To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command: defang login This will prompt you to open a browser and log into your Defang account. For now, the only way to login is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in.","keywords":"","version":"Next"},{"title":"Build and Deploy Services","type":0,"sectionRef":"#","url":"/docs/getting-started/build-and-deploy","content":"Build and Deploy Services Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail: Create an outline using AIBuild and deploy your codeDeploy an existing containerDeploy using Pulumi","keywords":"","version":"Next"},{"title":"Installing","type":0,"sectionRef":"#","url":"/docs/getting-started/installing","content":"","keywords":"","version":"Next"},{"title":"Using Homebrew​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#using-homebrew","content":" You can easily install the Defang CLI using Homebrew. Just run the following command in your terminal:  brew install defang-io/defang/defang   ","version":"Next","tagName":"h2"},{"title":"Using a Bash Script​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#using-a-bash-script","content":" You can install the Defang CLI using a bash script. Just run the following command in your terminal:  . &lt;(curl -s https://raw.githubusercontent.com/defang-io/defang/main/src/bin/install.sh)   The script will try to download the appropriate binary for your operating system and architecture, add it to ~/.local/bin, and add ~/.local/bin to your PATH if it's not already there, with your permission. If you do not provide permission it will print an appropriate instruction for you to follow to add it manually. You can also customize the installation directory by setting the INSTALL_DIR environment variable before running the script.  ","version":"Next","tagName":"h2"},{"title":"Direct Download​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#direct-download","content":" You can find the latest version of the Defang CLI on the releases page. Just download the appropriate binary for your operating system and architecture, and put it somewhere in your PATH. ","version":"Next","tagName":"h2"},{"title":"Update Services","type":0,"sectionRef":"#","url":"/docs/getting-started/update","content":"Update Services To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped. info If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.","keywords":"","version":"Next"},{"title":"Monitor a Service","type":0,"sectionRef":"#","url":"/docs/getting-started/monitor","content":"Monitor a Service By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service. From the CLI: defang tail --name service1 From the Defang Portal: https://portal.defang.dev/ info To learn more about observability in Defang, check out the observability page.Note that the Defang Portal only displays services deployed to Defang Playground.","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is Defang?​","type":1,"pageTitle":"Overview","url":"/docs/intro#what-is-defang","content":" Defang is a radically simpler way for developers to build, deploy their apps to the cloud. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly.  The Defang CLI includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine.Defang can automatically build and deploy your project with a single command. If you’re new to Defang, you can try deploying to the Defang Playground, a hosted environment to learn to use Defang with non-production workloads.Once you’re ready, you can deploy it to your own cloud account - we call this Defang BYOC. Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer. You can also use Defang to easily publish updates to your deployed application with zero downtime.  ","version":"Next","tagName":"h3"},{"title":"Details​","type":1,"pageTitle":"Overview","url":"/docs/intro#details","content":" Defang provides a streamlined experience to develop, deploy, observe, and update your cloud applications. Defang includes the following features:  Support for various types of applications: Web services and APIs, mobile app backends, ML services, etc.Support for your programming language of choice: Node.js, Python, Golang, or anything else you can package in a Dockerfile.Built-in AI assistant to go from natural language prompt to an outline projectAutomated Dockerfile buildsSupport for pre-built Docker containers, from public or private image registriesAbility to express your project configuration using a Docker Compose YAML fileAbility to manage encrypted secrets and configurationPre-configured, secure environments with built-in networking, IAM roles, and observabilityOne-command deploymentsSupport for GPUsSupport for Infra-as-Code via the Defang Pulumi providerBuilt-in observability ","version":"Next","tagName":"h3"},{"title":"AWS","type":0,"sectionRef":"#","url":"/docs/providers/aws","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#getting-started","content":" Getting started with the Defang BYOC AWS Provider is easy. First, make sure you install the latest version of the Defang CLI. Then, make sure you have properly authenticated your AWS account. The Defang CLI will automatically check for environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. If they are set, the CLI will automatically use the Defang BYOC AWS Provider using the appropriate credentials. If you have credentials in the ~/.aws/credentials file, but nothing configured in environment variables, you can use the --provider=aws flag to tell the Defang CLI to use the AWS Provider.  tip If you have the aws CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID.  warning The Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#secrets","content":" Defang allows you to configure your services with secrets. Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#runtime","content":" The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and CloudFront to route traffic to your services. ","version":"Next","tagName":"h3"},{"title":"GCP","type":0,"sectionRef":"#","url":"/docs/providers/gcp","content":"GCP info We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue.","keywords":"","version":"Next"},{"title":"Azure","type":0,"sectionRef":"#","url":"/docs/providers/azure","content":"Azure info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.","keywords":"","version":"Next"},{"title":"Samples","type":0,"sectionRef":"#","url":"/docs/samples","content":"","keywords":"","version":"Next"},{"title":"Basic Service​","type":1,"pageTitle":"Samples","url":"/docs/samples#basic-service","content":" .css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang  This sample shows you how to get started with Defang. It demonstrates how to deploy one of the most basic type of services you can run on Defang: a simple web server that returns the contents of the request.  ","version":"Next","tagName":"h2"},{"title":"AI-ML Music Recommendations​","type":1,"pageTitle":"Samples","url":"/docs/samples#ai-ml-music-recommendations","content":" .css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: Python  An AI-driven music recommendation system. This example demonstrates how to request GPUs for your Defang services:  services: service1: deploy: resources: reservations: devices: - capabilities: [&quot;gpu&quot;]   ","version":"Next","tagName":"h2"},{"title":"AWS S3​","type":1,"pageTitle":"Samples","url":"/docs/samples#aws-s3","content":" .css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang  This sample shows you how to upload and download files from AWS S3 using Defang. It demonstrates how to configure services that require secrets using the defang secrets set command.  ","version":"Next","tagName":"h2"},{"title":"ChatGPT API​","type":1,"pageTitle":"Samples","url":"/docs/samples#chatgpt-api","content":" .css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang  This sample shows you how to build a simple service using the OpenAI Chat Completions API. It also demonstrates how to configure services that require secrets using the defang secrets set command.  ","version":"Next","tagName":"h2"},{"title":"Fetch and return JSON​","type":1,"pageTitle":"Samples","url":"/docs/samples#fetch-and-return-json","content":" .css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang  This sample shows you how to build a basic service that interacts with and api and returns some JSON.  ","version":"Next","tagName":"h2"},{"title":"Webpage and Form Post​","type":1,"pageTitle":"Samples","url":"/docs/samples#webpage-and-form-post","content":" .css-zcjxa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-bottom:16px;} Try it in: PythonNode.jsGolang  This sample shows you how to build a simple website with a form that posts to a backend service. ","version":"Next","tagName":"h2"},{"title":"Deploy Code Using a Docker Compose File","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-code-compose","content":"Deploy Code Using a Docker Compose File This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder. If you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file. Step 1 - Create main.js Let's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called main.js with the following content: const http = require('http'); const server = http.createServer((req, res) =&gt; { res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Welcome to Defang\\n'); }); server.listen(3000, '0.0.0.0', () =&gt; { console.log('Server running at http://127.0.0.1:3000/'); }); Step 2 - Create Dockerfile Let's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called Dockerfile with the following content: # Use an official Node runtime based on Alpine as a parent image FROM node:18-alpine # Set the working directory to /app WORKDIR /app # Copy the current directory contents into the container at /app COPY . . # Run the app when the container launches ENTRYPOINT [ &quot;node&quot;, &quot;main.js&quot; ] Step 3 - Create docker-compose.yml Let's create a Docker Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called docker-compose.yml with the following content: version: '3.9' services: minimal: build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 3000 Step 4 - Deploy Now that we have the code and the Docker Compose file, we can deploy the service using the defang compose up command. This will bundle the code into a container and deploy it with Defang. If you have cloud credentials configured, the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to Defang Playground. defang compose up ","keywords":"","version":"Next"},{"title":"Deploy container using the CLI","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-container-using-the-cli","content":"Deploy container using the CLI This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang. Step 1 - Docker Compose If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this: version: '3.9' services: service1: # This is just an example, replace with the image you want image: &quot;docker.io/nginx:latest&quot; ports: - mode: ingress target: 3000 Step 2 - Deploy defang compose up ","keywords":"","version":"Next"},{"title":"Create an outline using AI","type":0,"sectionRef":"#","url":"/docs/tutorials/generate-new-code-using-ai","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Create a new folder for the project​","type":1,"pageTitle":"Create an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-1---create-a-new-folder-for-the-project","content":" mkdir service1 cd service1   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Use the CLI generate command​","type":1,"pageTitle":"Create an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-2---use-the-cli-generate-command","content":" defang login defang generate ? Choose the language you'd like to use: [Use arrows to move, type to filter] &gt; Nodejs Golang Python ? Please describe the service you'd like to build: A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.   This will generate the different files required to start your project based on your prompt and the language selected.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Review the Code​","type":1,"pageTitle":"Create an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-3---review-the-code","content":" You can open the files in a code editor to review or make changes as needed before deploying the service.  ","version":"Next","tagName":"h2"},{"title":"Step 4 - Build and Deploy​","type":1,"pageTitle":"Create an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-4---build-and-deploy","content":" defang compose up  ","version":"Next","tagName":"h2"},{"title":"Deploy using Pulumi","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-using-pulumi","content":"Deploy using Pulumi TODO: Write this section ... By default, Pulumi will not touch the deployment if nothing has changed. Set forceNewDeployment: true to instruct Pulumi to force the re-deployment of the service.","keywords":"","version":"Next"}],"options":{"id":"default"}}