{"searchDocs":[{"title":"July 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-07-31-product-update","content":"","keywords":"","version":null},{"title":"Townhall​","type":1,"pageTitle":"July 2024 Defang Compose Update","url":"/blog/2024-07-31-product-update#townhall","content":" If you're excited about what's coming next and want to hear more about our vision for the future, join us for our Townhall on August 21st. We'll be sharing more about our roadmap and what we're working on next. We'll also be making sure to take time to answer any questions you have, hear your feedback, and learn more about what you want from Defang!  Register here    We’re excited to keep improving Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud application. Stay tuned for more updates next month. ","version":null,"tagName":"h2"},{"title":"August 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-08-31-product-update","content":"","keywords":"","version":null},{"title":"Ask Defang​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#ask-defang","content":" We've just rolled out an initial version of Ask Defang, our AI-driven documentation assistant that can help you navigate the Defang docs and get deploying faster. It's deployed with Defang and using a combination of embeddings run on a GPU-powered service, Defang managed Redis, and OpenAI APIs.  Check it out here or head to ask.defang.io to get started!  ","version":null,"tagName":"h2"},{"title":"Enhanced Platform Symmetry​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#enhanced-platform-symmetry","content":" We've been hard at work improving the symmetry between our Playground and BYOC environments as well as docker compose up vs defang compose up to provide a more seamless experience. You can now use multiple compose files and in BYOC the CLI will subscribe to events to monitor service health during deployments.  ","version":null,"tagName":"h2"},{"title":"AI Features and Debugging Improvements​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#ai-features-and-debugging-improvements","content":" We've been working on several AI-driven enhancements to make your development process even more efficient. We've addressed key issues, such as file generation failures due to parsing errors and invalid compose files. Also, our Debug Assistant is now more robust, handling context size limits better than before.      ","version":null,"tagName":"h2"},{"title":"August Events​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#august-events","content":" This month, we hosted an in-person workshop to get more developers acquainted with Defang and simplify their cloud app journey. You can view the presentation here. We also held the first-ever DevTools Vancouver meetup, bringing together local DevTool founders, engineers, and enthusiasts.  Looking ahead, we’re excited to collaborate with MLH, Hack the North, LangaraHacks, and more in September. If you'd like to attend any of these events, be sure to sign up!      ","version":null,"tagName":"h2"},{"title":"Townhall​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#townhall","content":" Mark your calendars! If you’re eager to learn more about what’s coming next, join us for our Townhall on September 25th. We’ll be sharing our future roadmap, answering your questions, and gathering your feedback.  .css-s4g7hi{font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-s4g7hi:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-s4g7hi:hover{background-color:#1976d2;}}.css-s4g7hi:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} .css-110xwq5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;background-color:transparent;outline:0;border:0;margin:0;border-radius:0;padding:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;-moz-appearance:none;-webkit-appearance:none;-webkit-text-decoration:none;text-decoration:none;color:inherit;font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-110xwq5::-moz-focus-inner{border-style:none;}.css-110xwq5.Mui-disabled{pointer-events:none;cursor:default;}@media print{.css-110xwq5{-webkit-print-color-adjust:exact;color-adjust:exact;}}.css-110xwq5:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-110xwq5:hover{background-color:#1976d2;}}.css-110xwq5:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-110xwq5.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-110xwq5.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} Register here!    ","version":null,"tagName":"h2"},{"title":"Roadmap​","type":1,"pageTitle":"August 2024 Defang Compose Update","url":"/blog/2024-08-31-product-update#roadmap","content":" We're working on a number of new features to make Defang even better. Here are some of the most exciting ones:  Managed Postgres: We're working on getting Defang to provision managed Postgres services for you, so you can easily store and query data in your applications.DigitalOcean BYOC: We're working on adding DigitalOcean BYOC to give you even more choice over where you deploy your applications.    We’re excited to keep enhancing Defang to make it the easiest way for you to Develop, Deploy, and Debug cloud applications. Stay tuned for more updates next month! 🚀 ","version":null,"tagName":"h2"},{"title":"September 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-09-30-product-update","content":"","keywords":"","version":null},{"title":"September Events​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024-09-30-product-update#september-events","content":" In Sep, the Defang team participated in a number of events including HacktheNorth, LangaraHacks, MLH Global Hack Week and other MLH hackathons. It’s great to see Defang being put to use by these hackers to build their amazing projects. And we get useful insights from these events that help us improve the product. We will continue to do more of these events in the future - watch our LinkedIn page for announcements.    ","version":null,"tagName":"h2"},{"title":"Google for Startups Accelerator Canada​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024-09-30-product-update#google-for-startups-accelerator-canada","content":" Also in Sep, Defang was included in the Google for Startups Accelerator Canada. This is a great recognition of the value Defang is providing to cloud developers. Through our collaboration with Google, we hope to add GCP as another target cloud for Defang in the coming months - stay tuned!      ","version":null,"tagName":"h2"},{"title":"Defang Coffee Chat​","type":1,"pageTitle":"September 2024 Defang Compose Update","url":"/blog/2024-09-30-product-update#defang-coffee-chat","content":" Mark your calendars! If you’re eager to learn more about what’s coming next, join us for our Defang Coffee Chat on Oct 23rd 2024. We’ll be sharing our future roadmap, answering your questions, and gathering your feedback.  .css-s4g7hi{font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-s4g7hi:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-s4g7hi:hover{background-color:#1976d2;}}.css-s4g7hi:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} .css-110xwq5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;background-color:transparent;outline:0;border:0;margin:0;border-radius:0;padding:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;-moz-appearance:none;-webkit-appearance:none;-webkit-text-decoration:none;text-decoration:none;color:inherit;font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-110xwq5::-moz-focus-inner{border-style:none;}.css-110xwq5.Mui-disabled{pointer-events:none;cursor:default;}@media print{.css-110xwq5{-webkit-print-color-adjust:exact;color-adjust:exact;}}.css-110xwq5:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-110xwq5:hover{background-color:#1976d2;}}.css-110xwq5:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-110xwq5.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-110xwq5.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} Register here!    As always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! 🚀 ","version":null,"tagName":"h2"},{"title":"October 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/2024-11-13-product-update","content":"","keywords":"","version":null},{"title":"Events and Adoption​","type":1,"pageTitle":"October 2024 Defang Compose Update","url":"/blog/2024-11-13-product-update#events-and-adoption","content":" In October, the Defang team was actively involved in a range of exciting events. We participated in MLH Cloud Week, StormHacks, and hosted a DevTools Vancouver meetup, bringing together local DevTool founders, engineers, and enthusiasts. It was inspiring to see Defang in action, helping these hackers build their amazing projects.    When we shipped our Public Beta earlier in 2024, we had a goal to reach 1000 users by end of year. We are pleased to announce that we have already reached this milestone a couple of months in advance! We are excited to see the momentum behind the product and how our users are using Defang for developing and deploying a variety of different applications. Thank you for your support!  ","version":null,"tagName":"h2"},{"title":"The Road Ahead​","type":1,"pageTitle":"October 2024 Defang Compose Update","url":"/blog/2024-11-13-product-update#the-road-ahead","content":" The team is now heads-down dotting the i’s and crossing the t’s so we can release Defang V1 before end of year. This will enable customers to use Defang for production workloads. We look forward to sharing more in our next monthly update.      ","version":null,"tagName":"h2"},{"title":"Defang Coffee Chat ☕​","type":1,"pageTitle":"October 2024 Defang Compose Update","url":"/blog/2024-11-13-product-update#defang-coffee-chat-","content":" If you're excited about what's coming next and want to hear more about our vision for the future, join us for our Coffee Chat on November 27th 2024. We'll be sharing more about our roadmap and what we're working on next.  .css-s4g7hi{font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-s4g7hi:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-s4g7hi:hover{background-color:#1976d2;}}.css-s4g7hi:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-s4g7hi.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} .css-110xwq5{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;background-color:transparent;outline:0;border:0;margin:0;border-radius:0;padding:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;-moz-appearance:none;-webkit-appearance:none;-webkit-text-decoration:none;text-decoration:none;color:inherit;font-family:&quot;Roboto&quot;,&quot;Helvetica&quot;,&quot;Arial&quot;,sans-serif;font-weight:500;font-size:0.9375rem;line-height:1.75;letter-spacing:0.02857em;text-transform:uppercase;min-width:64px;padding:8px 22px;border-radius:4px;-webkit-transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;color:#fff;background-color:#1976d2;box-shadow:0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);}.css-110xwq5::-moz-focus-inner{border-style:none;}.css-110xwq5.Mui-disabled{pointer-events:none;cursor:default;}@media print{.css-110xwq5{-webkit-print-color-adjust:exact;color-adjust:exact;}}.css-110xwq5:hover{-webkit-text-decoration:none;text-decoration:none;background-color:#1565c0;box-shadow:0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);}@media (hover: none){.css-110xwq5:hover{background-color:#1976d2;}}.css-110xwq5:active{box-shadow:0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);}.css-110xwq5.Mui-focusVisible{box-shadow:0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);}.css-110xwq5.Mui-disabled{color:rgba(0, 0, 0, 0.26);box-shadow:none;background-color:rgba(0, 0, 0, 0.12);} Register here!    As always, we appreciate your feedback and are committed to making Defang the easiest way to develop, deploy, and debug your cloud applications. Go build something awesome! 🚀 ","version":null,"tagName":"h2"},{"title":"🚀 Defang V1: Launch Week is Here!","type":0,"sectionRef":"#","url":"/blog/2024-12-04-launch-week","content":"","keywords":"","version":null},{"title":"What’s New in Defang CLI V1?​","type":1,"pageTitle":"🚀 Defang V1: Launch Week is Here!","url":"/blog/2024-12-04-launch-week#whats-new-in-defang-cli-v1","content":" Defang is a powerful tool that lets you easily develop, deploy, and debug production-ready cloud applications. With Defang V1, we continue to deliver on our vision to make cloud development effortlessly simple and portable, with the ability to develop once and deploy anywhere. Here’s what’s included in this milestone release:  Production-Ready Support for AWS  Seamlessly deploy and scale with confidence on AWS. Defang is now WAFR-compliant, assuring that your deployments conform to all the best-practices for AWS deployments. Defang is now officially part of the AWS Partner Network.  New - Google Cloud Platform (GCP) in Preview  This week, we are excited to unveil support for deployments to GCP, in Preview. Start building and exploring and give us feedback as we work to enhance the experience further and move towards production support. Defang is also now officially part of the Google Cloud Partner Advantage program.  Support for DigitalOcean in Preview  Developers using DigitalOcean can explore our Preview features, with further enhancements and production support coming soon.  Defang Product Tiers and Introductory Pricing 🛠️  As we move into V1, we are also rolling out our differentiated product tiers, along with our special introductory pricing. Fear not, we will always have a free tier for hobbyists - conveniently called the Hobby tier. We now also provide Personal, Pro, and Enterprise tiers for customers with more advanced requirements. Check out what is included in each here. And as always, the Defang CLI is and remains open-source.  ","version":null,"tagName":"h2"},{"title":"Launch Week Activities​","type":1,"pageTitle":"🚀 Defang V1: Launch Week is Here!","url":"/blog/2024-12-04-launch-week#launch-week-activities","content":" We’ve lined up an exciting week of activities to showcase the power of Defang and bring together our growing community:  December 4: Vancouver CDW x AWS re:Invent Watch Party  Join us at the Vancouver CDW x AWS re:Invent Watch Party, where we will have a booth showcasing Defang’s capabilities and AWS integration. Stop by to learn more about Defang and see a live demo from the Defang dev team.  December 5–6: GFSA DemoDay and Git Push to 2025: Devs Social Party  Hear directly from Defang’s co-founder and CTO, Lio Lunesu, as we unveil Defang’s support for GCP at the Google for Startups Accelerator (GFSA) DemoDay event in Toronto. This event will also be live-streamed here.  Additionally, join us on December 5th for the final meetup of the year for Vancouver’s developer groups, hosted by VanJS in collaboration with other local dev communities.  December 6 &amp; 7: MLH Global Hack Week (GHW)  Join us during MLH Global Hack Week for hands-on workshops and learn how to build production-ready cloud applications in minutes with Defang.  December 7: Cloud Chat  An IRL event with our team to explore V1 features in depth, answer your questions, and share insights from our journey. Register here to join.  December 10: Product Hunt Launch  Be part of our Product Hunt debut and show your support as we reach the broader tech community.  ","version":null,"tagName":"h2"},{"title":"Join the Celebration 🎉​","type":1,"pageTitle":"🚀 Defang V1: Launch Week is Here!","url":"/blog/2024-12-04-launch-week#join-the-celebration-","content":" This launch week is not just about us. It is about you, our community. Here is how you can get involved:  Explore the Platform: Sign up at Defang.io and dive into V1. Attend Events: Mark your calendar for our scheduled activities. Spread the Word: Follow us on LinkedIn and X, share your experiences, and let others know why you love Defang.  We’re excited to celebrate this milestone with all of you. Stay tuned for more updates, and let’s make Launch Week unforgettable! ","version":null,"tagName":"h2"},{"title":"Defang is live on Product Hunt!","type":0,"sectionRef":"#","url":"/blog/2024-12-11-product-hunt","content":"The moment is finally here – Defang V1 is officially LIVE on Product Hunt! 🎉 Over the past few months, our team has been working tirelessly to create a tool that transforms how developers develop, deploy, and debug cloud apps. With Defang, you can go from idea to your favorite cloud in minutes. 🚀 Today, we have the opportunity to showcase Defang to a global audience, and your support could make all the difference! If you already have a Product Hunt account, it's super easy. ✅ You can support our product if you like what we have built so far✅ You can leave a comment and any feedback you may have (comments are great!)✅ You can leave a review Product Hunt launches are time sensitive as they last 24 hours, so if you have 30 seconds available right now, it would really mean a lot. If you don't already have a Product Hunt account, please don't create one now to upvote (we may get penalized for that). Instead, you can like and share our (e.g. LinkedIn, Twitter, Instagram or Facebook) posts . Thank you in advance. Your support means the world.","keywords":"","version":null},{"title":"About my Journey Deploying my First Web Application","type":0,"sectionRef":"#","url":"/blog/about-my-journey-deploying-my-first-web-application","content":"About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors’ instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like &quot;ECS clusters,&quot; &quot;task definitions,&quot; and &quot;IAM roles&quot; were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial’s scenarios. It could be confusing if you are new to this area I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. I have this scary screen when trying to delete the service I created; this is merely one of the many errors I faced Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. with just a single command in the CLI With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. It is deployed to the internet! (arorschach is my username) Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs","keywords":"","version":null},{"title":"Announcing the Defang Public Beta","type":0,"sectionRef":"#","url":"/blog/announcing-defang-public-beta","content":"Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today’s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you’ll receive an invitation to our Slack support channel in email. You are also welcome to file GitHub issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Add Defang to your developer environments instantly","type":0,"sectionRef":"#","url":"/blog/dev-environments","content":"","keywords":"","version":null},{"title":"Codespaces​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#codespaces","content":" If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's set up using the Defang CLI Dev Container Feature.  ","version":null,"tagName":"h2"},{"title":"Dev Containers​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#dev-containers","content":" Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others.  ","version":null,"tagName":"h2"},{"title":"Gitpod​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#gitpod","content":" Gitpod is another Cloud IDE, a bit like GitHub Codespaces. If prefer Gitpod, you can try Defang in a Gitpod environment by using this repo. ","version":null,"tagName":"h2"},{"title":"Announcing the Private Beta for the Defang Opinionated Platform","type":0,"sectionRef":"#","url":"/blog/announcement","content":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our GitHub repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Hard Lessons From Hardware","type":0,"sectionRef":"#","url":"/blog/hard-lessons-from-hardware","content":"","keywords":"","version":null},{"title":"My Story of Embedded Systems With Defang​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/hard-lessons-from-hardware#my-story-of-embedded-systems-with-defang","content":" Have you ever looked at a touch screen fridge and wondered how it works? Back in my day (not very long ago), a fridge was just a fridge. No fancy built-in interface, no images displayed, and no wifi. But times have changed, and I’ve learned a lot about embedded systems, thanks to Defang!    From my background, I was more into the web development and software side of things. Buffer flushing? Serial monitors? ESP32-S3? These were unheard of. Then one day at Defang, I was suggested to work on a project with a SenseCAP Indicator, a small programmable touch screen device. Everyone wished me good luck when I started. That’s how I knew it wasn’t going to be an easy ride. But here I am, and I’m glad I did it.  What is embedded systems/programming? It’s combining hardware with software to perform a function, such as interacting with the physical world or accessing cloud services. A common starting point for beginners is an Arduino board, which is what the SenseCAP Indicator has for its hardware. My goal was to make a UI display for this device, and then send its input to a computer, and get that data into the cloud.    ","version":null,"tagName":"h2"},{"title":"The Beginning​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/hard-lessons-from-hardware#the-beginning","content":" My journey kicked off with installing the Arduino IDE on my computer. It took me two hours—far longer than I expected—because the software versions I kept trying were not the right ones. Little did I know that I would encounter this issue many times later, such as when downloading ESP-IDF, a tool for firmware flashing. Figuring out what not to install had become a highly coveted skill.  The next part was writing software to display images and text. This was slightly less of a problem thanks to forums of users who had done the exact same thing several years ago. One tool I used was Squareline Studio, a UX/UI design tool for embedded devices. With a bit of trial and error, I got a simple static program displayed onto the device. Not half bad looking either. Here’s what it looked like:    ","version":null,"tagName":"h2"},{"title":"The Middle​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/hard-lessons-from-hardware#the-middle","content":" Now came the networking part. Over wifi, I set up a Flask (Python) server on my computer to receive network pings from the SenseCAP Indicator. I used a library called ArduinoHTTPClient. At first, I wanted to ping the server each time a user touched the screen. Then came driver problems, platform incompatibilities, deprecated libraries…  … After weeks of limited progress due to resurfacing issues, I decided to adjust my goal to send pings on a schedule of every 5 seconds, rather than relying on user input. I changed the UI to be more colorful, and for good reason. Now, each network ping appears with a message on the screen. Can you look closely to see what it says?    This is what the Flask server looked like on my computer as it got pinged:    Hooray! Once everything was working, It was time to deploy my Flask code as a cloud service so I could access it from any computer, not just my own. Deployment usually takes several hours due to configuring a ton of cloud provider settings. But I ain’t got time for that. Instead, I used Defang to deploy it within minutes, which took care of all that for me. Saved me a lot of time and tears.  Here’s the Flask deployment on Defang’s Portal view:    Here’s the Flask server on the cloud, accessed with a deployment link:    ","version":null,"tagName":"h2"},{"title":"The End​","type":1,"pageTitle":"Hard Lessons From Hardware","url":"/blog/hard-lessons-from-hardware#the-end","content":" After two whole months, I finally completed my journey from start to finish! This project was an insightful dive into the world of embedded systems, internet networking, and cloud deployment.  Before I let you go, here are the hard lessons from hardware, from yours truly:  Learning what not to do can be equally as important.Some problems are not as unique as you think.One way to achieve a goal is by modifying it.Choose the simpler way if it is offered.That’s where Defang comes in.  Want to try deploying to the cloud yourself? You can try it out here. Keep on composing up! 💪 ","version":null,"tagName":"h2"},{"title":"June 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/july-2024-product-update","content":"","keywords":"","version":null},{"title":"Windows Experience Improvements​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#windows-experience-improvements","content":" For our Windows users out there, we've made some changes to make your Defang experience even smoother:  You can now install Defang using winget, the Windows Package Manager, for a streamlined setupWe've introduced a signed binary for added security and peace of mind  Deploying your apps from Windows just got a little bit nicer.  ","version":null,"tagName":"h2"},{"title":"One-click Deploy​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#one-click-deploy","content":" We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects.  Try it now from our portal!    ","version":null,"tagName":"h2"},{"title":"Managed Redis Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#managed-redis-updates","content":" We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang.  ","version":null,"tagName":"h2"},{"title":"Updated Samples​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#updated-samples","content":" We've updated our sample projects to showcase how to use them with Defang, including:  ASP.NET CoreFeathers.jsFlask &amp; LangChainBullMQ with Redis  Check them out if you're looking for some inspiration or a starting point for your own projects.  ","version":null,"tagName":"h2"},{"title":"CLI Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#cli-updates","content":" We're always looking for ways to enhance the CLI experience. Here's what's new:  npx defang automatically checks to always have the latest version of the CLIThe output during defang compose up has been streamlined to focus on the most important informationdefang tail now supports listening to specific services, making it easier to troubleshoot issuesWe've improved hints and error messages to better guide you when something goes wrongThe CLI now has improved color support for light theme terminals, making it easier on the eyes  It's the small refinements that can make a big difference in your workflow.  ","version":null,"tagName":"h2"},{"title":"Other Updates​","type":1,"pageTitle":"June 2024 Defang Compose Update","url":"/blog/july-2024-product-update#other-updates","content":" Here are a few more things that didn't quite fit with the rest:  Visibility into ECS deployment events in BYOC tail logsImprovements to ACME certificate generation  Keep an eye out for these updates in the near future.    As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! 🚀 ","version":null,"tagName":"h2"},{"title":"May 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/june-2024-product-update","content":"","keywords":"","version":null},{"title":"Samples, samples, samples!​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#samples-samples-samples","content":" We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality.  ","version":null,"tagName":"h2"},{"title":"Start from a sample in seconds​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#start-from-a-sample-in-seconds","content":" With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit.  ","version":null,"tagName":"h3"},{"title":"Sample templates​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#sample-templates","content":" If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-&lt;sample_name&gt;-template. If you open them, you can create a new repo by clicking this button:    Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately.  ","version":null,"tagName":"h3"},{"title":"ACME for BYOD​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#acme-for-byod","content":" We’re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy.  ","version":null,"tagName":"h2"},{"title":"Warnings for Stateful Services​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#warnings-for-stateful-services","content":" To help you avoid potential pitfalls, we’ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:&lt;version&gt;, redis:&lt;version&gt;, minio:&lt;version&gt;, etc.  In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which...  ","version":null,"tagName":"h2"},{"title":"Managed Redis!​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#managed-redis","content":" Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition.  ","version":null,"tagName":"h2"},{"title":"Load Testing​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#load-testing","content":" To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly.  ","version":null,"tagName":"h2"},{"title":"Upgraded Kaniko​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#upgraded-kaniko","content":" We’ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications.  ","version":null,"tagName":"h2"},{"title":"Upcoming Features​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#upcoming-features","content":" We’re not stopping here! Here’s a sneak peek at what’s coming soon:  ","version":null,"tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#managed-postgres","content":" Building on the momentum of Managed Redis, we’re introducing Managed Postgres. Soon you’ll be able to easily integrate a managed Postgres database into your deployment!  ","version":null,"tagName":"h3"},{"title":"BYOC ECS Lifecycle Events​","type":1,"pageTitle":"May 2024 Defang Compose Update","url":"/blog/june-2024-product-update#byoc-ecs-lifecycle-events","content":" Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood.    Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! 🚀 ","version":null,"tagName":"h3"},{"title":"April 2024 Defang Compose Update","type":0,"sectionRef":"#","url":"/blog/may-2024-product-update","content":"","keywords":"","version":null},{"title":"npx defang​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#npx-defang","content":" We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally by running:  npx defang@latest   This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!  ","version":null,"tagName":"h2"},{"title":"(coming soon) Bring Your Own Domain with Let's Encrypt​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#coming-soon-bring-your-own-domain-with-lets-encrypt","content":" Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you.  ","version":null,"tagName":"h2"},{"title":"Windows Support​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#windows-support","content":" Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed:  ansi color codes in logshandle ctrl-c when tailing logs  ","version":null,"tagName":"h2"},{"title":"Improved CLI​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#improved-cli","content":" We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable.  log messages have been made more clearadding more progress information during compose up  ","version":null,"tagName":"h2"},{"title":"Stability and Reliability​","type":1,"pageTitle":"April 2024 Defang Compose Update","url":"/blog/may-2024-product-update#stability-and-reliability","content":" Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:  capacity improvements in build queuesimprovements in log availability ","version":null,"tagName":"h2"},{"title":"Deploy a Go-powered slackbot with Defang","type":0,"sectionRef":"#","url":"/blog/slackbot-sample","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#prerequisites","content":" Before we dive into the details, let's make sure you have everything you need to get started:  Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the bot chat:write scope. Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the &quot;Install to Workspace&quot; button in the Slack admin UI to do this. Mine says &quot;Reinstall&quot; because I've already installed it. Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API. Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the @&lt;botname&gt; command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel. Clone the Sample Code: Clone the Defang repository and navigate to the samples/golang/slackbot directory. This directory contains the sample code for the Slackbot.  git clone https://github.com/DefangLabs/defang cd defang/samples/golang/slackbot   ","version":null,"tagName":"h2"},{"title":"Deployment Steps​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#deployment-steps","content":" Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:  Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's defang config set command to set the SLACK_TOKEN and SLACK_CHANNEL_ID configs. Replace your_slack_token and your_slack_channel_id with the respective values: defang config set --name SLACK_TOKEN --value your_slack_token defang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id Deploy the Slackbot: Use the Defang CLI's defang compose up command to deploy.  ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#usage","content":" With your Slackbot up and running, let's explore how to make the most of it. Let's send a POST request to the / endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:  curl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\ -H 'content-type: application/json' \\ --data-raw $'{&quot;message&quot;:&quot;This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.&quot;}'   ","version":null,"tagName":"h2"},{"title":"Takeaways​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#takeaways","content":" Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! ","version":null,"tagName":"h2"},{"title":"Ask Defang","type":0,"sectionRef":"#","url":"/docs/ask","content":"Ask Defang","keywords":"","version":"Next"},{"title":"defang cert","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options","content":"  -h, --help help for cert   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang cert generate - Generate a TLS certificate  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang","type":0,"sectionRef":"#","url":"/docs/cli/defang","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#options","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -h, --help help for defang -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#see-also","content":" defang cert - Manage certificatesdefang compose - Work with local Compose filesdefang config - Add, update, or delete service configdefang deployments - Manage Deploymentsdefang generate - Generate a sample Defang projectdefang login - Authenticate to Defangdefang logout - Log outdefang new - Create a new Defang project from a sampledefang services - Get list of services in the projectdefang tail - Tail logs from one or more servicesdefang terms - Read and/or agree the Defang terms of servicedefang token - Manage personal access tokensdefang upgrade - Upgrade the Defang CLI to the latest versiondefang version - Get version information for the CLI and Fabric servicedefang whoami - Show the current user  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang cert generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#see-also","content":" defang cert - Manage certificates  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose","content":"","keywords":"","version":"Next"},{"title":"Synopsis​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#synopsis","content":" Define and deploy multi-container applications with Defang. Most compose commands require a &quot;compose.yaml&quot; file. The simplest &quot;compose.yaml&quot; file with a single service is:  services: app: # the name of the service build: . # the folder with the Dockerfile and app sources (. means current folder) ports:  80 # the port the service listens on for HTTP requests  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options","content":"  -h, --help help for compose   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang compose config - Reads a Compose file and shows the generated configdefang compose down - Reads a Compose file and deprovisions its servicesdefang compose logs - Tail logs from one or more servicesdefang compose ps - Get list of services in the projectdefang compose up - Reads a Compose file and deploy a new project or update an existing project  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose ps","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_ps","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#options","content":"  -h, --help help for ps -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose ps","url":"/docs/cli/defang_compose_ps#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose logs","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_logs","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#options","content":"  --etag string deployment ID (ETag) of the service -h, --help help for logs -n, --name string name of the service -r, --raw show raw (unparsed) logs -S, --since string show logs since duration/time --type log-type show logs of type; one of [RUN BUILD] (default UNSPECIFIED) --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose logs","url":"/docs/cli/defang_compose_logs#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose config","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose up","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_up","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options","content":"  -d, --detach run in detached mode --force force a build of the image even if nothing has changed -h, --help help for up -m, --mode mode deployment mode, possible values: development, staging, production (default development) --wait-timeout int maximum duration to wait for the project to be running|healthy (default -1)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang compose down","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_down","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options","content":"  -d, --detach run in detached mode -h, --help help for down   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config ls","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_ls","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options","content":"  -h, --help help for ls   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config","type":0,"sectionRef":"#","url":"/docs/cli/defang_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang config create - Adds or updates a sensitive config valuedefang config ls - List configsdefang config rm - Removes one or more config values  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config create","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_create","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options","content":"  -e, --env set the config from an environment variable -h, --help help for create   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang deployments","type":0,"sectionRef":"#","url":"/docs/cli/defang_deployments","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang deployments","url":"/docs/cli/defang_deployments#options","content":"  -h, --help help for deployments   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang deployments","url":"/docs/cli/defang_deployments#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang deployments","url":"/docs/cli/defang_deployments#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud servicesdefang deployments list - List deployments  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang config rm","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_rm","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options","content":"  -h, --help help for rm   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang deployments list","type":0,"sectionRef":"#","url":"/docs/cli/defang_deployments_list","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang deployments list","url":"/docs/cli/defang_deployments_list#options","content":"  -h, --help help for list   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang deployments list","url":"/docs/cli/defang_deployments_list#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang deployments list","url":"/docs/cli/defang_deployments_list#see-also","content":" defang deployments - Manage Deployments  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang login","type":0,"sectionRef":"#","url":"/docs/cli/defang_login","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options","content":"  -h, --help help for login --training-opt-out Opt out of ML training (Pro users only)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang logout","type":0,"sectionRef":"#","url":"/docs/cli/defang_logout","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options","content":"  -h, --help help for logout   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang tail","type":0,"sectionRef":"#","url":"/docs/cli/defang_tail","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options","content":"  --etag string deployment ID (ETag) of the service -h, --help help for tail -n, --name string name of the service -r, --raw show raw (unparsed) logs -S, --since string show logs since duration/time --type log-type show logs of type; one of [RUN BUILD] (default UNSPECIFIED) --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang services","type":0,"sectionRef":"#","url":"/docs/cli/defang_services","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options","content":"  -h, --help help for services -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang new","type":0,"sectionRef":"#","url":"/docs/cli/defang_new","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang new","url":"/docs/cli/defang_new#options","content":"  -h, --help help for new   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang new","url":"/docs/cli/defang_new#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang new","url":"/docs/cli/defang_new#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang terms","type":0,"sectionRef":"#","url":"/docs/cli/defang_terms","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options","content":"  --agree-tos agree to the Defang terms of service -h, --help help for terms   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang upgrade","type":0,"sectionRef":"#","url":"/docs/cli/defang_upgrade","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#options","content":"  -h, --help help for upgrade   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang upgrade","url":"/docs/cli/defang_upgrade#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang whoami","type":0,"sectionRef":"#","url":"/docs/cli/defang_whoami","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options","content":"  -h, --help help for whoami   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang token","type":0,"sectionRef":"#","url":"/docs/cli/defang_token","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options","content":"  --expires duration validity duration of the token (default 24h0m0s) -h, --help help for token --scope string scope of the token; one of [admin delete read tail] (required)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"defang version","type":0,"sectionRef":"#","url":"/docs/cli/defang_version","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options","content":"  -h, --help help for version   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options-inherited-from-parent-commands","content":"  --color color-mode colorize output; one of [never auto always] (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file stringArray compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) --org string Override GitHub organization name (tenant) -p, --project-name string project name -P, --provider provider bring-your-own-cloud provider; one of [defang aws digitalocean gcp] (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#see-also","content":" defang - Defang CLI is used to develop, deploy, and debug your cloud services  Auto generated by spf13/cobra on 21-Jan-2025​ ","version":"Next","tagName":"h3"},{"title":"Authentication","type":0,"sectionRef":"#","url":"/docs/concepts/authentication","content":"Authentication To do pretty much anything with Defang, you'll need to authenticate with the system. You can do this by running the following command in the CLI: defang login This will prompt you to open a browser and log in to your Defang account. For now, the only way to log in is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in. tip Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.","keywords":"","version":"Next"},{"title":"Accounts","type":0,"sectionRef":"#","url":"/docs/concepts/accounts","content":"","keywords":"","version":"Next"},{"title":"Creating an Account​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#creating-an-account","content":" To create an account, log in to Defang and accept the Terms of Service using the CLI.  At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future.  tip Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#structure","content":" Your GitHub username will be used as your Defang username. Your Defang username is used to group all your services and generate domains for your services with the following structure:  &lt;username&gt;-&lt;servicename&gt;--&lt;port&gt;.prod1.defang.dev   For more about domain structures, see our Domains page. ","version":"Next","tagName":"h2"},{"title":"Defang BYOC","type":0,"sectionRef":"#","url":"/docs/concepts/defang-byoc","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#configuration","content":" The Defang CLI can be configured to deploy to a cloud provider either by using the --provider flag or by setting the DEFANG_PROVIDER environment variable. For example:  # Supported provider values: auto, aws, defang, digitalocean # Default is auto, which deploys to the Defang Playground but warns if it detects cloud credentials $ defang compose up --provider=aws # or $ export DEFANG_PROVIDER=digitalocean   ","version":"Next","tagName":"h3"},{"title":"AWS​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#aws","content":" Please read the AWS Provider documentation for more details about how the AWS provider works and how to get started.  AWS Free Tier &amp; Credits You can use the AWS Free Tier to try out Defang. Learn more about it here. If you're an elligible startup, you can sign up for credits here.  ","version":"Next","tagName":"h2"},{"title":"DigitalOcean​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#digitalocean","content":" info The Defang DigitalOcean Provider is available for Public Preview as of October 2024.  Please read the DigitalOcean Provider documentation for more details about how the DigitalOcean provider works and how to get started.  DigitalOcean Credits You can get DigitalOcean credits to try out Defang. Learn more about it on their pricing page. If you're an elligible startup, you can sign up for credits here.  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#gcp","content":" info The Defang GCP Provider is available for Public Preview as of December 2024.  Please check out the GCP Provider page for more details.  GCP Free Tier &amp; Credits You can use the GCP Free Tier to try out Defang. Learn more about it here. If you're an elligible startup, you can sign up for credits here.  ","version":"Next","tagName":"h2"},{"title":"Azure​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#azure","content":" info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue. ","version":"Next","tagName":"h2"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/concepts/configuration","content":"","keywords":"","version":"Next"},{"title":"Interpolation​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#interpolation","content":" Environment variables are set within the environment section of a service in a compose.yaml file. Any variables declared here will become available within the service container.  Variables can be set by assigning a literal value, a reference to a configuration value, or a mix of literal and variable references. Variable references are declared using either ${variable_name} or $variable_name forms. It is recommended to use the bracketed form. By interpolating over variable references within a string we can construct complex strings. Interpolation may be particularly useful when constructing connection strings to other services.  service: environment: - USER_PASSWORD // configuration variable - USER_NAME // configuration variable - CONNECT=dbservice:${USER_NAME}:${USER_PASSWORD}@example.com:9876   In the example above, if we assume the value of the configuration variable USER_PASSWORD is password then the value assigned to CONNECT will resolve to dbservice:alice:password@example.com:9876  During defang compose up all variable references will be replaced with the actual value and made available in the container. If any referenced variable is not found the defang compose up command will be canceled.  ","version":"Next","tagName":"h2"},{"title":"Using Config with Pulumi​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#using-config-with-pulumi","content":" In Defang, using config with Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks.  tip You can find a sample of how to set environment variables with Pulumi here.  ","version":"Next","tagName":"h2"},{"title":"Connecting Services​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#connecting-services","content":" If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi.  ","version":"Next","tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#providers","content":" Here are the different ways sensitive config values are stored depending on the provider you are using:  AWSDigitalOceanGCP  info Please note that while Defang supports setting sensitive config, it does not support the secrets top-level element as seen in the Compose specification. Please see our Compose page for more details. ","version":"Next","tagName":"h2"},{"title":"Debug","type":0,"sectionRef":"#","url":"/docs/concepts/debug","content":"","keywords":"","version":"Next"},{"title":"How It Works​","type":1,"pageTitle":"Debug","url":"/docs/concepts/debug#how-it-works","content":" Here is a typical workflow in the Defang CLI that will automatically run the AI debugger tool:  When you deploy a project with Defang (i.e. defang compose up), the CLI will wait for all services' statuses to switch to healthy. If any service fails to deploy, the AI debugger will kick in and ask for permission. The AI agent will analyze the logs and files in your project to identify the issue(s). Then, it will provide you with the suggested fix(es) in the terminal.  tip The AI debugger will not change your files. Instead, it will show you a suggestion, and it is up to you if you want to use it in your code.  The AI debugger only kicks in when any service in a project fails to deploy. This could be because of a build failure, healthchecks failing, or a variety of other issues.  info The AI debugger only kicks in when any service in a project fails to deploy. At the moment, we do not offer any way to trigger the AI debugger manually. ","version":"Next","tagName":"h2"},{"title":"Compose","type":0,"sectionRef":"#","url":"/docs/concepts/compose","content":"","keywords":"","version":"Next"},{"title":"How It Works​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#how-it-works","content":" You can create a compose.yaml file in the root of your project, or use the defang generate command to create one for you (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of services.  When you run defang compose up, Defang will read your compose.yaml file and deploy the services named in that file to the cloud.  ","version":"Next","tagName":"h2"},{"title":"Example of a Compose File​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#example-of-a-compose-file","content":" Here is a basic compose.yaml file that contains all the required properties for deployment in Defang.  services: service-example: image: nginx:latest # use one of: image (shown on this line) or build (shown below) # build: # context: . # dockerfile: Dockerfile ports: - mode: ingress # specify ports to expose target: 8080 published: 8080 # this is useful for running locally   ","version":"Next","tagName":"h2"},{"title":"Compose Top-level Properties​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#compose-top-level-properties","content":" Here are a list of top-level properties of the Compose specification that Defang supports when writing a compose.yaml file.  ","version":"Next","tagName":"h2"},{"title":"services​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#services","content":" (Required)  The services defined in your application.  services: service: # add service-level properties here   info Defang identifies a service based on your username, project name, and the service name you've defined under the services property. See our Services page for more about how Defang resolves service names.  ","version":"Next","tagName":"h3"},{"title":"networks​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#networks","content":" (Optional)  The networks defined in your application. This is commonly added together with a service-level networks property.  networks: public:   See our Networking page for more.  ","version":"Next","tagName":"h3"},{"title":"volumes​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#volumes","content":" (Not yet supported)  The volume mounts for a container, reusable across services. This feature is not currently supported by Defang.  # volumes: # db-data:   warning Defang does not support the secrets top-level property. Please read our Configuration page for more.  ","version":"Next","tagName":"h3"},{"title":"Compose Service-level Properties​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#compose-service-level-properties","content":" Here are a list of service-level properties of the Compose specification that Defang supports when writing a compose.yaml file.  tip Service-level means inside your service. A service-level property called build would look like: service: build: ... Note that in your Compose file, you will need a top-level property called services to contain all of your services. For example: services: service: build: ...   ","version":"Next","tagName":"h2"},{"title":"build​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#build","content":" (Required, unless image is defined)  The build configuration. This property describes how to create an OCI container for this service.  build: context: . dockerfile: ./Dockerfile   ","version":"Next","tagName":"h3"},{"title":"image​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#image","content":" (Required, unless build is defined)  This property describes the image from which your container should start.  image: nginx:latest   ","version":"Next","tagName":"h3"},{"title":"ports​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#ports","content":" (Optional, but required if you want to access the service from outside the container)  The ports to expose. The default port mode is ingress.  ports: - mode: ingress target: 80 published: 80   info Defang ignores published ports in production. As such, it is common to make target and published ports the same when using Defang. However, it can be useful to include a published port for local development, such as Docker.  ","version":"Next","tagName":"h3"},{"title":"command​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#command","content":" (Optional)  The command which will be run to start your service. If left out, the command from the Docker image will be used.  command: nginx -g 'daemon off;'   ","version":"Next","tagName":"h3"},{"title":"deploy​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#deploy","content":" (Optional)  The Deploy Specification describes the runtime constraints and requirements for how your services will be deployed and managed across different environments (e.g. memory reservations, replicas, number of CPUs, etc.).  deploy: replicas: 1 reservations: cpus: '0.5' memory: 256M   ","version":"Next","tagName":"h3"},{"title":"depends_on​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#depends_on","content":" (Not yet supported)  This property describes startup dependencies between services. This feature is currently unsupported by Defang, but can be useful in local developments such as Docker.  # depends_on: # - db   ","version":"Next","tagName":"h3"},{"title":"environment​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#environment","content":" (Optional)  The environment variables to set.  environment: DATABASE_USER: someuser   info For sensitive environment variables (or secret values), you should list the variable's name with a blank or null value, and then securely set their actual value with defang config in the CLI. See our Configuration page for more. For example: - DATABASE_USER=someuser # env var loaded with this literal value - DATABASE_PASSWORD # env var loaded using defang config   ","version":"Next","tagName":"h3"},{"title":"healthcheck​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#healthcheck","content":" (Optional, but required for healthchecks on services with a published port)  This property describes a check that will be run to determine whether or not a service's containers are &quot;healthy&quot;. It works in the same way, and has the same default values, as the HEALTHCHECK Dockerfile instruction set by the service's Docker image. Your Compose file can override the values set in the Dockerfile.  When using Defang, your Compose file must have a healthcheck if you want to expose an ingress port—even if your Dockerfile already contains one.  note curl is commonly used for containers with an Ubuntu-based image, and wget is used for containers with an alpine-based image.  healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8080/&quot;] interval: 30s timeout: 90s retries: 3   or  healthcheck: test: [&quot;CMD&quot;, &quot;wget&quot;, &quot;--spider&quot;, &quot;http://localhost:8080/&quot;] interval: 30s timeout: 90s retries: 3   ","version":"Next","tagName":"h3"},{"title":"networks​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#networks-1","content":" (Optional)  The network configuration. Can be public, where Defang will assign a public IP address, or private, in which Defang will not. To avoid warnings, add this to the top-level networks property as well.  networks: public:   You can also assign an alias for a network by using aliases, as seen below:  networks: public: aliases: - app   See our Networking page for more.  ","version":"Next","tagName":"h3"},{"title":"restart​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#restart","content":" (Optional, but highly recommended)  The restart mode for a container. Defaults to unless-stopped unless otherwise specified.  restart: unless-stopped   ","version":"Next","tagName":"h3"},{"title":"volumes​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#volumes-1","content":" (Not yet supported)  The volume mounts for a container, specific to a service. This feature is not currently supported by Defang.  # volumes: # - &quot;./backend:/app&quot;  ","version":"Next","tagName":"h3"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/docs/concepts/deployments","content":"","keywords":"","version":"Next"},{"title":"Deploying Updates​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#deploying-updates","content":" When you run a deployment to update one or more services, Defang will build new images for your services, and provision new resources to replace your existing services.  ","version":"Next","tagName":"h2"},{"title":"Zero Downtime Deployments​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#zero-downtime-deployments","content":" Defang can deploy your services using different modes. When using the production mode, Defang will make sure the new replacement services are healthy before deprovisioning your existing services.  By default, using the development mode, Defang will deprovision your existing services before provisioning replacements. This helps reduce costs.  info In Defang BYOC, Defang uses your cloud provider account to build and store your images. In Defang Playground, we build and store your images for you.  ","version":"Next","tagName":"h3"},{"title":"Deployment Modes​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#deployment-modes","content":" As mentioned above, Defang offers different deployment modes: development, staging, and production. You can switch the modes using the --mode CLI flag.  warning Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates.  ","version":"Next","tagName":"h3"},{"title":"Instance Types​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#instance-types","content":" Defang defaults to &quot;spot&quot; instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the 12 Factor principle of disposability.  info In the future, we may provide a way to use &quot;on-demand&quot; instances for workloads that require more stability. ","version":"Next","tagName":"h2"},{"title":"Defang Playground","type":0,"sectionRef":"#","url":"/docs/concepts/defang-playground","content":"","keywords":"","version":"Next"},{"title":"Limitations​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#limitations","content":" There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC.  ","version":"Next","tagName":"h2"},{"title":"No Apex Domain Support​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#no-apex-domain-support","content":" When you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own apex domains to Defang Playground services, but you can use subdomains.  ","version":"Next","tagName":"h3"},{"title":"Max Resources​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#max-resources","content":" Projects: 1Services: 4CPUs: 2Memory: 1GiBReplicas: 1 ","version":"Next","tagName":"h3"},{"title":"Deployment Modes","type":0,"sectionRef":"#","url":"/docs/concepts/deployment-modes","content":"","keywords":"","version":"Next"},{"title":"Deployment Mode Comparison​","type":1,"pageTitle":"Deployment Modes","url":"/docs/concepts/deployment-modes#deployment-mode-comparison","content":" Feature\tDevelopment\tStaging\tProductionBuild Resources\tBuilds will be run with 2x vCPUs\tBuilds will be run with 2x vCPUs\tBuilds will be run with 4x vCPUs Compute\tUsing spot instances\t(like development)\tOn-demand instances Databases\tDefang will provision resources optimized for burstable memory\t(like production)\tDefang will provision resources optimized for production Deployment\tPrevious deployments will be spun down before new deployments are spun up.\t(like production)\tRolling updates will be used to deploy new versions. Defang will gradually replace services while maintaining at least the original number of replicas. Logging\tLogs retained for 1 day to save costs. Logs retained for 30 days for compliance. Networking (like production)\tDefang will provision a NAT gateway. Load Balancing\tHTTP redirect to HTTPS using 302 Found Termination Protection will be enabled; logs are retained on &quot;down&quot; DNS\tDefang will provision shorter TTLs; zones will be forcefully destroyed Defang will provision longer TTLs; records can be overwritten for ZDT Managed storage\tOperations that cause downtime are allowed Encryption at rest; Final snapshot created on &quot;down&quot; Logs\t1 day retention\t7 days retention\t30 days retention ","version":"Next","tagName":"h2"},{"title":"Generate","type":0,"sectionRef":"#","url":"/docs/concepts/generate","content":"","keywords":"","version":"Next"},{"title":"Example Prompts​","type":1,"pageTitle":"Generate","url":"/docs/concepts/generate#example-prompts","content":" Here are some example prompts that the AI agent can help you with:  A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.   A simple service that runs in the cloud and serves a web page   A simple flask app with one route that responds with a json object   A simple next.js app that serves a static page   A simple api with a single route built on express   An HTTP GET endpoint that returns an HTML with a random meme from the imgflip API   An example of a more complex prompt  A service that uses bullmq and redis. The compose file should also include a redis service. The code should set up a queue. It should also expose three endpoints with express: one to add a job to the queue, another to check how many tasks are in the queue, and a last one that runs on / which is just a healthcheck. The code should also include a worker that processes the queue by logging what's in each task. Use environment variables to configure the redis connection. No password.  ","version":"Next","tagName":"h2"},{"title":"Managed Storage","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage","content":"Managed Storage Defang helps you provision the infrastructure you need to run your services. That infrastructure is designed to scale in and out without persistent storage, so you can build highly scalable services. But Defang can also help you provision managed services to store and persist your data, like caches, databases, and object storage.","keywords":"","version":"Next"},{"title":"Domains","type":0,"sectionRef":"#","url":"/docs/concepts/domains","content":"","keywords":"","version":"Next"},{"title":"Defang-hosted Domains​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#defang-hosted-domains","content":" To make your service accessible from the public internet with Defang-hosted domains (under defang.app), you simply expose ports in your service definition.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#structure","content":" Defang-hosted domains use a structure that is based on your username and service name.  PlaygroundBYOC If you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the Defang Playground, your domain will be structured as follows: https://&lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.defang.dev   ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration","content":" ComposePulumi services: # [...] serviceName: ports: - mode: ingress target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Bring Your Own Domain​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#bring-your-own-domain","content":" You can also bring your own domain to a Defang project. This allows you to use your own domain name to access your services, and varies a little bit depending on your setup.  ","version":"Next","tagName":"h2"},{"title":"BYOC or Defang Playground​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#byoc-or-defang-playground","content":" If you are using Defang BYOC and do not have your domain's DNS hosted with your cloud provider, or if you are using the Defang Playground, you will need to follow this flow:  Add the domainname to your service definition.Run defang compose up to deploy your project.Run defang cert generate to generate an SSL certificate. This command will provide instructions for where to point your domain's DNS before the certificate can be issued.  ","version":"Next","tagName":"h3"},{"title":"BYOC​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#byoc","content":" If you are using Defang BYOC and the DNS for your domain is hosted with your cloud provider (i.e. a Hosted Zone in Route 53, if you're using AWS), all you need to do is specify the domainname in your service definition, as in the example below.  warning For the time being, you can only use one domain per service. If you need to use multiple domains, please vote on this issue.  ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration-1","content":" ComposePulumi services: # [...] serviceName: domainname: example.com ports: - mode: ingress target: 3000 protocol: http  ","version":"Next","tagName":"h3"},{"title":"Managed Object Storage","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-object-storage","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Object Storage","url":"/docs/concepts/managed-storage/managed-object-storage#current-support","content":" Provider\tManaged Object StoragePlayground\t❌ AWS\t❌ DigitalOcean\t❌ GCP\t❌ ","version":"Next","tagName":"h2"},{"title":"Observability","type":0,"sectionRef":"#","url":"/docs/concepts/observability","content":"","keywords":"","version":"Next"},{"title":"Tail​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#tail","content":" The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service.  defang tail --name my-service defang tail --etag ua119053ehi2   ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#architecture","content":" In Defang BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed. ","version":"Next","tagName":"h2"},{"title":"Managed Postgres","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-postgres","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#current-support","content":" Provider\tManaged PostgresPlayground\t❌ AWS\t✅ DigitalOcean\t❌ GCP\t❌  ","version":"Next","tagName":"h2"},{"title":"How to use Managed Postgres​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#how-to-use-managed-postgres","content":" To use managed Postgres, in your compose.yaml file, use the x-defang-postgres extension to define your Postgres service. Adding the extension will tell Defang to provision a managed instance, rather than running Postgres as a service.  ","version":"Next","tagName":"h2"},{"title":"Required Configuration​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#required-configuration","content":" When using managed Postgres, you must set a password for the database using defang config set POSTGRES_PASSWORD. If you do not provide the password, the deployment will fail.  POSTGRES_PASSWORD: You can can assign the password in the service's environment variables. To learn more about how this works, read about configuration.  ","version":"Next","tagName":"h3"},{"title":"Optional Configuration​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#optional-configuration","content":" You can also set the following optional environment variables to configure the managed Postgres instance:  POSTGRES_USER: The user for the managed Postgres instance. The default is postgres.POSTGRES_DB: The database name for the managed Postgres instance. The default is postgres.  ","version":"Next","tagName":"h3"},{"title":"Connecting to Managed Postgres​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#connecting-to-managed-postgres","content":" You can connect to the managed Postgres instance using the name of your service as the hostname, POSTGRES_USER, POSTGRES_DB, and POSTGRES_PASSWORD environment variables.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#example","content":" info For a smoother experience with Defang, we recommend using Postgres 14 for your container images. This version provides easier access and improved usability.   app: # [...] environment: POSTGRES_HOST: database POSTGRES_USER: postgres POSTGRES_DB: postgres # Note: by leaving the value empty, Defang will use the # value set using `defang config set POSTGRES_PASSWORD` POSTGRES_PASSWORD: # Note: you can create a connection string by using interpolation, # reference config variables by using ${&lt;config name&gt;} CONNECTURL: postgresql://postgres:${POSTGRES_PASSWORD}@database:5432/postgres?sslmode=require database: image: postgres:14 x-defang-postgres: true ports: - mode: host target: 5432 environment: # Note: by leaving the value empty, Defang will use the # value set using `defang config set POSTGRES_PASSWORD` POSTGRES_PASSWORD:   ","version":"Next","tagName":"h3"},{"title":"Final Snapshots​","type":1,"pageTitle":"Managed Postgres","url":"/docs/concepts/managed-storage/managed-postgres#final-snapshots","content":" When a project is deployed to a production environment, any managed Postgres instances are automatically configured to create a snapshot of the database before deletion. The snapshot will be named with the following format:  &lt;project-name&gt;-&lt;service&gt;-postgres-&lt;id&gt;-final-snapshot  The AWS Console can be used to restore a snapshot into a new instance of Postgres. ","version":"Next","tagName":"h2"},{"title":"Managed Redis","type":0,"sectionRef":"#","url":"/docs/concepts/managed-storage/managed-redis","content":"","keywords":"","version":"Next"},{"title":"Current Support​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#current-support","content":" Provider\tManaged RedisPlayground\t❌ AWS\t✅ DigitalOcean\t❌ GCP\t❌  ","version":"Next","tagName":"h2"},{"title":"How to use Managed Redis​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#how-to-use-managed-redis","content":" To use managed Redis, in your compose.yaml file, use the x-defang-redis extension to define your Redis service. Adding the extension will tell Defang to provision a managed instance, rather than running Redis as a service. Defang will use the image tag to determine the version to provision from your cloud provider. Here's an example:  cache: image: redis:6.2 x-defang-redis: true restart: unless-stopped ports: - mode: host target: 6379   ","version":"Next","tagName":"h2"},{"title":"Final Snapshots​","type":1,"pageTitle":"Managed Redis","url":"/docs/concepts/managed-storage/managed-redis#final-snapshots","content":" When a project is deployed with the production deployment mode, any managed Redis instances are automatically configured to create a snapshot of the datastore before deletion. The snapshot will be named with the following format:  &lt;project-name&gt;-&lt;service&gt;-redis-&lt;id&gt;-final-snapshot  The AWS Console can be used to restore a snapshot into a new instance of Redis. ","version":"Next","tagName":"h2"},{"title":"Networking","type":0,"sectionRef":"#","url":"/docs/concepts/networking","content":"","keywords":"","version":"Next"},{"title":"Internal Communication​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-communication","content":" You can expose ports in your service definition to allow other services to communicate with it. Similar to public communication, you can use the ports section of your service definition, but set the mode to host instead of ingress to allow other services to communicate with it through the internal network.  ","version":"Next","tagName":"h2"},{"title":"Sample Configuration​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#sample-configuration","content":" ComposePulumi services: # [...] service1: ports: - mode: host target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Internal DNS​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-dns","content":" Internal communication is handled slightly differently between the Defang Playground and Defang BYOC.  PlaygroundBYOC Internal communication between services in the Defang Playground follows the following pattern: http://&lt;username&gt;-&lt;service-name&gt;:&lt;port&gt;  ","version":"Next","tagName":"h3"},{"title":"Portal","type":0,"sectionRef":"#","url":"/docs/concepts/portal","content":"Portal You can log into the Defang Portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications. You can use the Portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. info The Defang Portal displays services deployed to Defang Playground. To view services deployed to Defang BYOC, please check out Monitoring Your Services. tip Need help with a failing deployment? Defang provides a tool to help debug in your application.","keywords":"","version":"Next"},{"title":"Projects","type":0,"sectionRef":"#","url":"/docs/concepts/projects","content":"","keywords":"","version":"Next"},{"title":"Project Names​","type":1,"pageTitle":"Projects","url":"/docs/concepts/projects#project-names","content":" The project name can be defined in the Compose file with the name property, otherwise the base name of the project directory will be used.  The project name may then be used when performing project-wide operations such as listing services, tailing logs, or deprovisioning. For example:  defang services --project-name &lt;project-name&gt; defang tail --project-name &lt;project-name&gt; defang compose down --project-name &lt;project-name&gt;   By default defang will use the project name from the compose.yaml file in the working directory. The --project-name CLI flag may be used when running defang from outside the working directory. ","version":"Next","tagName":"h2"},{"title":"Security","type":0,"sectionRef":"#","url":"/docs/concepts/security","content":"","keywords":"","version":"Next"},{"title":"Roles & Permissions​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#roles--permissions","content":" Defang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more.  ","version":"Next","tagName":"h2"},{"title":"Networking​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#networking","content":" Defang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required.  ","version":"Next","tagName":"h2"},{"title":"SSL​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#ssl","content":" Defang automates the process of obtaining and renewing SSL certificates for your services using AWS Certificate Manager.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#secrets","content":" Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS). ","version":"Next","tagName":"h2"},{"title":"Run-time Resources","type":0,"sectionRef":"#","url":"/docs/concepts/resources","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Run-time Resources","url":"/docs/concepts/resources#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Run-time Resources","url":"/docs/concepts/resources#docker-compose","content":" services: gpu-service: deploy: replicas: 3 resources: reservations: cpus: '1.0' memory: 2048M devices: - capabilities: [&quot;gpu&quot;]   ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Run-time Resources","url":"/docs/concepts/resources#pulumi","content":" const service = new defang.DefangService(&quot;gpu-service&quot;, { deploy: { replicas: 3, resources: { reservations: { cpu: 1.0, memory: 2048, devices: [{capabilities: ['gpu']}] } } } });   GPUs If you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the Docker-Compose documentation. This is the only supported value in the deploy.resources.reservations.devices section.  Build-time Resources  You can configure the memory requirements and disk space requirements for your image builds by using the shm_size property of your service's build specification.  For example,  services: my_service: build: context: . dockerfile: Dockerfile shm_size: 2G   info Defang uses shm_size to configure both the memory and disk space available to your build process.  The default shm_size values for each platform are as follows. More or less may be specified.  Platform\tshm_size MinimumAWS\t16G Digital Ocean\t8G GCP\t16G ","version":"Next","tagName":"h3"},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/concepts/services","content":"","keywords":"","version":"Next"},{"title":"Service Name Resolution​","type":1,"pageTitle":"Services","url":"/docs/concepts/services#service-name-resolution","content":" Defang identifies services by using your account username, project name, and service name. The port is included in the domain for the service.  tip Service names are defined in your Compose file or in your Pulumi program.  PlaygroundBYOC Domains for services in Playground follow the following pattern: &lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.prod1a.defang.dev   ","version":"Next","tagName":"h3"},{"title":"Service Deployment​","type":1,"pageTitle":"Services","url":"/docs/concepts/services#service-deployment","content":" Defang manages the deployment process for services. You can learn more about how services are deployed in the Deployment page.  info We plan to add support for other types of services in the future, including serverless functions.  ","version":"Next","tagName":"h3"},{"title":"Service Status​","type":1,"pageTitle":"Services","url":"/docs/concepts/services#service-status","content":" An overview of the possible statuses for a service in Defang.  Status\tDetailsBUILD_QUEUED\tThe service update has been received and is now in the queue for its image to be built. BUILD_PROVISIONING\tThe container orchestrator is provisioning the necessary resources for building your service's image. BUILD_PENDING\tThe necessary resources to build your service have been provisioned but the build has not yet been initiated. BUILD_ACTIVATING\tThe container orchestrator is pulling the build container's image and creating the build container. BUILD_RUNNING\tThe container which builds your service's image is successfully running. BUILD_STOPPING\tThe container orchestrator has sent a termination signal to the build container and is waiting for the build process to stop. BUILD_FAILED\tThe build container exited with a non-zero status code. UPDATE_QUEUED\tThe service update has been received and is now in the queue. SERVICE_DEPLOYMENT_PENDING\tThe necessary resources to run your service have been provisioned but the service has not yet been initiated. SERVICE_DEPLOYMENT_COMPLETED\tYour service has been deployed and is healthy. SERVICE_DEPLOYMENT_FAILED\tYour service could not be deployed.  tip You can run the defang compose ps command to view the status of your services. ","version":"Next","tagName":"h2"},{"title":"Frequently Asked Questions (FAQ)","type":0,"sectionRef":"#","url":"/docs/faq/questions","content":"","keywords":"","version":"Next"},{"title":"Deployment and Infrastructure​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#deployment-and-infrastructure","content":" ","version":"Next","tagName":"h2"},{"title":"Which cloud/region is the app being deployed to?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#which-cloudregion-is-the-app-being-deployed-to","content":" In the Defang Playground, the app is deployed to AWS us-west-2. In the Defang BYOC model, the region is determined by your Defang BYOC Provider settings.  ","version":"Next","tagName":"h3"},{"title":"Can I bring my own AWS or other cloud account?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-bring-my-own-aws-or-other-cloud-account","content":" Yes! Defang makes it easy to deploy your application to your own cloud account. Please check out the Defang BYOC documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"On AWS, can I deploy to services such as EC2, EKS, or Lambda?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#on-aws-can-i-deploy-to-services-such-as-ec2-eks-or-lambda","content":" The current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources.  ","version":"Next","tagName":"h3"},{"title":"Can I access AWS storage services such as S3 or database services such as RDS? How?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-access-aws-storage-services-such-as-s3-or-database-services-such-as-rds-how","content":" Yes! You can access AWS services in the AWS Dashboard as you normally would when you are deploying to your AWS account using Defang. In fact, you can access whatever other resources exist in the cloud account you are using for Defang BYOC.  ","version":"Next","tagName":"h3"},{"title":"Do you plan to support other clouds?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#do-you-plan-to-support-other-clouds","content":" While we currently support AWS for production, GCP and DigitalOcean are in preview with Defang V1. We plan to support other clouds, such as Azure, in future releases.  ","version":"Next","tagName":"h3"},{"title":"Deployment Process​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#deployment-process","content":" ","version":"Next","tagName":"h2"},{"title":"Can I run production apps with Defang?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-run-production-apps-with-defang","content":" Yes! Defang makes it easy to deploy your app on production-ready infrastructure in your own cloud account. For example, you can deploy your app to AWS with defang compose up --provider=aws --mode=production. Check out your preferred cloud provider on Defang BYOC and see our Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Does Defang support blue/green deployments?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#does-defang-support-bluegreen-deployments","content":" Defang does not currently support blue/green deployments, but it does support rolling updates with the --mode=production flag. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Does Defang support rolling deployments?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#does-defang-support-rolling-deployments","content":" Yes! Defang supports rolling updates with the --mode=production flag. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Does Defang support auto-scaling?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#does-defang-support-auto-scaling","content":" No. Defang does not currently support auto-scaling. However, you can check out the Scaling Your Services tutorial to see how you can scale your services manually with Defang.  ","version":"Next","tagName":"h3"},{"title":"Can I cancel a deployment once it has started?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-cancel-a-deployment-once-it-has-started","content":" No. Once a deployment has started, it cannot be canceled. However, you can always deploy a new version of your app which will replace the current deployment.  ","version":"Next","tagName":"h3"},{"title":"Will deploying a new version of my app cause downtime?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#will-deploying-a-new-version-of-my-app-cause-downtime","content":" If you have deployed your application with the --mode=production flag, Defang will use the production deployment mode. This mode will perform a rolling update to ensure zero downtime. If you use another deployment mode, you may experience downtime during the deployment, as Defang will not provision multiple replicas to save cost. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Can I deploy multiple services at once?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-deploy-multiple-services-at-once","content":" Yes! You can deploy multiple services at once by defining them in a single compose.yaml file. When you run defang compose up, Defang will deploy all the services defined in the file at once.  ","version":"Next","tagName":"h3"},{"title":"Can I deploy a service that depends on another service?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#can-i-deploy-a-service-that-depends-on-another-service","content":" Defang does not currently support service dependencies. All services will be deployed simultaneously. Defang will however run multiple healthchecks before marking a service as healthy and spinning down any previously deployed services when using the production deployment mode. See the Deployment Modes documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"Feature Comparisons​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#feature-comparisons","content":" ","version":"Next","tagName":"h2"},{"title":"Is Defang a run-time platform?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#is-defang-a-run-time-platform","content":" No. Defang is not a run-time platform. Instead, it lets you host and run your application on a cloud provider of your choice. You can think of it as a tool that makes it way easier to deploy to that cloud provider. We do provide Defang Playground, but it is meant to be used as a testing environment only.  ","version":"Next","tagName":"h3"},{"title":"What is the difference between Defang and platforms such as Vercel, fly.io, and Railway?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#what-is-the-difference-between-defang-and-platforms-such-as-vercel-flyio-and-railway","content":" Defang is a tool that helps you get your application deployed to a cloud provider of your choice, and it is not a platform. Unlike platforms, Defang does not host your application. We do provide Defang Playground, but it is meant to be used as a testing environment only.  ","version":"Next","tagName":"h3"},{"title":"What is the difference between Defang and tools such as SST?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#what-is-the-difference-between-defang-and-tools-such-as-sst","content":" Defang is cloud-agnostic and language-agnostic, meaning that it is designed to work with different cloud providers, and programming languages. Since Defang is not tied to just one cloud or language, this allows for greater flexibility in a wide range of cases. Another difference is that Defang follows the Compose specification, allowing it to work smoothly with various container platforms such as Docker.  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"I'm having trouble running the binary on my Mac. What should I do?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#im-having-trouble-running-the-binary-on-my-mac-what-should-i-do","content":" MacOS users will need to allow the binary to run due to security settings: Attempt to run the binary. You'll see a security prompt preventing you from running it.Go to System Preferences &gt; Privacy &amp; Security &gt; General.In the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.Alternatively, select the option &quot;App Store and identified developers&quot; to allow all applications from the App Store and identified developers to run.  ","version":"Next","tagName":"h3"},{"title":"I'm getting a warning/error. What does it mean?​","type":1,"pageTitle":"Frequently Asked Questions (FAQ)","url":"/docs/faq/questions#im-getting-a-warningerror-what-does-it-mean","content":" Please see the Common Error Messages page. ","version":"Next","tagName":"h3"},{"title":"Common Error Messages","type":0,"sectionRef":"#","url":"/docs/faq/warnings-errors","content":"","keywords":"","version":"Next"},{"title":"Warnings​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#warnings","content":" ","version":"Next","tagName":"h2"},{"title":"\"The folder is not empty. Files may be overwritten.\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#the-folder-is-not-empty-files-may-be-overwritten","content":" This message is displayed when you run defang generate and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running defang generate or pick a different target folder.  ","version":"Next","tagName":"h3"},{"title":"\"environment variable not found\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#environment-variable-not-found","content":" This message is displayed when you run defang compose up and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run defang compose up.  ","version":"Next","tagName":"h3"},{"title":"\"Unsupported platform\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#unsupported-platform","content":" This message is displayed when you run defang compose up and the Compose file references a platform that is not supported by Defang.  ","version":"Next","tagName":"h3"},{"title":"\"not logged in\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#not-logged-in","content":" This message is displayed when you run defang compose config but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using defang login.  ","version":"Next","tagName":"h3"},{"title":"\"No port mode was specified; assuming 'host'\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#no-port-mode-was-specified-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port that does not specify a port mode. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the mode as ingress:  services: service1: … ports: - target: 80 mode: ingress   ","version":"Next","tagName":"h3"},{"title":"\"Published ports are not supported in ingress mode; assuming 'host'\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#published-ports-are-not-supported-in-ingress-mode-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and published set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the mode as ingress and remove the published setting.  ","version":"Next","tagName":"h3"},{"title":"\"TCP ingress is not supported; assuming HTTP\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#tcp-ingress-is-not-supported-assuming-http","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and protocol set to tcp. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the protocol setting.  ","version":"Next","tagName":"h3"},{"title":"\"unsupported compose directive\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#unsupported-compose-directive","content":" This message is displayed when you run defang compose up and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior.  ","version":"Next","tagName":"h3"},{"title":"\"no reservations specified; using limits as reservations\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#no-reservations-specified-using-limits-as-reservations","content":" This message is displayed when you run defang compose up and the Compose file declares a resource with limits but no reservations. Defang will use the limits as reservations to ensure the container has enough resources. Specify reservations if you want to silence the warning or reserve a different amount of resources:  services: service1: … deploy: resources: reservations: cpus: 0.5 memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"ingress port without healthcheck defaults to GET / HTTP/1.1\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#ingress-port-without-healthcheck-defaults-to-get--http11","content":" This message is displayed when you run defang compose up and the Compose file declares an ingress with a port but no healthcheck. Defang will assume the default healthcheck of GET / HTTP/1.1 to ensure the port is healthy. Specify a healthcheck if you want to silence the warning or use a different healthcheck:  services: service1: … deploy: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]   ","version":"Next","tagName":"h3"},{"title":"\"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#missing-memory-reservation-specify-deployresourcesreservationsmemory-to-avoid-out-of-memory-errors","content":" This message is displayed when you run defang compose up and the Compose file doesn't specify a memory reservation. If available, Defang will use the memory limit as the memory reservation. Specify a memory reservation if you want to silence the warning or reserve a different amount of memory:  services: service1: … deploy: resources: reservations: memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"The build context contains more than 10 files\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#the-build-context-contains-more-than-10-files","content":" This message is displayed when you run defang compose up and the Compose file declares a build with a context that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the context as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the context.  ","version":"Next","tagName":"h3"},{"title":"\"AWS provider was selected, but AWS environment variables are not set\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#aws-provider-was-selected-but-aws-environment-variables-are-not-set","content":" This message is displayed when you run defang compose up with the --provider=aws but none of the AWS environment variables were set. If you proceed, the deployment might fail, unless you have defined defined default credentials in the AWS configuration files or are running on an AWS instance.  ","version":"Next","tagName":"h3"},{"title":"\"Using Defang provider, but AWS environment variables were detected\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#using-defang-provider-but-aws-environment-variables-were-detected","content":" This message is displayed when you run defang compose up with the --provider=defang but AWS environment variables were detected. The AWS environment variables will be ignored.  ","version":"Next","tagName":"h3"},{"title":"Errors​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#errors","content":" ","version":"Next","tagName":"h2"},{"title":"\"Stack:… is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#stack-is-in-update_complete_cleanup_in_progress-state-and-cannot-be-updated","content":" This happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using defang version.  ","version":"Next","tagName":"h3"},{"title":"\"invalid healthcheck: ingress ports require an HTTP healthcheck on localhost.\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#invalid-healthcheck-ingress-ports-require-an-http-healthcheck-on-localhost","content":" This message is displayed when defang compose up tries to deploy a service with an &quot;ingress&quot; port, if the service does not have a healthcheck which mentions localhost. Defang routes a load balancer to your service's ingress ports, and the loadbalancer needs to be able to check the health of the service. To solve this issue, ask yourself these two questions:  Should my service be public? It's common to declare your container's ports using the Compose file &quot;shorthand&quot; syntax (1234:1234). This syntax can be understood as [HOST:]CONTAINER. If your service is not intended to be public, you do not need to declare a HOST port. For example: services: my-service: image: my-image ports: - - &quot;1234:1234&quot; + - &quot;1234&quot; Does my healthcheck include the string localhost? It is very common to define a healthcheck by using curl or wget to make a request to localhost. So common, in fact, that Defang will look for the string localhost in your healthcheck definition. For example, this healthcheck is valid: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:1234/health&quot;] This healthcheck is not valid for ingress ports: healthcheck: test: [&quot;CMD&quot;, &quot;./my-healthcheck&quot;]   ","version":"Next","tagName":"h3"},{"title":"\"The build aborted with OutOfMemoryError: Container killed due to memory usage\"​","type":1,"pageTitle":"Common Error Messages","url":"/docs/faq/warnings-errors#the-build-aborted-with-outofmemoryerror-container-killed-due-to-memory-usage","content":" The image build might fail if the build process uses too much memory. The first thing to try is to limit the size of your project by excluding unnecessary files: the easiest way is to create a .dockerignore file that excludes irrelevatn files. Note that Defang will use a default .dockerignore file if you don't have one, but that default might not work for some projects and it's always better to make a .dockerignore file specific to your project.  If that doesn't work, see our Resources documentation for more information on how to configure the memory requirements and disk space requirements for your image builds. ","version":"Next","tagName":"h3"},{"title":"Pulumi","type":0,"sectionRef":"#","url":"/docs/concepts/pulumi","content":"","keywords":"","version":"Next"},{"title":"Install the Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#install-the-defang-pulumi-provider","content":" To get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project:  npmpnpmyarn npm i @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"When to Use the Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#when-to-use-the-defang-pulumi-provider","content":" The Defang Pulumi Provider is a good option for developers with more complex requirements than those supported by a Compose File.  One reason to use the Defang Pulumi provider is if you wish to integrate your services with other cloud resources. This is particularly true if you need to configure your services dynamically as other cloud resources are being provisioned.  Another reason would be if you want to deploy your services alongside cloud-specific resources, like a DynamoDB table, or an S3 bucket.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#example","content":" The following is a minimal example of a Pulumi program that defines a Defang service:  import * as defang from &quot;@defang-io/pulumi-defang/lib&quot;; const service = new defang.DefangService(&quot;my-service&quot;, { image: &quot;strm/helloworld-http:latest&quot;, ports: [{ target: 80, mode: &quot;ingress&quot;, protocol: &quot;http&quot;, }], });   info See the Deploy using Pulumi tutorial for more information about how to use it.  ","version":"Next","tagName":"h2"},{"title":"API​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#api","content":" ","version":"Next","tagName":"h2"},{"title":"DefangService​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defangservice","content":" constructor( name: string, args: DefangServiceArgs, opts?: pulumi.CustomResourceOptions )   ","version":"Next","tagName":"h3"},{"title":"DefangServiceArgs​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defangserviceargs","content":" interface DefangServiceArgs { /** the DNS name of the Defang Fabric service; defaults to the value of DEFANG_FABRIC or prod, if unset */ fabricDNS?: pulumi.Input&lt;string&gt;; /** the name of the service; defaults to the name of the resource */ name?: pulumi.Input&lt;string&gt;; /** the container image to deploy; required when no build configuration was provided */ image?: pulumi.Input&lt;string&gt;; /** the platform to deploy to; defaults to &quot;linux/amd64&quot; */ platform?: pulumi.Input&lt;Platform&gt;; /** which network the service is in, ie. whether the service requires a public IP or not; defaults to &quot;private&quot; (was: internal=true) */ networks?: { [key in NetworkName]?: Network }; /** the optional deployment configuration */ deploy?: pulumi.Input&lt;Deploy&gt;; /** the ports to expose */ ports?: pulumi.Input&lt;pulumi.Input&lt;Port&gt;[]&gt;; /** the environment variables to set; use `null` to mark at sensitive */ environment?: pulumi.Input&lt;{ [key: string]: pulumi.Input&lt;string&gt; | null }&gt;; /** the secrets to expose as environment variables @deprecated use environment key with value `null` */ secrets?: pulumi.Input&lt;pulumi.Input&lt;Secret&gt;[]&gt;; /** force deployment of the service even if nothing has changed */ forceNewDeployment?: pulumi.Input&lt;boolean&gt;; /** the command to run; overrides the container image's CMD */ command?: pulumi.Input&lt;pulumi.Input&lt;string&gt;[]&gt;; /** the optional build configuration; required when no image was provided */ build?: pulumi.Input&lt;Build&gt;; /** the optional health-check test for the service */ healthcheck?: pulumi.Input&lt;HealthCheck&gt;; /** the optional fully qualified domain name for the service; requires CNAME to the publicFqdn */ domainname?: pulumi.Input&lt;string&gt;; /** experimental: mark this service as (managed) Redis */ x_redis?: pulumi.Input&lt;unknown&gt;; /** experimental: mark this service as serving static files */ x_static_files?: pulumi.Input&lt;StaticFiles&gt;; /** if true, this provider will wait for the service to reach a steady state before continuing */ waitForSteadyState?: pulumi.Input&lt;boolean&gt;; /** the project to deploy the service to */ project?: pulumi.Input&lt;string&gt;; }   ","version":"Next","tagName":"h3"},{"title":"Platform​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#platform","content":" type Platform = &quot;linux/arm64&quot; | &quot;linux/amd64&quot; | &quot;linux&quot;;   ","version":"Next","tagName":"h3"},{"title":"Protocol​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#protocol","content":" type Protocol = &quot;tcp&quot; | &quot;udp&quot; | &quot;http&quot; | &quot;http2&quot; | &quot;grpc&quot;;   ","version":"Next","tagName":"h3"},{"title":"DeviceCapability​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#devicecapability","content":" type DeviceCapability = &quot;gpu&quot;;   ","version":"Next","tagName":"h3"},{"title":"NetworkName​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#networkname","content":" type NetworkName = &quot;private&quot; | &quot;public&quot;;   ","version":"Next","tagName":"h3"},{"title":"Network​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#network","content":" type Network = { aliases?: string[] } | null;  ","version":"Next","tagName":"h3"},{"title":" ","type":0,"sectionRef":"#","url":"/docs/intro","content":" Defang Documentation Defang is a radically simpler way for developers to develop, deploy, and debug their cloud applications. Build cloud applications in any language, deploy to your cloud account with a single command, and iterate quickly with AI-assisted tooling. Getting Started 📄️ Learn more about Defang What is Defang and how does it work? 📄️ CLI Reference Use the Defang CLI to deploy your app 📄️ Try Defang Deploy to our free playground 📄️ Deploy to your own cloud When you're ready for production","keywords":"","version":"Next"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Install the Defang CLI​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#install-the-defang-cli","content":" Defang doesn't require installing anything in your cloud, but you will need to install the open source Defang command line interface (CLI) to interact with your Defang resources and account.  We offer a few different ways to install the Defang CLI. You can use a shell script, Homebrew, Winget, or you can download the binary directly.  ShellHomebrewWingetNixDirect Download Using Homebrew You can easily install the Defang CLI using Homebrew. Run the following command in your terminal: brew install DefangLabs/defang/defang   ","version":"Next","tagName":"h2"},{"title":"Generate a project​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#generate-a-project","content":" $ defang generate nodejs-http   You should see the following prompt:  ? What folder would you like to create the project in?   Type in the name of the folder you'd like to use for your new project and press ENTER.  I'll type &quot;welcome-to-defang&quot;. Now, you'll see the following output:  ? What folder would you like to create the project in? welcome-to-defang * Fetching sample from the Defang repository... * Writing files to disk... - .github/ - .github/workflows/ - .github/workflows/deploy.yaml - README.md - app/ - app/Dockerfile - app/main.js - compose.yaml * Code generated successfully in folder welcome-to-defang Check the files in your favorite editor. To deploy the service, do `cd welcome-to-defang` and defang compose up   Now, navigate to the folder you just created:  $ cd welcome-to-defang   You can open the folder in your favorite editor and see the files that were generated for you:  The app folder contains the code for your service.The Dockerfile is used to build the container image for your service.The compose.yaml file is used to define the services you want to deploy.  ","version":"Next","tagName":"h2"},{"title":"Deploy to the Playground​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#deploy-to-the-playground","content":" Go back to your shell and type the following:  $ defang compose up   If you have not used Defang before, you'll be prompted to log in.   ! Please log in to continue. Please visit http://127.0.0.1:49154 and log in. (Right click the URL or press ENTER to open browser)   info To learn more about how authentication works in Defang, check out our Authentication page.  When you do this, you should see something similar to the output below:   * Uploading build context for app * Deploying service app * Monitor your services' status in the defang portal - https://portal.defang.dev/service/app * Tailing logs for deployment ID o59k89vk3qc8 ; press Ctrl+C to detach: * Press V to toggle verbose mode 2024-09-19T10:50:53.572443-07:00 cd Update started for stack jordanstephens-prod1 2024-09-19T10:51:05.536299-07:00 cd Update succeeded in 11.99769745s ; provisioning... 2024-09-19T10:51:39.419693-07:00 app Server running at http://0.0.0.0:3000/ * Service app is in state DEPLOYMENT_COMPLETED and will be available at: - https://jordanstephens-app--3000.prod1.defang.dev * Done.   Now we can go to https://portal.defang.dev/service/app to see our service listed in the Defang portal.    ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#next-steps","content":" Congratulations! You've successfully deployed your first service with Defang. Now, where do you go from here?  Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  📄️ Deploy to your own cloud When you're ready for production 📄️ Generate a Project with AI Use Defang to generate and deploy a new project 📄️ Explore the Defang CLI Learn more about the Defang CLI 📄️ Learn more about Defang What is Defang and how does it work? 📄️ Deploy using Pulumi Deploy using Pulumi 📄️ Monitor your services Learn how to monitor your services with Defang  Choose the direction that seems the most interesting. If you have any questions, join the Defang Discord and we'll be happy to help you out. ","version":"Next","tagName":"h2"},{"title":"Defang Features","type":0,"sectionRef":"#","url":"/docs/intro/features","content":"","keywords":"","version":"Next"},{"title":"Wide Variety of Use Cases​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#wide-variety-of-use-cases","content":" Support for various types of applications: web services and APIs, mobile app backends, ML services, hosting LLMs, etc...Support for your programming language of choice: Node.js, Python, Golang, or anything else you can package in a Dockerfile  ","version":"Next","tagName":"h3"},{"title":"AI-Driven Features​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#ai-driven-features","content":" Built-in AI agent to go from natural language prompt to an outline projectBuilt-in AI agent to help you debug your cloud applications  ","version":"Next","tagName":"h3"},{"title":"Container Friendly​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#container-friendly","content":" Automated Dockerfile buildsSupport for pre-built Docker containers, from public or private image registriesAbility to express your project configuration using a Docker Compose YAML file  ","version":"Next","tagName":"h3"},{"title":"Effortless Deployment​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#effortless-deployment","content":" One-command deploymentsSupport for GPUs and managed storage optionsSupport for Infra-as-Code via the Defang Pulumi provider  ","version":"Next","tagName":"h3"},{"title":"Security and Configuration​","type":1,"pageTitle":"Defang Features","url":"/docs/intro/features#security-and-configuration","content":" Ability to manage encrypted configuration valuesPre-configured environments with built-in security, networking, and observability ","version":"Next","tagName":"h3"},{"title":"Defang Use Cases","type":0,"sectionRef":"#","url":"/docs/intro/use-cases","content":"","keywords":"","version":"Next"},{"title":"Web Services and APIs​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#web-services-and-apis","content":" Defang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI agent to help you get started.  Defang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring networking, security, and observability, and will give you a nice, horizontally scalable deployment.  If you are using Defang BYOC, you can easily connect to databases, storage, and other services that you have running in your cloud account.  ","version":"Next","tagName":"h2"},{"title":"Mobile App Backends​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#mobile-app-backends","content":" A mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend.  ","version":"Next","tagName":"h2"},{"title":"Hosting LLMs​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#hosting-llms","content":" LLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy.  Anti-patterns  While Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are 12 Factor anti-patterns.  ","version":"Next","tagName":"h2"},{"title":"Stateful Services​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#stateful-services","content":" Some applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because containers are ephemeral and can be replaced at any time.  ","version":"Next","tagName":"h2"},{"title":"Data Stores​","type":1,"pageTitle":"Defang Use Cases","url":"/docs/intro/use-cases#data-stores","content":" Defang now offers support for stateful workloads through our managed storage options, including Postgres and Redis for data stores. However, we do not recommend using unsupported data stores with Defang, as this may lead to permanent data loss.  info To better serve our users, we will be introducing additional managed storage options, such as Object Storage, in the near future.  Please be aware that if you choose not to use a Defang-supported managed storage option, there is a risk that any data stored in a container may be lost if the container is replaced. ","version":"Next","tagName":"h2"},{"title":"What is Defang?","type":0,"sectionRef":"#","url":"/docs/intro/what-is-defang","content":"","keywords":"","version":"Next"},{"title":"A Tool to Develop, Deploy, Debug​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#a-tool-to-develop-deploy-debug","content":" Defang is a radically simpler way for developers to develop, deploy, and debug their cloud applications. Defang enables you to easily author cloud applications in any language, build and deploy to the cloud with a single command, and iterate quickly with AI-assisted tooling.  ","version":"Next","tagName":"h2"},{"title":"Develop​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#develop","content":" The Defang CLI (command line interface) includes an AI-driven agent that translates natural language prompts to generate an outline for your project that you can then refine.  ","version":"Next","tagName":"h3"},{"title":"Deploy​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#deploy","content":" Defang can automatically build and deploy your project with a single command.  If you’re new to Defang, you can try deploying to Defang Playground, a hosted environment to learn to use Defang with non-production workloads.Once you’re ready, you can deploy a project to your own cloud account - we call this Defang BYOC (Bring-your-Own-Cloud). We offer support for the following cloud providers: Amazon Web Services (AWS)DigitalOceanGoogle Cloud Platform (GCP) To support stateful workloads, we've got managed storage options such as Managed Postgres and Managed Redis.If you want, you can also bring your own domain name for your deployment.  Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer. It also allows you to easily publish updates to your deployed application with zero downtime.  ","version":"Next","tagName":"h3"},{"title":"Debug​","type":1,"pageTitle":"What is Defang?","url":"/docs/intro/what-is-defang#debug","content":" Once you've deployed, you can use our AI agent to help debug your cloud applications, using your service logs and project files to help you identify and resolve issues. ","version":"Next","tagName":"h3"},{"title":"Azure","type":0,"sectionRef":"#","url":"/docs/providers/azure","content":"Azure info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue. You can learn more about other cloud providers.","keywords":"","version":"Next"},{"title":"How Defang Works","type":0,"sectionRef":"#","url":"/docs/intro/how-it-works","content":"","keywords":"","version":"Next"},{"title":"Bootstrapping​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#bootstrapping","content":" The first time you deploy with Defang, a new cd service will be created in your cloud account. This service acts as an intermediary between you and your cloud provider. It will set up a grpc endpoint with which the Defang CLI can communicate. When the cli sends a request to trigger a deployment, for example, this service will orchestrate the build and deployment process—interfacing with the cloud APIs on your behalf. We will also create the necessary resources to support the defang system. This includes things like roles, a storage space, an image repository, certificates, etc. The specific resources created depend on the cloud provider.  Our architecture and AWS implementation has passed a &quot;well-architected&quot; review. We are in the process for obtaining similar qualifications with Digital Ocean and Google Cloud.  You can learn more about the specifics by visiting our provider docs.  info The cd service does not run all the time. It is only used when you deploy a new service or update an existing service. Once it has finished deploying your service, it will shut itself down.   flowchart TD subgraph workspace[&quot;Local Workspace&quot;] compose[compose.yaml] cli(&quot;Defang CLI&quot;) end subgraph cloud[&quot;Cloud&quot;] sdk((&quot;SDK&quot;)) cd(cd) kaniko(Kaniko) subgraph services[&quot; &quot;] service1(&quot;Service 1&quot;) service2(&quot;Service 2&quot;) service3(&quot;Service 3&quot;) end end compose --&gt; cli cli &lt;--&gt; cd cd --&gt; kaniko cd --&gt; sdk sdk --&gt; services   ","version":"Next","tagName":"h2"},{"title":"Orchestrating Deployments​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#orchestrating-deployments","content":" The Defang cd service acts as an intermediary between you and your cloud provider. This service receives deployment requests from the Defang CLI. Once a request has been received, cd orchestrates the process of building application images from your source code, and then continues to provision the necessary resources to deploy your application.  info The defang cli will upload your source code to a storage destination within your cloud. Your source code is never processed by Defang's servers.  ","version":"Next","tagName":"h2"},{"title":"Building Images​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#building-images","content":" When you deploy a new service, Defang will build a Docker image from your source code. This source code is uploaded by the defang cli to a storage destination in your cloud account. The Defang cd service will then retrieve it and determine if each of your service's images need to be rebuilt. If rebuilding is necessary, cd will start a new container for each build it needs to complete.  When you deploy an update to an existing service, the Defang cd service will determine if rebuilding your service's images is necessary. For example, when deploying new source code, cd will request that a new image be built. When deploying an update which does not require a new image, one will not be built—for example, redeploying the same service with increased or decreased resource requirements. In this case, the same image can be deployed to newly provisioned cloud resources.  Defang uses Kaniko to build your images in a container in your cloud account. The resulting images will be stored in your cloud account's private container registry for future reference.  ","version":"Next","tagName":"h2"},{"title":"Service Provisioning​","type":1,"pageTitle":"How Defang Works","url":"/docs/intro/how-it-works#service-provisioning","content":" After your images have been built, cd will provision the necessary resources and deploy these images as new services in your cloud account. Defang uses the cloud provider's SDK to create the necessary resources for your services. This may include creating new containers, setting up networking, and configuring any other resources your services needs, such as storage resources.  When deploying changes to existing services, the cd service will determine the minimum set of changes necessary and add, remove, replace, or update services as necessary. ","version":"Next","tagName":"h2"},{"title":"Amazon Web Services (AWS)","type":0,"sectionRef":"#","url":"/docs/providers/aws","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#getting-started","content":" Getting started with the Defang BYOC AWS Provider is easy. The first step is to authenticate your shell with AWS as an admin user. The authenticated user should be an IAM admin because Defang will need permission to create resources and IAM roles in your account.  tip If you have the AWS CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID.  Use the --provider=aws flag to tell the Defang CLI to use the AWS Provider or set the DEFANG_PROVIDER environment variable to aws.  $ defang compose up --provider=aws # or $ export DEFANG_PROVIDER=aws   warning Because Defang creates roles, you need to have the appropriate permissions to create roles in your cloud provider account, typically the AdministratorAccess policy in AWS.  tip The Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail.  ","version":"Next","tagName":"h2"},{"title":"Region​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#region","content":" The Defang BYOC AWS Provider will use the region specified in the AWS_REGION environment variable, or a profile in the ~/.aws/config file exactly as the AWS CLI would.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#secrets","content":" Defang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#runtime","content":" The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services.  ","version":"Next","tagName":"h3"},{"title":"Service Discovery​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#service-discovery","content":" Defang uses a Route53 private hosted zone for service discovery. Each (private) service in the Compose file will get a CNAME or A record which resolves to the service's AWS domain name or IP, respectively. To update the A records for the dynamically assigned IP addresses, Defang will add a Route53 sidecar alongside your container.  ","version":"Next","tagName":"h3"},{"title":"Managed Storage​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-storage","content":" Defang can help you provision managed storage services. The following managed storage services are supported on AWS:  ","version":"Next","tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-postgres","content":" When using Managed Postgres, the Defang CLI provisions an RDS Postgres instance in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed Redis​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-redis","content":" When using Managed Redis, the Defang CLI provisions an ElastiCache Redis cluster in your account.  ","version":"Next","tagName":"h3"},{"title":"Managed Resources​","type":1,"pageTitle":"Amazon Web Services (AWS)","url":"/docs/providers/aws#managed-resources","content":" Defang will create and manage the following resources in your AWS account from its bootstrap CloudFormation template:  Resource Type\tExample Resource Names3/Bucket\tdefang-cd-bucket-cbpbzz8hzm7 ecs/ClusterCapacityProviderAssociations\tdefang-cd-Cluster-pqFhjwuklvm ecs/Cluster\tdefang-cd-ClusterpJqFhjwuklvm iam/Role\tdefang-cd-ExeutionRole-XE7RbQDfeEwx ec2/InternetGateway\tigw-05bd7adc92541ec3 ec2/VPCGatewayAttachment\tIGW logs/LogGroup\tdefang-cd-Logroup-6LSZet3tFnEy ecr/PullThroughCacheRule\tdefang-cd-ecrpublic ec2/Route\trtb-08f3f5afc9e6c8c8 ec2/RouteTable\trtb-08f3f5ffc9e6c8c8 ec2/VPCEndpoint\tvpce-02175d8d4f47d0c9 ec2/SecurityGroup\tsg-032b839c63e70e49 ec2/Subnet\tsubnet-086bead399ddc8a0 ec2/SubnetRouteTableAssociation\trtbassoc-02e200d45e7227fe ecs/TaskDefinition\tarn:aws:ecsus-west-2:381492210770:task-definition/defang-cd-TaskDefinition-RXd5tf9TaN38:1 iam/Role\tdefang-cd-askRole-gsEeDPd6sPQY ec2/VPC\tvpc-0cbca64f13435695  Then, for each project you deploy, Defang will create and manage the following resources:  Resource Type\tExample Resource Nameecr/Repository\tproject1/kaniko-build ecr/LifecyclePolicy\tproject1/kaniko-build acm/Certificate\t*.project1.tenant1.defang.app ecr/Repository\tproject1/kaniko-build/cache ecr/LifecyclePolicy\tproject1/kaniko-build/cache iam/InstanceProfile\tecs-agent-profile iam/Role\tecs-task-execution-role cloudwatch/EventRule\tproject1-ecs-lifecycle-rule cloudwatch/EventTarget\tproject1-ecs-event-cw-target route53/Record\tvalidation-project1.tenant1.defang.app acm/CertificateValidation\t*.project1.tenant1.defang.appValidation ec2/VpcDhcpOptionsAssociation\tdhcp-options-association cloudwatch/LogGroup\tbuilds iam/Role\tkaniko-task-role ecs/TaskDefinition\tkanikoTaskDefArm64 ecs/TaskDefinition\tkanikoTaskDefAmd64 s3/Bucket\tdefang-build s3/BucketPublicAccessBlock\tdefang-build-block ecs/Cluster\tcluster ecs/ClusterCapacityProviders\tcluster-capacity-providers ec2/SecurityGroup\tproject1_app-sg ec2/SecurityGroup\tbootstrap ec2/VpcDhcpOptions\tdhcp-options cloudwatch/LogGroup\tlogs ","version":"Next","tagName":"h3"},{"title":"DigitalOcean","type":0,"sectionRef":"#","url":"/docs/providers/digitalocean","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Install Defang​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#install-defang","content":" To get started with the Defang BYOC DigitalOcean Provider, first install the latest version of the Defang CLI.  ","version":"Next","tagName":"h3"},{"title":"Sign up for DigitalOcean​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#sign-up-for-digitalocean","content":" Next, make sure you have signed up for a DigitalOcean account.  ","version":"Next","tagName":"h3"},{"title":"Authenticate with DigitalOcean​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#authenticate-with-digitalocean","content":" After signing up for your account, be sure to set up your personal access token. Defang will need to find this value in your shell as the DIGITALOCEAN_TOKEN environment variable.  ","version":"Next","tagName":"h3"},{"title":"Authenticate with DigitalOcean Spaces​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#authenticate-with-digitalocean-spaces","content":" You will also need a DigitalOcean Spaces access key. Defang will need to find this value in your shell as the SPACES_ACCESS_KEY_ID, and SPACES_SECRET_ACCESS_KEY environment variables.  ","version":"Next","tagName":"h3"},{"title":"Configure your shell environment​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#configure-your-shell-environment","content":" export DIGITALOCEAN_TOKEN=&lt;your-token&gt; export SPACES_ACCESS_KEY_ID=&lt;your-key-id&gt; export SPACES_SECRET_ACCESS_KEY=&lt;your-key&gt;   The Defang CLI will automatically check if these envinonment variables are set before running.  ","version":"Next","tagName":"h3"},{"title":"Deploy your project to DigitalOcean​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#deploy-your-project-to-digitalocean","content":" Once you are ready to go, add the --provider=digitalocean to your command to tell the Defang CLI to use the DigitalOcean provider or set the DEFANG_PROVIDER environment variable to digitalocean.  $ defang compose up --provider=digitalocean # or $ export DEFANG_PROVIDER=digitalocean   ","version":"Next","tagName":"h3"},{"title":"Region​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#region","content":" The Defang BYOC DigitalOcean Provider will use the region specified in the REGION environment variable. For a list of regions available in DigitalOcean, see the region documentation.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for DigitalOcean, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Deployment​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to a Spaces Object Storage bucket in your account. The CLI then deploys an App Platform App that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#runtime","content":" The Provider runs your workloads using the DigitalOcean App Platform.  ","version":"Next","tagName":"h3"},{"title":"Secrets​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#secrets","content":" Defang allows you to configure your services with sensitive config values in DigitalOcean. Sensitive values are added and stored with encryption in your app once it has been deployed.  ","version":"Next","tagName":"h3"},{"title":"Future Improvements​","type":1,"pageTitle":"DigitalOcean","url":"/docs/providers/digitalocean#future-improvements","content":" The following features are still in development for DigitalOcean:  Custom DomainsManaged RedisManaged Postgres  Stay tuned for future updates! ","version":"Next","tagName":"h3"},{"title":"Google Cloud Platform (GCP)","type":0,"sectionRef":"#","url":"/docs/providers/gcp","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#getting-started","content":" After signing in to your GCP account, select an existing project or create a new project, make sure billing is enabled, and note down the project ID and set it as environment variable GCP_PROJECT_ID.  export GCP_PROJECT_ID=&lt;your-project-id&gt;   Next step is to authenticate your local environment with GCP. Our preferred method is to set up Application Default Credentials with the Google Cloud CLI. Once the Google Cloud CLI is installed, run the following command to authenticate:  gcloud init gcloud auth application-default login   The Defang CLI will automatically check if GCP_PROJECT_ID environment variable is set and correctly authenticated with GCP before running. Once you are ready to go, add the --provider=gcp flag to your command to tell the Defang CLI to use the GCP provider, or set the DEFANG_PROVIDER environment variable to gcp.  $ defang compose up --provider=gcp # or $ export DEFANG_PROVIDER=gcp   ","version":"Next","tagName":"h2"},{"title":"Location​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#location","content":" The Defang BYOC GCP Provider will use the location specified in the GCP_LOCATION environment variable. For a list of locations available in GCP, see the location documentation. If the GCP_LOCATION environment variable is not set, the default location us-central1 (Iowa) will be used.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#architecture","content":" Defang uses GCP cloud run to build, deploy, and run your services. The following describes the current state of Defang's support for GCP, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Deployment​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#deployment","content":" To deploy your services, the Defang CLI sets up some basic resources needed, including enabling required APIs in the project, creating service accounts used to build and deploy your service with the required permissions, and creating a Google Cloud Storage bucket where the Defang CLI uploads your source code to. The CLI then deploys a GCP Cloud Run Job that uses Pulumi to build your container image and run your services.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#runtime","content":" The Provider builds and deploys your services using Google Cloud Run jobs, and runs your workloads using the Google Cloud Run service.  ","version":"Next","tagName":"h3"},{"title":"Secrets​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#secrets","content":" The GCP provider does not currently support storing sensitive config values.  ","version":"Next","tagName":"h3"},{"title":"Future Improvements​","type":1,"pageTitle":"Google Cloud Platform (GCP)","url":"/docs/providers/gcp#future-improvements","content":" The following features are in active development for GCP:  Configuration and management of secretsNetworking and Load BalancingCustom DomainsManaged RedisManaged Postgres  Stayed tuned for future updates! ","version":"Next","tagName":"h3"},{"title":"Playground","type":0,"sectionRef":"#","url":"/docs/providers/playground","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Playground","url":"/docs/providers/playground#overview","content":" Overall, the Defang Playground is very similar to deploying to your own cloud account. The Playground runs on a Defang-managed AWS account, so you can expect it to work similarly to deploying to AWS.  ","version":"Next","tagName":"h2"},{"title":"Managed services​","type":1,"pageTitle":"Playground","url":"/docs/providers/playground#managed-services","content":" In essence, the Playground does not support any managed storage services, ie. x-defang-postgres and x-defang-redis are ignored when deploying to the Playground. You can however run both Postgres and Redis as regular container services for testing purposes. ","version":"Next","tagName":"h3"},{"title":"Configure Environment Variables","type":0,"sectionRef":"#","url":"/docs/tutorials/configure-environment-variables","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#pre-requisites","content":" A compose.yaml file in your projectA Defang AccountThe Defang CLI  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Go to your compose.yaml file​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#step-1---go-to-your-composeyaml-file","content":" info If you are using Pulumi instead of Compose files to define your services, please see Using Config With Pulumi instead.  In your Compose file, you can define a sensitive config variable for your service by leaving it as a blank or null value. Defang will recognize it as a sensitive value.  In the example below, let's define API_KEY as an environment variable.  services: service1: image: image1:latest environment: - API_KEY   The type of notation shown above is called list notation. Alternatively, you can use map notation, which is also acceptable:  services: service1: image: image1:latest environment: API_KEY:   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Set the actual value in the Defang CLI​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#step-2---set-the-actual-value-in-the-defang-cli","content":" To store the actual (sensitive) value of the variable, open up a terminal and type the command:  defang config set API_KEY=actualvalue   Remember to replace API_KEY with your variable name and actualvalue with your actual value.  tip You can view all the config variables you are storing in Defang by doing: defang config ls.  ","version":"Next","tagName":"h2"},{"title":"Editing a config value​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#editing-a-config-value","content":" To edit a value, you can run the command again with an updated value to overwrite the current value:  defang config set API_KEY=newvalue   ","version":"Next","tagName":"h3"},{"title":"Removing a config value​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#removing-a-config-value","content":" To remove a value, run the command:  defang config rm API_KEY   tip Remember to update your Compose file if you remove an environment variable.  ","version":"Next","tagName":"h3"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Configure Environment Variables","url":"/docs/tutorials/configure-environment-variables#step-3---deploy","content":" defang compose up     For a deeper discussion on how configuration works in Defang, see our Configuration docs. ","version":"Next","tagName":"h2"},{"title":"Adding Custom 1-Click Deploy to Your App","type":0,"sectionRef":"#","url":"/docs/tutorials/adding-custom-one-click-deploy","content":"","keywords":"","version":"Next"},{"title":"How 1-Click Deploy Works​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#how-1-click-deploy-works","content":"A 1-Click Deploy link points to a special URL. Clicking this link will prompt the user to create a new GitHub repo with a clone of your project. This new repo will contain a GitHub Actions workflow which will automatically deploy the project to Defang. ","version":"Next","tagName":"h3"},{"title":"Pre-requisites​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#pre-requisites","content":"A GitHub repository for your project ","version":"Next","tagName":"h2"},{"title":"Step 1 - Prepare Your App​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-1---prepare-your-app","content":"You will need a compose.yaml file in the root folder of your project repository to describe the services which will be deployed. Learn more about writing Compose files. ","version":"Next","tagName":"h2"},{"title":"Step 2 - Copy the GitHub Workflow​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-2---copy-the-github-workflow","content":"In your project, add a new folder named .github, then add a folder named workflows inside it, and copy the entire GitHub Workflow deploy.yaml file from here into the workflows folder. If your app requires configuration (e.g. API keys, passwords, etc.), learn more about managing config variables with the Defang GitHub Action. You should have a .yaml file similar to the one below: name: Deploy on: push: branches: - main jobs: deploy: environment: playground runs-on: ubuntu-latest permissions: contents: read id-token: write steps: - name: Checkout Repo uses: actions/checkout@v4 - name: Deploy uses: DefangLabs/defang-github-action@v1.1.3  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Prepare Your Repository​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-3---prepare-your-repository","content":"To support 1-Click Deploy, your repository must be a Template Repository. In order to make your repository into a Template Repository, complete the following steps: Go to the repository's &quot;Settings&quot; near the right on the top bar.Select the &quot;Template repository&quot; box to turn your repo into a template repo, as seen below:  Go back to your repository's homepage.Click the dropdown menu next to the green &quot;Use this template&quot; button near the top right corner, then click &quot;Create a new repository&quot;:  You will be taken to a page similar to the one shown below.  Now stay on this page and continue to the next step. ","version":"Next","tagName":"h2"},{"title":"Step 4 - Get the Encoded URL​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-4---get-the-encoded-url","content":"You will need the encoded version of the URL of the page from the previous step. This will be used as a redirect for the 1-Click Deploy link. Copy the URL of the page you are on ( &quot;Create a new repository&quot; page sourced from your template repository). It should look something like the following: https://github.com/new?template_name=&lt;your-repo-name&gt;&amp;template_owner=&lt;your-github-username&gt;  You need to URL encode your url for the next step. For example, the url above would be encoded as: https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3D&lt;your-repo-name&gt;%26template_owner%3D&lt;your-github-username&gt;  You can just paste your url in here to get the encoded version: .css-1ov46kg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.css-1ov46kg&gt;:not(style):not(style){margin:0;}.css-1ov46kg&gt;:not(style)~:not(style){margin-top:16px;} ​  ","version":"Next","tagName":"h2"},{"title":"Step 5 - Create the 1-Click Deploy Link​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-5---create-the-1-click-deploy-link","content":"You will need to create a 1-Click Deploy link with the following format: https://portal.defang.dev/redirect?url= + your encoded URL. This ensures that the user can get logged in to Defang before they get redirected to clone your app for deployment. tip Optionally, you can add &amp;name=&lt;your-suggested-name&gt; to the end of the link if you'd like to suggest a name for the user to use for their deployment. The finished link should look similar to the one below: https://portal.defang.dev/redirect?url=https%3A%2F%2Fgithub.com%2Fnew%3Ftemplate_name%3D&lt;your-repo-name&gt;%26template_owner%3D&lt;your-github-username&gt;&amp;name=&lt;your-suggested-name&gt;  Now you have a link for anyone to deploy your app to Defang, with just 1 click. ","version":"Next","tagName":"h2"},{"title":"Step 6 - Use the Link​","type":1,"pageTitle":"Adding Custom 1-Click Deploy to Your App","url":"/docs/tutorials/adding-custom-one-click-deploy#step-6---use-the-link","content":"For example, you can add it as a link in a Markdown file: [1-Click Deploy Link](https://portal.defang.dev/redirect?url=&lt;your-encoded-url&gt;&amp;name=&lt;your-project-here&gt;)  Or perhaps you can add it to a button with your own styling: [![1-click-deploy-button](https://defang.io/deploy-with-defang.png)](https://portal.defang.dev/redirect?url=&lt;your-encoded-url&gt;&amp;name=&lt;your-project-here&gt;)  ","version":"Next","tagName":"h2"},{"title":"Deploy to Amazon Web Services (AWS)","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-aws","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLIAWS Account Credentials  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Authenticate Defang to use your AWS Account​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-2---authenticate-defang-to-use-your-aws-account","content":" There are many ways to authenticate your AWS account. Once you've done that, Defang will look for your AWS credentials in your shell environment and expect to find one of the following credential sets:  the AWS_PROFILE environment variableor, the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables  tip If you have the AWS CLI installed (which is not required in order to use the Defang CLI), you can verify that you've authenticated to AWS by running aws sts get-caller-identity and see your account ID.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-3---deploy","content":" Invoke the defang compose up CLI command with the --provider=aws flag or set the DEFANG_PROVIDER=aws environment variable.  For example:  $ defang compose up --provider=aws   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Inspect your deployment​","type":1,"pageTitle":"Deploy to Amazon Web Services (AWS)","url":"/docs/tutorials/deploy-to-aws#step-4---inspect-your-deployment","content":" Defang will provision resources in your AWS account and deploy your services. You can inspect the resources created in your AWS Dashboard.    For a deeper discussion of the Defang AWS Architecture, including a list of the resources we provision in your account, see our AWS Provider docs. ","version":"Next","tagName":"h2"},{"title":"Deploy Existing Containers","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-container-using-the-cli","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Make a Docker Compose file​","type":1,"pageTitle":"Deploy Existing Containers","url":"/docs/tutorials/deploy-container-using-the-cli#step-1---make-a-docker-compose-file","content":" tip If you are unfamiliar with Docker Compose files, check out the Compose page.  Create a compose.yaml file to define the service(s) in your application.  If you already have a Docker Compose file to define your service(s), you can use it directly and skip this step.  services: web: image: nginx:latest ports: - mode: ingress target: 3000 app: build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 4000 redis: image: redis:6.2 restart: unless-stopped ports: - mode: host target: 6379   The example above shows a multi-container application with 3 services, web, app, redis. If you wanted to deploy only one container, say app, then the example would remain the same, except without the web and redis services.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Deploy​","type":1,"pageTitle":"Deploy Existing Containers","url":"/docs/tutorials/deploy-container-using-the-cli#step-2---deploy","content":" Run the following command in the Defang CLI.  defang compose up  ","version":"Next","tagName":"h2"},{"title":"Deploy to DigitalOcean","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-digitalocean","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLIDigitalOcean Account CredentialsDigitalOcean Spaces Access Keys  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Authenticate Defang to use your DigitalOcean Account​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-2---authenticate-defang-to-use-your-digitalocean-account","content":" Defang will look for your DigitalOcean credentials in your shell environment and expect to find the following credentials:  the DIGITALOCEAN_TOKEN environment variableand, the SPACES_ACCESS_KEY_ID and SPACES_SECRET_ACCESS_KEY environment variables  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-3---deploy","content":" Invoke the defang compose up CLI command with the --provider=do flag or set the DEFANG_PROVIDER=do environment variable.  For example:  $ defang compose up --provider=do   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Inspect your deployment​","type":1,"pageTitle":"Deploy to DigitalOcean","url":"/docs/tutorials/deploy-to-digitalocean#step-4---inspect-your-deployment","content":" Defang will provision resources in your DigitalOcean account and deploy your services. You can inspect the resources created in your DigitalOcean Dashboard.    For a deeper discussion of the Defang DigitalOcean Architecture, see our DigitalOcean Provider docs. ","version":"Next","tagName":"h2"},{"title":"Deploy to Google Cloud Platform (GCP)","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-gcp","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLIGCP Account Credentials  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Authenticate Defang to use your GCP Account​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-2---authenticate-defang-to-use-your-gcp-account","content":" After signing in to your GCP account, select an existing project or create a new project. Make sure billing is enabled. Then, note down the project ID and set it as environment variable GCP_PROJECT_ID.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Deploy​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-3---deploy","content":" Invoke the defang compose up CLI command with the --provider=gcp flag or set the DEFANG_PROVIDER=gcp environment variable.  For example:  $ defang compose up --provider=gcp   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Inspect your deployment​","type":1,"pageTitle":"Deploy to Google Cloud Platform (GCP)","url":"/docs/tutorials/deploy-to-gcp#step-4---inspect-your-deployment","content":" Defang will provision resources in your GCP account and deploy your services. You can inspect the resources created in your GCP Dashboard.    For a deeper discussion of the Defang GCP Architecture, see our GCP docs. ","version":"Next","tagName":"h2"},{"title":"Deploy to Your Own Cloud","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-your-cloud","content":"","keywords":"","version":"Next"},{"title":"Choose your cloud​","type":1,"pageTitle":"Deploy to Your Own Cloud","url":"/docs/tutorials/deploy-to-your-cloud#choose-your-cloud","content":" A good starting point is to choose which cloud provider you want to deploy to. Defang supports the following cloud providers:  AWSDigitalOceanGCP  The above will link to a tutorial page for that cloud. If you run into any problems, please note that we have an FAQ section for your convenience. ","version":"Next","tagName":"h2"},{"title":"Deploy to Playground","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-to-playground","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy to Playground","url":"/docs/tutorials/deploy-to-playground#pre-requisites","content":" A Dockerfile in your projectA compose.yaml file in your projectA Defang AccountThe Defang CLI  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Navigate to your project directory​","type":1,"pageTitle":"Deploy to Playground","url":"/docs/tutorials/deploy-to-playground#step-1---navigate-to-your-project-directory","content":" Head to the folder where your project is located.  $ cd path/to/your/project   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Deploy​","type":1,"pageTitle":"Deploy to Playground","url":"/docs/tutorials/deploy-to-playground#step-2---deploy","content":" $ defang compose up   If you have not used Defang before, you'll be prompted to log in.   ! Please log in to continue. Please visit http://127.0.0.1:49154 and log in. (Right click the URL or press ENTER to open browser)   info To learn more about how authentication works in defang, check out the authenticating page.  When you do this, you should see something similar to the output below:   * Uploading build context for app * Deploying service app * Monitor your services' status in the defang portal - https://portal.defang.dev/service/app * Tailing logs for deployment ID o59k89vk3qc8 ; press Ctrl+C to detach: * Press V to toggle verbose mode 2024-09-19T10:50:53.572443-07:00 cd Update started for stack jordanstephens-prod1 2024-09-19T10:51:05.536299-07:00 cd Update succeeded in 11.99769745s ; provisioning... 2024-09-19T10:51:39.419693-07:00 app Server running at http://0.0.0.0:3000/ * Service app is in state DEPLOYMENT_COMPLETED and will be available at: - https://jordanstephens-app--3000.prod1.defang.dev * Done.   Now we can go to https://portal.defang.dev/service/app to see our service listed in the Defang portal.   ","version":"Next","tagName":"h2"},{"title":"Generate Project Outlines With AI","type":0,"sectionRef":"#","url":"/docs/tutorials/generate-new-code-using-ai","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Use the defang generate command in the CLI​","type":1,"pageTitle":"Generate Project Outlines With AI","url":"/docs/tutorials/generate-new-code-using-ai#step-1---use-the-defang-generate-command-in-the-cli","content":" Here you can describe what you would like the service to do and the CLI will then generate a project outline with all the files required to make it deployable with Defang.  In this tutorial, we'll use the following prompt to describe our service:  &quot;A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.&quot;  defang generate ? Choose the language you'd like to use: [Use arrows to move, type to filter, ? for more help] &gt; Nodejs Golang Python ? Choose a sample service: Generate with AI ? Please describe the service you'd like to build: [? for help] A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response. ? What folder would you like to create the service in? [? for help] (service1) project1   This will generate the different files required to start your project based on your prompt and the language selected.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Review the Code​","type":1,"pageTitle":"Generate Project Outlines With AI","url":"/docs/tutorials/generate-new-code-using-ai#step-2---review-the-code","content":" Change into the new project folder:  cd project1   You can open the files in a code editor to review or make changes as needed before deploying the service.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Build and Deploy​","type":1,"pageTitle":"Generate Project Outlines With AI","url":"/docs/tutorials/generate-new-code-using-ai#step-3---build-and-deploy","content":" defang compose up  ","version":"Next","tagName":"h2"},{"title":"Deploy Using Pulumi","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-using-pulumi","content":"","keywords":"","version":"Next"},{"title":"Pre-requisites​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#pre-requisites","content":" A Defang AccountPulumi CLIThe Defang CLIThe Defang Pulumi Provider  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Authenticate With Defang​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-1---authenticate-with-defang","content":" Make sure you are logged into the Defang CLI. Don't worry about the Pulumi CLI for now.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Configure the Pulumi Backend​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-2---configure-the-pulumi-backend","content":" Navigate to your project directly. (If you don't have a project yet, try one of our samples)  Pulumi uses the pulumi login command to select a backend. In this tutorial, we will use the Local Filesystem backend for simplicity. When you are ready to deploy to production, you will probably want to look into other Pulumi backend options.  Run the following command to &quot;login&quot; to the filesystem backend in the local directory.  pulumi login file://./   This will make the Pulumi CLI store the state of your infrastructure in the current directory.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Initialize the Pulumi Project​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-3---initialize-the-pulumi-project","content":" Run the following command to set your encryption passphrase for this terminal session:  export PULUMI_CONFIG_PASSPHRASE=&quot;super-secure-passphrase&quot;   Now let's initialize the Pulumi project:  pulumi new typescript -y --force   This will create a new Pulumi project in the current directory and will create a Pulumi stack called dev by default. We use the --force flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI).  Run the following command to add to the .gitignore file:  echo &quot;.pulumi&quot; &gt;&gt; .gitignore   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Write Your Pulumi Code​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-4---write-your-pulumi-code","content":" Create an index.ts file to contain your Pulumi code. This code will describe our services, our service's dependencies, and our service's configuration.  import * as defang from '@defang-io/pulumi-defang/lib'; export const service = new defang.DefangService('minio', { name: 'minio', image: 'quay.io/minio/minio', // starts the server with the console address set to :9001 command: ['server', '--console-address', ':9001', '/data'], // Set the root username environment: { MINIO_ROOT_USER: 'minio', }, secrets: [ // Set the root password as a secret which will be encrypted at rest { source: 'MINIO_ROOT_PASSWORD', value: 'minio123', }, ], // Run a healthcheck every 30 seconds healthcheck: { test: ['CMD', 'curl', 'http://localhost:9000/minio/health/live'], interval: 30, timeout: 5, retries: 3, }, // Expose the server on port 9000 and the console on port 9001 ports: [ { target: 9000, protocol: 'http', mode: 'ingress', }, { target: 9001, protocol: 'http', mode: 'ingress', }, ], });   ","version":"Next","tagName":"h2"},{"title":"Step 5 - Deploy to Defang​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-5---deploy-to-defang","content":" Now we're ready to deploy to Defang with Pulumi! Run the following command to deploy your service:  pulumi up --stack=dev   ","version":"Next","tagName":"h2"},{"title":"Step 6 - Monitor the Deployment​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#step-6---monitor-the-deployment","content":" You can monitor the deployment by running the following command:  defang tail --name minio   ","version":"Next","tagName":"h2"},{"title":"Logging Into Minio​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#logging-into-minio","content":" The Defang Playground will give you a domain, which you can obtain by running the following command:  defang ls | grep 'minio.*9001'   If you navigate to the domain in your browser, you will be prompted to log in. Use the username minio and the password minio123.  ","version":"Next","tagName":"h3"},{"title":"Clean Up​","type":1,"pageTitle":"Deploy Using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#clean-up","content":" To clean up the deployment, run the following command:  pulumi destroy --stack=dev     See the Pulumi concept docs for more information about the Defang Pulumi Provider. ","version":"Next","tagName":"h3"},{"title":"Monitoring Your Services","type":0,"sectionRef":"#","url":"/docs/tutorials/monitoring-your-services","content":"","keywords":"","version":"Next"},{"title":"Status​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#status","content":" When deploying to Playground, you can monitor your service status from the Defang Portal.  When deploying to your own cloud, the primary way to monitor your services is through your cloud provider's dashboard. However, Defang does provide some tools for monitoring your service logs.  ","version":"Next","tagName":"h2"},{"title":"Logs​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#logs","content":" When deploying to Playground, your service's logs may be viewed in the Defang Portal.  By default when deploying, including to your own cloud, all output (stdout and stderr) from your app is logged and accessible via the Defang CLI. You can view these logs in real-time or for a time in the past. You can view logs for all your services, one service, or even one specific deployment of a service.  ","version":"Next","tagName":"h2"},{"title":"Tailing Live Logs For All Services​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#tailing-live-logs-for-all-services","content":" $ defang tail   ","version":"Next","tagName":"h3"},{"title":"Tailing Logs Since a Specific Time​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#tailing-logs-since-a-specific-time","content":" $ defang tail --since 1h   ","version":"Next","tagName":"h3"},{"title":"Tailing Logs For a Service​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#tailing-logs-for-a-service","content":" $ defang tail --name service-name   ","version":"Next","tagName":"h3"},{"title":"Build Time Logs​","type":1,"pageTitle":"Monitoring Your Services","url":"/docs/tutorials/monitoring-your-services#build-time-logs","content":" $ defang logs --type=build   All of the above flags can be combined to get the exact logs you need. See the CLI reference for defang tail for more information.  info To learn more about observability in Defang, check out the Observability page.Note that the Defang Portal only displays services deployed to Defang Playground. ","version":"Next","tagName":"h3"},{"title":"Deploy a GPU-Powered Application to AWS","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-with-gpu","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#prerequisites","content":" A Defang AccountThe Defang CLIAWS Account Credentials  ","version":"Next","tagName":"h2"},{"title":"AWS Account with GPU Access​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#aws-account-with-gpu-access","content":" For any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the &quot;Service Quotas&quot; console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are &quot;All G and VT spot instances&quot;.  Timing This process can take a few days for AWS to approve.    ","version":"Next","tagName":"h3"},{"title":"HuggingFace Token​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#huggingface-token","content":" This sample requires a HuggingFace token to download the model. You can get a token by signing up at HuggingFace and then going to your settings to get your token.  ","version":"Next","tagName":"h3"},{"title":"Step 1 - Clone the sample project​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-1---clone-the-sample-project","content":" You'll need to clone the Mistral &amp; vLLM sample to go through this tutorial.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Check your Defang BYOC settings​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-2---check-your-defang-byoc-settings","content":" Make sure you install the latest version of the Defang CLIThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.  tip If you have the AWS CLI installed (which is not required in order to use the Defang CLI), you can verify that you've authenticated to AWS by running aws sts get-caller-identity and see your account ID.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Prepare your Environment​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-3---prepare-your-environment","content":" Log into your Defang account  defang login   Set the HuggingFace token using the defang config command  defang config set --name HF_TOKEN   Configuration stores your sensitive information such as API keys, passwords, and other credentials for you.  ","version":"Next","tagName":"h2"},{"title":"Step 4 - Explore the Compose File​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-4---explore-the-compose-file","content":" The compose.yml file is where you define your services and their configurations.  ","version":"Next","tagName":"h2"},{"title":"The Mistral Service​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#the-mistral-service","content":" In there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects.  services: mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest ports: - mode: host target: 8000 command: [&quot;--host&quot;,&quot;0.0.0.0&quot;,&quot;--model&quot;,&quot;TheBloke/Mistral-7B-Instruct-v0.2-AWQ&quot;,&quot;--quantization&quot;,&quot;awq&quot;,&quot;--dtype&quot;,&quot;auto&quot;,&quot;--tensor-parallel-size&quot;,&quot;1&quot;,&quot;--gpu-memory-utilization&quot;,&quot;.95&quot;,&quot;--max-model-len&quot;,&quot;8000&quot;] deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;] healthcheck: test: [&quot;CMD&quot;,&quot;curl&quot;,&quot;http://localhost:8000/v1/models&quot;] interval: 5m timeout: 30s retries: 10 environment: - HF_TOKEN   Let's break it down.  We start with the latest vLLM Docker image provided by Mistral AI.  mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest   We specify that we require a GPU to run our application.  deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;]   The Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the HF_TOKEN configuration value from Defang.  Specifying the HF_TOKEN in the environment section of the service in the compose.yml file tells Defang to fetch the value from the encrypted configuration store.  environment: - HF_TOKEN   ","version":"Next","tagName":"h3"},{"title":"The UI Service​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#the-ui-service","content":" In this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000.  Networking You can see here how Defang's networking works. The mistral service is available at http://mistral:8000, exactly as it would be in a local docker-compose environment.   ui: restart: unless-stopped build: context: ui dockerfile: Dockerfile ports: - mode: ingress target: 3000 deploy: resources: reservations: memory: 256M healthcheck: test: [&quot;CMD&quot;,&quot;wget&quot;,&quot;--spider&quot;,&quot;http://localhost:3000&quot;] interval: 10s timeout: 2s retries: 10 environment: - OPENAI_BASE_URL=http://mistral:8000/v1/   ","version":"Next","tagName":"h3"},{"title":"Step 5 - Deploy to Your Own AWS Account with Defang​","type":1,"pageTitle":"Deploy a GPU-Powered Application to AWS","url":"/docs/tutorials/deploy-with-gpu#step-5---deploy-to-your-own-aws-account-with-defang","content":" Run the following command to deploy your service:  defang compose up --provider=aws  ","version":"Next","tagName":"h2"},{"title":"Updating Your Services","type":0,"sectionRef":"#","url":"/docs/tutorials/updating-your-services","content":"","keywords":"","version":"Next"},{"title":"Updating a Service​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#updating-a-service","content":" To update your app (for example, updating the base image of your container, or making changes to your code) all you have to do is run the defang compose up command and it will build and deploy a new version.  ","version":"Next","tagName":"h2"},{"title":"Deploying New Services or Removing Existing Services​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#deploying-new-services-or-removing-existing-services","content":" If you are using Compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.  ","version":"Next","tagName":"h2"},{"title":"Deployment Modes​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#deployment-modes","content":" Defang offers multiple deployment modes. You can specify which mode you would like to be used when you deploy with the --mode flag on the CLI. The default mode is development. You may also specify staging or production.  $ defang compose up --mode=production   ","version":"Next","tagName":"h2"},{"title":"Development Mode (Default)​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#development-mode-default","content":" The default deployment mode is development. This is the In this mode, the existing services will be deprovisioned before your new service will be spun up. This means that there will be a short downtime while the new service is being provisioned.  ","version":"Next","tagName":"h3"},{"title":"Production Mode (Zero-downtime Updates)​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#production-mode-zero-downtime-updates","content":" If you are running in production mode, the update will be done with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.  ","version":"Next","tagName":"h3"},{"title":"Deleting your Application​","type":1,"pageTitle":"Updating Your Services","url":"/docs/tutorials/updating-your-services#deleting-your-application","content":" To delete your app, use defang compose down in your compose file working directory, or use the --project-name flag.  In some cases, particularly on the AWS platform, additional actions may be required. Specifically load balancers may have Deletion Protection on. To turn this off in the AWS Console for EC2 Load Balancers, follow these steps:  Select the load balancer corresponding to the app’s name.Go to the Attributes tab.Click the Edit button.Locate Deletion Protection and disable it.  info For more information on Deployment Modes, see the Deployment Modes concept documentation. ","version":"Next","tagName":"h2"},{"title":"How to Use Your Own Domain With AWS","type":0,"sectionRef":"#","url":"/docs/tutorials/use-your-own-domain-name","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#prerequisites","content":" A Defang AccountThe Defang CLIAWS Account Credentials  ","version":"Next","tagName":"h2"},{"title":"Step 1 - Set up a Hosted Zone in AWS Route 53​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-1---set-up-a-hosted-zone-in-aws-route-53","content":" info If you purchased your domain with AWS, you can skip this step.  For Defang to be able to manage your domain, you need to create a public hosted zone in AWS Route 53. It should list four AWS nameservers and should look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 2 - Configure your DNS settings in your domain registrar​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-2---configure-your-dns-settings-in-your-domain-registrar","content":" info If you purchased your domain with AWS, you can skip this step.  You'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 3 - Set up Your Compose File​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-3---set-up-your-compose-file","content":" In your Compose file, specify the domain name you want to use, for example:  services: web: domainname: nextjs.defang.chewydemos.com build: context: ./web dockerfile: Dockerfile ports: target: 3000 mode: ingress   ","version":"Next","tagName":"h2"},{"title":"Step 4 - Deploy​","type":1,"pageTitle":"How to Use Your Own Domain With AWS","url":"/docs/tutorials/use-your-own-domain-name#step-4---deploy","content":" Run the following command to deploy your service:  defang compose up   This will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your Compose file.      For a deeper discussion of how to use a custom domain with Defang, see our Domain concept docs. ","version":"Next","tagName":"h2"},{"title":"Scaling Your Services","type":0,"sectionRef":"#","url":"/docs/tutorials/scaling-your-services","content":"","keywords":"","version":"Next"},{"title":"Scaling Resource Reservations​","type":1,"pageTitle":"Scaling Your Services","url":"/docs/tutorials/scaling-your-services#scaling-resource-reservations","content":" In order to scale a service's resource reservations, you will need to update the deploy section associated with your service in your application's compose.yaml file.  Use the resources section to specify the resource reservation requirements. These are the minimum resources which must be available for the platform to provision your service. You may end up with more resources than you requested, but you will never be allocated less.  For example, if my app needs 2 CPUs and 512MB of memory, I would update the compose.yaml file like this:  services: my_service: image: my_app:latest deploy: resources: reservations: cpus: '2' memory: '512M'   The minimum resources which can be reserved:  Resource\tMinimumCPUs\t0.5 Memory\t512M  info Note that the memory field must be specified as a &quot;byte value string&quot; using the {amount}{byte unit} format. The supported units are b (bytes), k or kb (kilobytes), m or mb (megabytes) and g or gb (gigabytes).  ","version":"Next","tagName":"h2"},{"title":"Scaling with Replicas​","type":1,"pageTitle":"Scaling Your Services","url":"/docs/tutorials/scaling-your-services#scaling-with-replicas","content":" In order to scale a service's replica count, you will need to update the deploy section associated with your service in your application's compose.yaml file.  Use the replicas section to specify the number of containers which should be running at any given time.  For example, if I want to run 3 instances of my app, I would update the compose.yaml file like this:  services: my_service: image: my_app:latest deploy: replicas: 3  ","version":"Next","tagName":"h2"},{"title":"Using Codespaces and Gitpod","type":0,"sectionRef":"#","url":"/docs/tutorials/using-codespaces-gitpod","content":"","keywords":"","version":"Next"},{"title":"Using Codespaces With Defang​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#using-codespaces-with-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1 - Clone the Defang Codespace Project​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-1---clone-the-defang-codespace-project","content":" Start by cloning the Defang GitHub-Codespace repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed.  ","version":"Next","tagName":"h3"},{"title":"Step 2 - Create a Codespace​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-2---create-a-codespace","content":" Once you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.    ","version":"Next","tagName":"h3"},{"title":"Step 3 - Open in VS Code Desktop​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-3---open-in-vs-code-desktop","content":" For the defang login command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.    ","version":"Next","tagName":"h3"},{"title":"Step 4 - Run Defang Login​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-4---run-defang-login","content":" Within a VS Code desktop terminal, execute the following command.  defang login   Although it may initially refuse to connect on your localhost, going back will show a &quot;successfully logged in&quot; message, confirming that you're logged into Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 5 - Verify Running Services​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-5---verify-running-services","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services.  ","version":"Next","tagName":"h3"},{"title":"Using Gitpod With Defang​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#using-gitpod-with-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1 - Clone the Defang Gitpod Workspace Project​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-1---clone-the-defang-gitpod-workspace-project","content":" Start by cloning the Defang Gitpod-Workspace repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 2 - Initialize a Gitpod Workspace​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-2---initialize-a-gitpod-workspace","content":" Navigate https://gitpod.io/#&lt;your-repo-url&gt; to create your new workspace. In the repository, we have a YAML file indicating that we are using a pre-built Dockerfile which installs Defang CLI for you.  ","version":"Next","tagName":"h3"},{"title":"Step 3 - Lauch VS Code from Gitpod​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-3---lauch-vs-code-from-gitpod","content":" Open VS Code from Gitpod, you will likely need to have the Gitpod VS Code extension installed.      ","version":"Next","tagName":"h3"},{"title":"Step 4 - Run Defang Login​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-4---run-defang-login-1","content":" Within a VS Code desktop terminal, execute the following command.  defang login   ","version":"Next","tagName":"h3"},{"title":"Step 5 - Verify Running Services​","type":1,"pageTitle":"Using Codespaces and Gitpod","url":"/docs/tutorials/using-codespaces-gitpod#step-5---verify-running-services-1","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services. ","version":"Next","tagName":"h3"},{"title":"Using 1-Click Deploy","type":0,"sectionRef":"#","url":"/docs/tutorials/using-one-click-deploy","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Choose a Sample​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-1---choose-a-sample","content":" Head to our list of samples and click a sample you want to deploy. Then, click on the button that says &quot;1-Click Deploy&quot;.      info Alternatively, you can find the &quot;1-Click Deploy&quot; button located in the README.md file of each sample's GitHub repository.   ","version":"Next","tagName":"h2"},{"title":"Step 2 - Login​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-2---login","content":" For 1-click deployments to work, Defang has to have your permission, which you can grant by logging in. If you are already logged in, you will be automatically taken to the next step.    ","version":"Next","tagName":"h2"},{"title":"Step 3 - Create Your Repo​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-3---create-your-repo","content":" Onced logged in, you'll be redirected to GitHub. Click the &quot;Create repository button&quot; to create a new repository with the sample project.      ","version":"Next","tagName":"h2"},{"title":"Step 4 - Wait for Deployment to Complete​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#step-4---wait-for-deployment-to-complete","content":" A Github Action workflow will automatically start running to install Defang and deploy the sample to the Defang Playground. You can see this by going into the &quot;Actions&quot; tab in your GitHub repository.  You can view the status of your deployment in the Defang Portal, or by downloading the Defang CLI. You can also see deployment progress in the &quot;Actions&quot; tab of your GitHub repository:        tip If you decide to make a commit later to a repository created from 1-Click Deploy, then the project will automatically get deployed again to Defang Playground.  When it is completed, you can view your deployed app using the deployment link generated by Defang, which should appear similar to the format below:  https://&lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.defang.dev   ","version":"Next","tagName":"h2"},{"title":"Configuration in 1-Click Deploy​","type":1,"pageTitle":"Using 1-Click Deploy","url":"/docs/tutorials/using-one-click-deploy#configuration-in-1-click-deploy","content":" If the sample you chose requires setting configuration, such as API keys, you can set sensitive config values as secrets in your GitHub repository and the GitHub Action can automatically handle those values for you. Learn how to manage config values with the Defang Github Action. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}