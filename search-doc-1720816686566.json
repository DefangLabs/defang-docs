{"searchDocs":[{"title":"Announcing the Defang Public Beta","type":0,"sectionRef":"#","url":"/blog/announcing-defang-public-beta","content":"Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today’s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you’ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Announcing the Private Beta for the Defang Opinionated Platform","type":0,"sectionRef":"#","url":"/blog/announcement","content":"Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!","keywords":"","version":null},{"title":"Add Defang to your developer environments instantly","type":0,"sectionRef":"#","url":"/blog/dev-environments","content":"","keywords":"","version":null},{"title":"Codespaces​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#codespaces","content":" If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature.  ","version":null,"tagName":"h2"},{"title":"Dev Containers​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#dev-containers","content":" Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others.  ","version":null,"tagName":"h2"},{"title":"GitPod​","type":1,"pageTitle":"Add Defang to your developer environments instantly","url":"/blog/dev-environments#gitpod","content":" GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. ","version":null,"tagName":"h2"},{"title":"About my Journey Deploying my First Web Application","type":0,"sectionRef":"#","url":"/blog/about-my-journey-deploying-my-first-web-application","content":"About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors’ instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like &quot;ECS clusters,&quot; &quot;task definitions,&quot; and &quot;IAM roles&quot; were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial’s scenarios. It could be confusing if you are new to this area I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. I have this scary screen when trying to delete the service I created; this is merely one of the many errors I faced Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. with just a single command in the CLI With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. It is deployed to the internet! (arorschach is my username) Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs","keywords":"","version":null},{"title":"June 2024 Product Update","type":0,"sectionRef":"#","url":"/blog/june-2024-product-update","content":"","keywords":"","version":null},{"title":"Samples, samples, samples!​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#samples-samples-samples","content":" We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality.  ","version":null,"tagName":"h2"},{"title":"Start from a sample in seconds​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#start-from-a-sample-in-seconds","content":" With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit.  ","version":null,"tagName":"h3"},{"title":"Sample templates​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#sample-templates","content":" If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-&lt;sample_name&gt;-template. If you open them, you can create a new repo by clicking this button:    Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately.  ","version":null,"tagName":"h3"},{"title":"ACME for BYOD​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#acme-for-byod","content":" We’re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy.  ","version":null,"tagName":"h2"},{"title":"Warnings for Stateful Services​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#warnings-for-stateful-services","content":" To help you avoid potential pitfalls, we’ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:&lt;version&gt;, redis:&lt;version&gt;, minio:&lt;version&gt;, etc.  In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which...  ","version":null,"tagName":"h2"},{"title":"Managed Redis!​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#managed-redis","content":" Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition.  ","version":null,"tagName":"h2"},{"title":"Load Testing​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#load-testing","content":" To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly.  ","version":null,"tagName":"h2"},{"title":"Upgraded Kaniko​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#upgraded-kaniko","content":" We’ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications.  ","version":null,"tagName":"h2"},{"title":"Upcoming Features​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#upcoming-features","content":" We’re not stopping here! Here’s a sneak peek at what’s coming soon:  ","version":null,"tagName":"h2"},{"title":"Managed Postgres​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#managed-postgres","content":" Building on the momentum of Managed Redis, we’re introducing Managed Postgres. Soon you’ll be able to easily integrate a managed Postgres database into your deployment!  ","version":null,"tagName":"h3"},{"title":"BYOC ECS Lifecycle Events​","type":1,"pageTitle":"June 2024 Product Update","url":"/blog/june-2024-product-update#byoc-ecs-lifecycle-events","content":" Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood.    Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! 🚀 ","version":null,"tagName":"h3"},{"title":"Deploy a Go-powered slackbot with Defang","type":0,"sectionRef":"#","url":"/blog/slackbot-sample","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#prerequisites","content":" Before we dive into the details, let's make sure you have everything you need to get started:  Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the bot chat:write scope. Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the &quot;Install to Workspace&quot; button in the Slack admin UI to do this. Mine says &quot;Reinstall&quot; because I've already installed it. Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API. Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the @&lt;botname&gt; command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel. Clone the Sample Code: Clone the Defang repository and navigate to the samples/golang/slackbot directory. This directory contains the sample code for the Slackbot.  git clone https://github.com/DefangLabs/defang cd defang/samples/golang/slackbot   ","version":null,"tagName":"h2"},{"title":"Deployment Steps​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#deployment-steps","content":" Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:  Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's defang config set command to set the SLACK_TOKEN and SLACK_CHANNEL_ID configs. Replace your_slack_token and your_slack_channel_id with the respective values: defang config set --name SLACK_TOKEN --value your_slack_token defang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id Deploy the Slackbot: Use the Defang CLI's defang compose up command to deploy.  ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#usage","content":" With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the / endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:  curl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\ -H 'content-type: application/json' \\ --data-raw $'{&quot;message&quot;:&quot;This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.&quot;}'   ","version":null,"tagName":"h2"},{"title":"Takeaways​","type":1,"pageTitle":"Deploy a Go-powered slackbot with Defang","url":"/blog/slackbot-sample#takeaways","content":" Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! ","version":null,"tagName":"h2"},{"title":"May 2024 Product Update","type":0,"sectionRef":"#","url":"/blog/may-2024-product-update","content":"","keywords":"","version":null},{"title":"npx defang​","type":1,"pageTitle":"May 2024 Product Update","url":"/blog/may-2024-product-update#npx-defang","content":" We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run:  npx defang@latest   This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!  ","version":null,"tagName":"h2"},{"title":"(coming soon) Bring Your Own Domain with Let's Encrypt​","type":1,"pageTitle":"May 2024 Product Update","url":"/blog/may-2024-product-update#coming-soon-bring-your-own-domain-with-lets-encrypt","content":" Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you.  ","version":null,"tagName":"h2"},{"title":"Windows Support​","type":1,"pageTitle":"May 2024 Product Update","url":"/blog/may-2024-product-update#windows-support","content":" Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed:  ansi color codes in logshandle ctrl-c when tailing logs  ","version":null,"tagName":"h2"},{"title":"Improved CLI​","type":1,"pageTitle":"May 2024 Product Update","url":"/blog/may-2024-product-update#improved-cli","content":" We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable.  log messages have been made more clearadding more progress information during compose up  ","version":null,"tagName":"h2"},{"title":"Stability and Reliability​","type":1,"pageTitle":"May 2024 Product Update","url":"/blog/may-2024-product-update#stability-and-reliability","content":" Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:  capacity improvements in build queuesimprovements in log availability ","version":null,"tagName":"h2"},{"title":"defang","type":0,"sectionRef":"#","url":"/docs/cli/defang","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#options","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -h, --help help for defang -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang","url":"/docs/cli/defang#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)defang cert - Manage certificatesdefang compose - Work with local Compose filesdefang config - Add, update, or delete service configdefang generate - Generate a sample Defang project in the current folderdefang login - Authenticate to the Defang clusterdefang logout - Log outdefang restart - Restart one or more servicesdefang services - Get list of services on the clusterdefang tail - Tail logs from one or more servicesdefang terms - Read and/or agree the Defang terms of servicedefang token - Manage personal access tokensdefang version - Get version information for the CLI and Fabric servicedefang whoami - Show the current user  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd destroy","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd_destroy","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd destroy","url":"/docs/cli/defang_cd_destroy#options","content":"  -h, --help help for destroy   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd destroy","url":"/docs/cli/defang_cd_destroy#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd destroy","url":"/docs/cli/defang_cd_destroy#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd cancel","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd_cancel","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd cancel","url":"/docs/cli/defang_cd_cancel#options","content":"  -h, --help help for cancel   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd cancel","url":"/docs/cli/defang_cd_cancel#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd cancel","url":"/docs/cli/defang_cd_cancel#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd","url":"/docs/cli/defang_cd#options","content":"  -h, --help help for cd   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd","url":"/docs/cli/defang_cd#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd","url":"/docs/cli/defang_cd#see-also","content":" defang - Defang CLI manages services on the Defang clusterdefang cd cancel - Cancel the current CD operationdefang cd destroy - Destroy the service stackdefang cd down - Refresh and then destroy the service stackdefang cd ls - List all the projects and stacks in the CD clusterdefang cd refresh - Refresh the service stackdefang cd teardown - Destroy the CD cluster without destroying the services  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd ls","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd_ls","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd ls","url":"/docs/cli/defang_cd_ls#options","content":"  -h, --help help for ls --remote invoke the command on the remote cluster   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd ls","url":"/docs/cli/defang_cd_ls#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd ls","url":"/docs/cli/defang_cd_ls#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd refresh","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd_refresh","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd refresh","url":"/docs/cli/defang_cd_refresh#options","content":"  -h, --help help for refresh   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd refresh","url":"/docs/cli/defang_cd_refresh#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd refresh","url":"/docs/cli/defang_cd_refresh#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd down","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd_down","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd down","url":"/docs/cli/defang_cd_down#options","content":"  -h, --help help for down   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd down","url":"/docs/cli/defang_cd_down#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd down","url":"/docs/cli/defang_cd_down#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cd teardown","type":0,"sectionRef":"#","url":"/docs/cli/defang_cd_teardown","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cd teardown","url":"/docs/cli/defang_cd_teardown#options","content":"  --force force the teardown of the CD stack -h, --help help for teardown   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cd teardown","url":"/docs/cli/defang_cd_teardown#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cd teardown","url":"/docs/cli/defang_cd_teardown#see-also","content":" defang cd - Manually run a command with the CD task (for BYOC only)  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cert","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options","content":"  -h, --help help for cert   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert","url":"/docs/cli/defang_cert#see-also","content":" defang - Defang CLI manages services on the Defang clusterdefang cert generate - Generate a TLS certificate  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options","content":"  -h, --help help for compose   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose","url":"/docs/cli/defang_compose#see-also","content":" defang - Defang CLI manages services on the Defang clusterdefang compose config - Reads a Compose file and shows the generated configdefang compose down - Like 'stop' but also deprovisions the services from the clusterdefang compose restart - Reads a Compose file and restarts its servicesdefang compose start - Reads a Compose file and deploys services to the clusterdefang compose stop - Reads a Compose file and stops its servicesdefang compose up - Like 'start' but immediately tracks the progress of the deployment  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang cert generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_cert_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang cert generate","url":"/docs/cli/defang_cert_generate#see-also","content":" defang cert - Manage certificates  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose down","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_down","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options","content":"  -d, --detach run in detached mode -h, --help help for down   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose down","url":"/docs/cli/defang_compose_down#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose config","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose config","url":"/docs/cli/defang_compose_config#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose restart","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_restart","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose restart","url":"/docs/cli/defang_compose_restart#options","content":"  -h, --help help for restart   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose restart","url":"/docs/cli/defang_compose_restart#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose restart","url":"/docs/cli/defang_compose_restart#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose stop","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_stop","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose stop","url":"/docs/cli/defang_compose_stop#options","content":"  -h, --help help for stop   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose stop","url":"/docs/cli/defang_compose_stop#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose stop","url":"/docs/cli/defang_compose_stop#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose start","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_start","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose start","url":"/docs/cli/defang_compose_start#options","content":"  --force force a build of the image even if nothing has changed -h, --help help for start   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose start","url":"/docs/cli/defang_compose_start#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose start","url":"/docs/cli/defang_compose_start#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config create","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_create","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options","content":"  -h, --help help for create   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config create","url":"/docs/cli/defang_config_create#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config ls","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_ls","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options","content":"  -h, --help help for ls   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config ls","url":"/docs/cli/defang_config_ls#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config","type":0,"sectionRef":"#","url":"/docs/cli/defang_config","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options","content":"  -h, --help help for config   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config","url":"/docs/cli/defang_config#see-also","content":" defang - Defang CLI manages services on the Defang clusterdefang config create - Adds or updates a sensitive config valuedefang config ls - List configsdefang config rm - Removes one or more config values  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang compose up","type":0,"sectionRef":"#","url":"/docs/cli/defang_compose_up","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options","content":"  -d, --detach run in detached mode --force force a build of the image even if nothing has changed -h, --help help for up   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang compose up","url":"/docs/cli/defang_compose_up#see-also","content":" defang compose - Work with local Compose files  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang generate","type":0,"sectionRef":"#","url":"/docs/cli/defang_generate","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options","content":"  -h, --help help for generate   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang generate","url":"/docs/cli/defang_generate#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang logout","type":0,"sectionRef":"#","url":"/docs/cli/defang_logout","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options","content":"  -h, --help help for logout   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang logout","url":"/docs/cli/defang_logout#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang config rm","type":0,"sectionRef":"#","url":"/docs/cli/defang_config_rm","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options","content":"  -h, --help help for rm   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang config rm","url":"/docs/cli/defang_config_rm#see-also","content":" defang config - Add, update, or delete service config  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang restart","type":0,"sectionRef":"#","url":"/docs/cli/defang_restart","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang restart","url":"/docs/cli/defang_restart#options","content":"  -h, --help help for restart   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang restart","url":"/docs/cli/defang_restart#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang restart","url":"/docs/cli/defang_restart#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang tail","type":0,"sectionRef":"#","url":"/docs/cli/defang_tail","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options","content":"  --etag string deployment ID (ETag) of the service -h, --help help for tail -n, --name string name of the service -r, --raw show raw (unparsed) logs -S, --since string show logs since duration/time --utc show logs in UTC timezone (ie. TZ=UTC)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang tail","url":"/docs/cli/defang_tail#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang services","type":0,"sectionRef":"#","url":"/docs/cli/defang_services","content":"","keywords":"","version":"Next"},{"title":"defang terms","type":0,"sectionRef":"#","url":"/docs/cli/defang_terms","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options","content":"  --agree-tos agree to the Defang terms of service -h, --help help for terms   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang terms","url":"/docs/cli/defang_terms#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang login","type":0,"sectionRef":"#","url":"/docs/cli/defang_login","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options","content":"  -h, --help help for login   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang login","url":"/docs/cli/defang_login#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options","content":"  -h, --help help for services -l, --long show more details   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang services","url":"/docs/cli/defang_services#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang token","type":0,"sectionRef":"#","url":"/docs/cli/defang_token","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options","content":"  --expires duration validity duration of the token (default 24h0m0s) -h, --help help for token --scope string scope of the token; one of [admin read tail] (required)   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang token","url":"/docs/cli/defang_token#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang version","type":0,"sectionRef":"#","url":"/docs/cli/defang_version","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options","content":"  -h, --help help for version   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang version","url":"/docs/cli/defang_version#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"defang whoami","type":0,"sectionRef":"#","url":"/docs/cli/defang_whoami","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options","content":"  -h, --help help for whoami   ","version":"Next","tagName":"h3"},{"title":"Options inherited from parent commands​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#options-inherited-from-parent-commands","content":"  -s, --cluster string Defang cluster to connect to (default &quot;fabric-prod1.defang.dev&quot;) --color color-mode colorize output; &quot;auto&quot;, &quot;always&quot; or &quot;never&quot; (default auto) -C, --cwd string change directory before running the command --debug debug logging for troubleshooting the CLI --dry-run dry run (don't actually change anything) -f, --file string compose file path -T, --non-interactive disable interactive prompts / no TTY (default true) -P, --provider provider cloud provider to use; use &quot;aws&quot; for bring-your-own-cloud (default auto) -v, --verbose verbose logging   ","version":"Next","tagName":"h3"},{"title":"SEE ALSO​","type":1,"pageTitle":"defang whoami","url":"/docs/cli/defang_whoami#see-also","content":" defang - Defang CLI manages services on the Defang cluster  Auto generated by spf13/cobra on 12-Jul-2024​ ","version":"Next","tagName":"h3"},{"title":"Accounts","type":0,"sectionRef":"#","url":"/docs/concepts/accounts","content":"","keywords":"","version":"Next"},{"title":"Creating an Account​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#creating-an-account","content":" To create an account, simply login to Defang and accept the terms of service using the CLI.  At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Accounts","url":"/docs/concepts/accounts#structure","content":" Your GitHub username will be used as your Defang username and your Defang username is used to group all your services and to generate domains for your services with the following structure:  &lt;username&gt;-&lt;servicename&gt;--&lt;port&gt;.prod1.defang.dev   warning Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.  info We plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future. ","version":"Next","tagName":"h2"},{"title":"AI","type":0,"sectionRef":"#","url":"/docs/concepts/ai","content":"","keywords":"","version":"Next"},{"title":"Example Prompts​","type":1,"pageTitle":"AI","url":"/docs/concepts/ai#example-prompts","content":" Here are some example prompts that the AI assistant can help you with:  A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response.   A simple service that runs in the cloud and serves a web page   A simple flask app with one route that responds with a json object   A simple next.js app that serves a static page   A simple api with a single route built on express  ","version":"Next","tagName":"h2"},{"title":"Defang BYOC","type":0,"sectionRef":"#","url":"/docs/concepts/defang-byoc","content":"","keywords":"","version":"Next"},{"title":"AWS​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#aws","content":" info Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024.  Please read the AWS Provider documentation for more details about how the AWS provider works and how to get started.  ","version":"Next","tagName":"h2"},{"title":"Azure​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#azure","content":" info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Defang BYOC","url":"/docs/concepts/defang-byoc#gcp","content":" info We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue. ","version":"Next","tagName":"h2"},{"title":"Compose","type":0,"sectionRef":"#","url":"/docs/concepts/compose","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#how-it-works","content":" You can define your services using a compose.yaml file in the root of your project, or use the defang generate command to generate one (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services.  When you run defang up, Defang will read your compose.yaml file and deploy the services named in that file to the cloud.  ","version":"Next","tagName":"h2"},{"title":"Service Name Resolution​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#service-name-resolution","content":" One thing to keep in mind is that, at the time of this writing, Defang identifies services by the user/account name and the service name (as defined in the compose.yaml file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Compose","url":"/docs/concepts/compose#configuration","content":" If you have a service that depends on a secret like an api key, you can set that secret using the CLI:  defang config set --name MY_API_KEY   and then connect it to the service by specifying it in the compose.yaml:  services: my-service: secrets: - MY_API_KEY secrets: MY_API_KEY: external: true   Configuration &amp; Secrets Read more about configuration in the configuration page and about secrets in the secrets page. ","version":"Next","tagName":"h2"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/concepts/configuration","content":"","keywords":"","version":"Next"},{"title":"Connecting Services​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#connecting-services","content":" If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi.  Sample You can find a sample of how to set sensitive config values here.  ","version":"Next","tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"Configuration","url":"/docs/concepts/configuration#providers","content":" Here are the different ways sensitive config values are stored depending on the provider you are using:  AWS ","version":"Next","tagName":"h2"},{"title":"Defang Playground","type":0,"sectionRef":"#","url":"/docs/concepts/defang-playground","content":"","keywords":"","version":"Next"},{"title":"Limitations​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#limitations","content":" There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC.  ","version":"Next","tagName":"h2"},{"title":"No Custom Domain Support​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#no-custom-domain-support","content":" When you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own domains to Defang Playground services.  ","version":"Next","tagName":"h3"},{"title":"Max Resources​","type":1,"pageTitle":"Defang Playground","url":"/docs/concepts/defang-playground#max-resources","content":" Services: 5CPUs: 2Memory: 8GBReplicas: 2 ","version":"Next","tagName":"h3"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/docs/concepts/deployments","content":"","keywords":"","version":"Next"},{"title":"Deploying Updates​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#deploying-updates","content":" When you run a deployment to update one or more services, Defang will also make sure to get your new services up and running before deprovisioning any old services so you don't have to worry about downtime.  info In Defang BYOC, Defang will use your cloud provider account to build and store your images. In Defang Playground we will build and store your images for you.  warning Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates.  ","version":"Next","tagName":"h2"},{"title":"Instance Types​","type":1,"pageTitle":"Deployment","url":"/docs/concepts/deployments#instance-types","content":" Defang defaults to &quot;spot&quot; instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the 12 Factor principle of disposability.  info In the future, we may provide a way to use &quot;on-demand&quot; instances for workloads that require more stability. ","version":"Next","tagName":"h2"},{"title":"Observability","type":0,"sectionRef":"#","url":"/docs/concepts/observability","content":"","keywords":"","version":"Next"},{"title":"Tail​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#tail","content":" The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service.  defang tail --name my-service defang tail --etag ua119053ehi2   ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Observability","url":"/docs/concepts/observability#architecture","content":" In BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed. ","version":"Next","tagName":"h2"},{"title":"Portal","type":0,"sectionRef":"#","url":"/docs/concepts/portal","content":"Portal You can log into the Defang portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications. You can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. info We will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, beyond defang tail to view logs, but we're working on it!","keywords":"","version":"Next"},{"title":"Domains","type":0,"sectionRef":"#","url":"/docs/concepts/domains","content":"","keywords":"","version":"Next"},{"title":"Defang-hosted Domains​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#defang-hosted-domains","content":" To make your service accessible from the public internet with Defang-hosted domains (under defang.app), you simply expose ports in your service definition.  ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#structure","content":" Defang-hosted domains use a structure that is based on your username and service name.  PlaygroundBYOC If you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the Defang Playground, your domain will be structured as follows: https://&lt;username&gt;-&lt;service-name&gt;--&lt;port&gt;.defang.dev   ","version":"Next","tagName":"h3"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration","content":" ComposePulumi services: # [...] serviceName: ports: - mode: ingress target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Bring Your Own Domain​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#bring-your-own-domain","content":" If you are using Defang BYOC, you can bring your own custom domain to use with your services.  There are two main limitations to keep in mind when using Defang BYOC:  You can only use one domain per service.Currently you must host your domain's DNS with the provider you are using. AWS documentation on public hosted zones  NS Records If you want to use your existing DNS provider for other aspects of your system, you can do so and just point a subdomain to your provider's nameservers using NS records.  ","version":"Next","tagName":"h2"},{"title":"Sample Configuration​","type":1,"pageTitle":"Domains","url":"/docs/concepts/domains#sample-configuration-1","content":" ComposePulumi services: # [...] serviceName: domainname: example.com ports: - mode: ingress target: 3000 protocol: http  ","version":"Next","tagName":"h3"},{"title":"Networking","type":0,"sectionRef":"#","url":"/docs/concepts/networking","content":"","keywords":"","version":"Next"},{"title":"Internal Communication​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-communication","content":" You can expose ports in your service definition to allow other services to communicate with it. Similar to public communication, you can use the ports section of your service definition, but set the mode to host instead of ingress to allow other services to communicate with it through the internal network.  ","version":"Next","tagName":"h2"},{"title":"Sample Configuration​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#sample-configuration","content":" ComposePulumi services: # [...] service1: ports: - mode: host target: 3000 protocol: http   ","version":"Next","tagName":"h3"},{"title":"Internal DNS​","type":1,"pageTitle":"Networking","url":"/docs/concepts/networking#internal-dns","content":" Internal communication is handled slightly differently between the Defang Playground and Defang BYOC.  PlaygroundBYOC Internal communication between services in the Defang Playground follows the following pattern: http://&lt;username&gt;-&lt;service-name&gt;:&lt;port&gt;  ","version":"Next","tagName":"h3"},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/concepts/services","content":"Services Defang allows you deploy services defined as containers. You can define your services using a compose file or a Pulumi program. Services can be exposed to the internet or kept private, and can communicate between themselves using the following conventions for hostnames: &lt;username&gt;-&lt;service-name&gt; You can learn more about accounts and usernames in the accounts page. Service Names Service names are defined in your compose file or your Pulumi program. You can learn more about about how to define services with compose files here and services with Pulumi here. You can learn more about how services are deployed in the deployment page. info While this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions.","keywords":"","version":"Next"},{"title":"Resources","type":0,"sectionRef":"#","url":"/docs/concepts/resources","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#docker-compose","content":" services: gpu-service: deploy: replicas: 3 resources: reservations: cpus: '1.0' memory: 2048M devices: - capabilities: [&quot;gpu&quot;]   ","version":"Next","tagName":"h3"},{"title":"Pulumi​","type":1,"pageTitle":"Resources","url":"/docs/concepts/resources#pulumi","content":" const service = new defang.DefangService(&quot;gpu-service&quot;, { deploy: { replicas: 3, resources: { reservations: { cpu: 1.0, memory: 2048, devices: [{capabilities: ['gpu']}] } } } });   GPUs If you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the docker-compose documentation. This is the only supported value in the deploy.resources.reservations.devices section. ","version":"Next","tagName":"h3"},{"title":"Security","type":0,"sectionRef":"#","url":"/docs/concepts/security","content":"","keywords":"","version":"Next"},{"title":"Roles & Permissions​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#roles--permissions","content":" Defang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more.  ","version":"Next","tagName":"h2"},{"title":"Networking​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#networking","content":" Defang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required.  ","version":"Next","tagName":"h2"},{"title":"TLS​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#tls","content":" Defang automates the process of obtaining and renewing TLS certificates for your services using AWS Certificate Manager.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"Security","url":"/docs/concepts/security#secrets","content":" Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS). ","version":"Next","tagName":"h2"},{"title":"Pulumi","type":0,"sectionRef":"#","url":"/docs/concepts/pulumi","content":"","keywords":"","version":"Next"},{"title":"Defang Pulumi Provider​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#defang-pulumi-provider","content":" To get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project:  npmpnpmyarn npm i @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"Sample​","type":1,"pageTitle":"Pulumi","url":"/docs/concepts/pulumi#sample","content":" The following is a minimal example of a Pulumi program that defines a Defang service:  import * as defang from &quot;@defang-io/pulumi-defang/lib&quot;; const service = new defang.DefangService(&quot;my-service&quot;, { image: &quot;strm/helloworld-http:latest&quot;, ports: [{ target: 80, mode: &quot;ingress&quot;, protocol: &quot;http&quot;, }], });  ","version":"Next","tagName":"h2"},{"title":"Authenticating","type":0,"sectionRef":"#","url":"/docs/getting-started/authenticating","content":"Authenticating To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command: defang login This will prompt you to open a browser and log into your Defang account. For now, the only way to login is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in. warning Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.","keywords":"","version":"Next"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Install the CLI​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#install-the-cli","content":" First, you'll need to install the Defang CLI. The CLI is the primary way to interact with Defang. It allows you to create, deploy, and manage your services. You can find the different installation methods here.  ","version":"Next","tagName":"h3"},{"title":"Authenticate with Defang​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#authenticate-with-defang","content":" To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command:  defang login   info To learn more about how authentication works in defang, check out the authenticating page.  ","version":"Next","tagName":"h3"},{"title":"Agree to the terms of service​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#agree-to-the-terms-of-service","content":" Before you can deploy code you should read and agree to our the terms of service. You can do this by running:  defang terms   ","version":"Next","tagName":"h3"},{"title":"Build and Deploy Services​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#build-and-deploy-services","content":" Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  Deploy an outline using AIBuild and deploy your codeDeploy existing containersDeploy using Pulumi  ","version":"Next","tagName":"h3"},{"title":"Monitor Services​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#monitor-services","content":" By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service.  From the CLI: defang tail --name service1 From the Defang Portal: https://portal.defang.dev/  info To learn more about observability in Defang, check out the observability page.Note that the Defang Portal only displays services deployed to Defang Playground.  ","version":"Next","tagName":"h3"},{"title":"Update Services​","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#update-services","content":" To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.  info If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state. ","version":"Next","tagName":"h3"},{"title":"Build and Deploy Services","type":0,"sectionRef":"#","url":"/docs/getting-started/build-and-deploy","content":"Build and Deploy Services Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail: Create an outline using AIBuild and deploy your codeDeploy an existing containerDeploy using Pulumi","keywords":"","version":"Next"},{"title":"Installing","type":0,"sectionRef":"#","url":"/docs/getting-started/installing","content":"","keywords":"","version":"Next"},{"title":"Using Homebrew​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#using-homebrew","content":" You can easily install the Defang CLI using Homebrew. Run the following command in your terminal:  brew install DefangLabs/defang/defang   ","version":"Next","tagName":"h2"},{"title":"Using a Bash Script​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#using-a-bash-script","content":" You can install the Defang CLI using a bash script. Run the following command in your terminal:  . &lt;(curl -Ls s.defang.io/install)   The script will try to download the appropriate binary for your operating system and architecture, add it to ~/.local/bin, and add ~/.local/bin to your PATH if it's not already there, with your permission. If you do not provide permission it will print an appropriate instruction for you to follow to add it manually. You can also customize the installation directory by setting the INSTALL_DIR environment variable before running the script.  ","version":"Next","tagName":"h2"},{"title":"Using Winget​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#using-winget","content":" On Windows, you can install the Defang CLI using winget. Run the following command in your terminal:  winget install defang   ","version":"Next","tagName":"h2"},{"title":"Direct Download​","type":1,"pageTitle":"Installing","url":"/docs/getting-started/installing#direct-download","content":" You can find the latest version of the Defang CLI on the releases page. Just download the appropriate binary for your operating system and architecture, and put it somewhere in your PATH. ","version":"Next","tagName":"h2"},{"title":"Monitor a Service","type":0,"sectionRef":"#","url":"/docs/getting-started/monitor","content":"Monitor a Service By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service. From the CLI: defang tail --name service1 From the Defang Portal: https://portal.defang.dev/ info To learn more about observability in Defang, check out the observability page.Note that the Defang Portal only displays services deployed to Defang Playground.","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is Defang?​","type":1,"pageTitle":"Overview","url":"/docs/intro#what-is-defang","content":" Defang is a radically simpler way for developers to build, deploy their apps to the cloud. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly.  The Defang CLI includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine.Defang can automatically build and deploy your project with a single command. If you’re new to Defang, you can try deploying to the Defang Playground, a hosted environment to learn to use Defang with non-production workloads.Once you’re ready, you can deploy it to your own cloud account - we call this Defang BYOC. Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer. You can also use Defang to easily publish updates to your deployed application with zero downtime.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Overview","url":"/docs/intro#features","content":" Defang provides a streamlined experience to develop, deploy, observe, and update your cloud applications. Defang includes the following features:  Support for various types of applications: Web services and APIs, mobile app backends, ML services, hosting LLMs, etc.Support for your programming language of choice: Node.js, Python, Golang, or anything else you can package in a Dockerfile.Built-in AI assistant to go from natural language prompt to an outline projectAutomated Dockerfile buildsSupport for pre-built Docker containers, from public or private image registriesAbility to express your project configuration using a Docker Compose YAML fileAbility to manage encrypted configuration valuesPre-configured environments with built-in security, networking, and observabilityOne-command deploymentsSupport for GPUsSupport for Infra-as-Code via the Defang Pulumi provider ","version":"Next","tagName":"h3"},{"title":"Update Services","type":0,"sectionRef":"#","url":"/docs/getting-started/update","content":"Update Services To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped. info If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.","keywords":"","version":"Next"},{"title":"Azure","type":0,"sectionRef":"#","url":"/docs/providers/azure","content":"Azure info We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.","keywords":"","version":"Next"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/docs/faq","content":"","keywords":"","version":"Next"},{"title":"Which cloud/region is the app being deployed to?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#which-cloudregion-is-the-app-being-deployed-to","content":" In the Defang Playground the app is deployed to AWS us-west-2. In the Defang BYOC model, the region is determined by your Defang BYOC Provider settings.  ","version":"Next","tagName":"h3"},{"title":"Can I bring my own AWS or other cloud account?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-bring-my-own-aws-or-other-cloud-account","content":" Yes! Please check out the Defang BYOC documentation for more information.  ","version":"Next","tagName":"h3"},{"title":"On AWS, can I deploy to services such as EC2, EKS, or Lambda?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#on-aws-can-i-deploy-to-services-such-as-ec2-eks-or-lambda","content":" The current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources.  ","version":"Next","tagName":"h3"},{"title":"Can I access AWS storage services such as S3 or database services such as RDS? How?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-access-aws-storage-services-such-as-s3-or-database-services-such-as-rds-how","content":" Yes, you can access whatever other resources exist in the cloud account you are using as a Defang BYOC Provider.  ","version":"Next","tagName":"h3"},{"title":"Do you plan to support other clouds?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#do-you-plan-to-support-other-clouds","content":" While we currently support AWS as a Defang BYOC Provider, we plan to support other clouds in future releases, such as Azure and GCP.  ","version":"Next","tagName":"h3"},{"title":"Can I run production apps with Defang?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#can-i-run-production-apps-with-defang","content":" The Defang Playground is meant for testing and trial purposes only. Deployment of productions apps with Defang BYOC is not yet supported and disallowed by the Terms of Service. If you are interested in running production apps, please contact us.  ","version":"Next","tagName":"h3"},{"title":"I'm having trouble running the binary on my Mac. What should I do?​","type":1,"pageTitle":"FAQ","url":"/docs/faq#im-having-trouble-running-the-binary-on-my-mac-what-should-i-do","content":" MacOS users will need to allow the binary to run due to security settings: Attempt to run the binary. You'll see a security prompt preventing you from running it.Go to System Preferences &gt; Privacy &amp; Security &gt; General.In the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.Alternatively, select the option &quot;App Store and identified developers&quot; to allow all applications from the App Store and identified developers to run.  ","version":"Next","tagName":"h3"},{"title":"Warnings​","type":1,"pageTitle":"FAQ","url":"/docs/faq#warnings","content":" ","version":"Next","tagName":"h2"},{"title":"\"The folder is not empty. Files may be overwritten.\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#the-folder-is-not-empty-files-may-be-overwritten","content":" This message is displayed when you run defang generate and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running defang generate or pick a different target folder.  ","version":"Next","tagName":"h3"},{"title":"\"environment variable not found\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#environment-variable-not-found","content":" This message is displayed when you run defang compose up and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run defang compose up.  ","version":"Next","tagName":"h3"},{"title":"\"Unsupported platform\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#unsupported-platform","content":" This message is displayed when you run defang compose up and the Compose file references a platform that is not supported by Defang. Defang Beta only supports Linux operating systems.  ","version":"Next","tagName":"h3"},{"title":"\"not logged in\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#not-logged-in","content":" This message is displayed when you run defang compose config but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using defang login.  ","version":"Next","tagName":"h3"},{"title":"\"No port mode was specified; assuming 'host'\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#no-port-mode-was-specified-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port that does not specify a port mode. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the mode as ingress:  services: service1: … ports: - target: 80 mode: ingress   ","version":"Next","tagName":"h3"},{"title":"\"Published ports are not supported in ingress mode; assuming 'host'\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#published-ports-are-not-supported-in-ingress-mode-assuming-host","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and published set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the mode as ingress and remove the published setting.  ","version":"Next","tagName":"h3"},{"title":"\"TCP ingress is not supported; assuming HTTP\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#tcp-ingress-is-not-supported-assuming-http","content":" This message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and protocol set to tcp. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the protocol setting.  ","version":"Next","tagName":"h3"},{"title":"\"unsupported compose directive\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#unsupported-compose-directive","content":" This message is displayed when you run defang compose up and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior.  ","version":"Next","tagName":"h3"},{"title":"\"no reservations specified; using limits as reservations\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#no-reservations-specified-using-limits-as-reservations","content":" This message is displayed when you run defang compose up and the Compose file declares a resource with limits but no reservations. Defang will use the limits as reservations to ensure the container has enough resources. Specify reservations if you want to silence the warning or reserve a different amount of resources:  services: service1: … deploy: resources: reservations: cpus: 0.5 memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"ingress port without healthcheck defaults to GET / HTTP/1.1\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#ingress-port-without-healthcheck-defaults-to-get--http11","content":" This message is displayed when you run defang compose up and the Compose file declares an ingress with a port but no healthcheck. Defang will assume the default healthcheck of GET / HTTP/1.1 to ensure the port is healthy. Specify a healthcheck if you want to silence the warning or use a different healthcheck:  services: service1: … deploy: healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]   ","version":"Next","tagName":"h3"},{"title":"\"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#missing-memory-reservation-specify-deployresourcesreservationsmemory-to-avoid-out-of-memory-errors","content":" This message is displayed when you run defang compose up and the Compose file doesn't specify a memory reservation. If available, Defang will use the memory limit as the memory reservation. Specify a memory reservation if you want to silence the warning or reserve a different amount of memory:  services: service1: … deploy: resources: reservations: memory: 512MB   ","version":"Next","tagName":"h3"},{"title":"\"The build context contains more than 10 files\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#the-build-context-contains-more-than-10-files","content":" This message is displayed when you run defang compose up and the Compose file declares a build with a context that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the context as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the context.  ","version":"Next","tagName":"h3"},{"title":"\"AWS provider was selected, but AWS environment variables are not set\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#aws-provider-was-selected-but-aws-environment-variables-are-not-set","content":" This message is displayed when you run defang compose up with the --provider=aws but none of the AWS environment variables were not set. If you proceed, the deployment might fail.  ","version":"Next","tagName":"h3"},{"title":"\"Using Defang provider, but AWS environment variables were detected\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#using-defang-provider-but-aws-environment-variables-were-detected","content":" This message is displayed when you run defang compose up with the --provider=defang but AWS environment variables were detected. The AWS environment variables will be ignored.  ","version":"Next","tagName":"h3"},{"title":"\"secret … is not defined in the top-level secrets section\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#secret--is-not-defined-in-the-top-level-secrets-section","content":" This message is displayed when you run defang compose up and the Compose file declares a secret that is not defined in the top-level secrets section. To silence the warning, define the secret in the top-level secrets section:  services: service1: … secrets: - my_secret secrets: my_secret: external: true   ","version":"Next","tagName":"h3"},{"title":"\"unsupported secret …: not marked external:true\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#unsupported-secret--not-marked-external","content":" This message is displayed when you run defang compose up and the Compose file declares a secret that is not marked external:true. Defang only supports external secrets, managed by the defang config command. To silence the warning, mark the secret as external:true in the top-level secrets section:  … secrets: my_secret: external: true   ","version":"Next","tagName":"h3"},{"title":"Errors​","type":1,"pageTitle":"FAQ","url":"/docs/faq#errors","content":" ","version":"Next","tagName":"h2"},{"title":"\"Stack:… is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\"​","type":1,"pageTitle":"FAQ","url":"/docs/faq#stack-is-in-update_complete_cleanup_in_progress-state-and-cannot-be-updated","content":" This happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using defang version. ","version":"Next","tagName":"h3"},{"title":"AWS","type":0,"sectionRef":"#","url":"/docs/providers/aws","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#getting-started","content":" Getting started with the Defang BYOC AWS Provider is easy. First, make sure you install the latest version of the Defang CLI. Then, make sure you have properly authenticated your AWS account. The Defang CLI will automatically check for environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. If they are set, the CLI will automatically use the Defang BYOC AWS Provider using the appropriate credentials. If you have credentials in the ~/.aws/credentials file, but nothing configured in environment variables, you can use the --provider=aws flag to tell the Defang CLI to use the AWS Provider.  tip If you have the aws CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID.  warning The Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail.  ","version":"Next","tagName":"h2"},{"title":"Region​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#region","content":" The Defang BYOC AWS Provider will use the region specified in the AWS_REGION environment variable, or a profile in the ~/.aws/config file exactly as the AWS CLI would.  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#architecture","content":" Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support.  ","version":"Next","tagName":"h2"},{"title":"Secrets​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#secrets","content":" Defang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#deployment","content":" To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service.  ","version":"Next","tagName":"h3"},{"title":"Runtime​","type":1,"pageTitle":"AWS","url":"/docs/providers/aws#runtime","content":" The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services. ","version":"Next","tagName":"h3"},{"title":"GCP","type":0,"sectionRef":"#","url":"/docs/providers/gcp","content":"GCP info We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue.","keywords":"","version":"Next"},{"title":"Samples","type":0,"sectionRef":"#","url":"/docs/samples","content":"Samples Check out our sample projects here to get some inspiration and get a sense of how defang works. Search samples Loading samples...","keywords":"","version":"Next"},{"title":"Deploy container using the CLI","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-container-using-the-cli","content":"Deploy container using the CLI This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang. Step 1 - Docker Compose If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this: version: '3.9' services: service1: # This is just an example, replace with the image you want image: &quot;docker.io/nginx:latest&quot; ports: - mode: ingress target: 3000 Step 2 - Deploy defang compose up ","keywords":"","version":"Next"},{"title":"Deploy Code Using a Docker Compose File","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-code-compose","content":"Deploy Code Using a Docker Compose File This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder. If you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file. Step 1 - Create main.js Let's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called main.js with the following content: const http = require('http'); const server = http.createServer((req, res) =&gt; { res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Welcome to Defang\\n'); }); server.listen(3000, '0.0.0.0', () =&gt; { console.log('Server running at http://127.0.0.1:3000/'); }); Step 2 - Create Dockerfile Let's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called Dockerfile with the following content: # Use an official Node runtime based on Alpine as a parent image FROM node:18-alpine # Set the working directory to /app WORKDIR /app # Copy the current directory contents into the container at /app COPY . . # Run the app when the container launches ENTRYPOINT [ &quot;node&quot;, &quot;main.js&quot; ] Step 3 - Create compose.yaml Let's create a Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called compose.yaml with the following content: version: '3.9' services: minimal: build: context: . dockerfile: Dockerfile ports: - mode: ingress target: 3000 Step 4 - Deploy Now that we have the code and the Docker Compose file, we can deploy the service using the defang compose up command. This will bundle the code into a container and deploy it with Defang. If you have cloud credentials configured, the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to Defang Playground. defang compose up ","keywords":"","version":"Next"},{"title":"Deploy using Pulumi","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-using-pulumi","content":"","keywords":"","version":"Next"},{"title":"Installing Dependencies​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#installing-dependencies","content":" Make sure to install the Pulumi CLI and the Defang CLI.  Make sure you are logged into the Defang CLI. Don't worry about the Pulumi CLI for now.  ","version":"Next","tagName":"h2"},{"title":"Project Directory Setup​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#project-directory-setup","content":" Create a new directory for your project and navigate to it.  mkdir project &amp;&amp; cd project   If you're familiar with Pulumi and/or are already logged in with the Pulumi CLI, you can skip the next step.  If you are new to pulumi and/or don't have an account, you can &quot;login&quot; to the filesystem by running the following command:  pulumi login file://./   This will make the Pulumi CLI store the state of your infrastructure in the current directory.  ","version":"Next","tagName":"h2"},{"title":"Initialize the Project​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#initialize-the-project","content":" Run the following command to set your encryption passphrase for this terminal session:  export PULUMI_CONFIG_PASSPHRASE=&quot;super-secure-passphrase&quot;   Now let's initialize the Pulumi project:  pulumi new typescript -y --force   This will create a new Pulumi project in the current directory and will create a Pulumi stack called dev by default. We use the --force flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI).  Run the following command to add to the .gitignore file:  echo &quot;.pulumi&quot; &gt;&gt; .gitignore   ","version":"Next","tagName":"h2"},{"title":"Install the Defang Provider​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#install-the-defang-provider","content":" Run the following command to install the Defang provider:  npm install @defang-io/pulumi-defang   ","version":"Next","tagName":"h2"},{"title":"Write the Pulumi Code​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#write-the-pulumi-code","content":" Your index.ts file should look like this:  import * as defang from '@defang-io/pulumi-defang/lib'; export const service = new defang.DefangService('minio', { name: 'minio', image: 'quay.io/minio/minio', // starts the server with the console address set to :9001 command: ['server', '--console-address', ':9001', '/data'], // Set the root username environment: { MINIO_ROOT_USER: 'minio', }, secrets: [ // Set the root password as a secret which will be encrypted at rest { source: 'MINIO_ROOT_PASSWORD', value: 'minio123', }, ], // Run a healthcheck every 30 seconds healthcheck: { test: ['CMD', 'curl', 'http://localhost:9000/minio/health/live'], interval: 30, timeout: 5, retries: 3, }, // Expose the server on port 9000 and the console on port 9001 ports: [ { target: 9000, protocol: 'http', mode: 'ingress', }, { target: 9001, protocol: 'http', mode: 'ingress', }, ], });   ","version":"Next","tagName":"h2"},{"title":"Deploy to Defang​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#deploy-to-defang","content":" warning At the time of writing, the Defang Pulumi Provider only works with Defang Playground. We are working on BYOC support.  Run the following command to deploy your service:  pulumi up --stack=dev   ","version":"Next","tagName":"h2"},{"title":"Monitor the Deployment​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#monitor-the-deployment","content":" You can monitor the deployment by running the following command:  defang tail --name minio   ","version":"Next","tagName":"h2"},{"title":"Logging Into Minio​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#logging-into-minio","content":" The Defang Playground will give you a domain, which you can obtain by running the following command:  defang ls | grep 'minio.*9001'   If you navigate to the domain in your browser, you will be prompted to log in. Use the username minio and the password minio123.  ","version":"Next","tagName":"h2"},{"title":"Clean Up​","type":1,"pageTitle":"Deploy using Pulumi","url":"/docs/tutorials/deploy-using-pulumi#clean-up","content":" To clean up the deployment, run the following command:  pulumi destroy --stack=dev  ","version":"Next","tagName":"h2"},{"title":"Deploy an outline using AI","type":0,"sectionRef":"#","url":"/docs/tutorials/generate-new-code-using-ai","content":"","keywords":"","version":"Next"},{"title":"Step 1 - Use the CLI generate command​","type":1,"pageTitle":"Deploy an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-1---use-the-cli-generate-command","content":" defang generate ? Choose the language you'd like to use: [Use arrows to move, type to filter, ? for more help] &gt; Nodejs Golang Python ? Choose a sample service: Generate with AI ? Please describe the service you'd like to build: [? for help] A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { &quot;status&quot;: &quot;OK&quot; }. The /echo endpoint will echo back all request parameters in the response. ? What folder would you like to create the service in? [? for help] (service1) project1   This will generate the different files required to start your project based on your prompt and the language selected.  ","version":"Next","tagName":"h2"},{"title":"Step 2 - Review the Code​","type":1,"pageTitle":"Deploy an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-2---review-the-code","content":" Change into the new project folder:  cd project1   You can open the files in a code editor to review or make changes as needed before deploying the service.  ","version":"Next","tagName":"h2"},{"title":"Step 3 - Build and Deploy​","type":1,"pageTitle":"Deploy an outline using AI","url":"/docs/tutorials/generate-new-code-using-ai#step-3---build-and-deploy","content":" defang compose up  ","version":"Next","tagName":"h2"},{"title":"How to Use Your Own Domain","type":0,"sectionRef":"#","url":"/docs/tutorials/use-your-own-domain-name","content":"","keywords":"","version":"Next"},{"title":"Step 1 : Check your Defang BYOC settings​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-1--check-your-defang-byoc-settings","content":" Make sure you install the latest version of the Defang CLIThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.  If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode):  aws sts get-caller-identity   ","version":"Next","tagName":"h2"},{"title":"Step 2: Setup a Hosted Zone in AWS Route 53​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-2-setup-a-hosted-zone-in-aws-route-53","content":" info If you purchased your domain with AWS, you can skip this step.  For Defang to be able to manage your domain, you need to create a public hosted zone in AWS Route 53. It should list four AWS nameservers and should look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 3: Configure your DNS settings in your domain registrar​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-3-configure-your-dns-settings-in-your-domain-registrar","content":" info If you purchased your domain with AWS, you can skip this step.  You'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:    ","version":"Next","tagName":"h2"},{"title":"Step 4: Set up Your Compose File​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-4-set-up-your-compose-file","content":" In your compose file, specify the domain name you want to use, for example  services: web: domainname: nextjs.defang.chewydemos.com build: context: ./web dockerfile: Dockerfile ports: target: 3000 mode: ingress   ","version":"Next","tagName":"h2"},{"title":"Step 5: Deploy​","type":1,"pageTitle":"How to Use Your Own Domain","url":"/docs/tutorials/use-your-own-domain-name#step-5-deploy","content":" Run the following command to deploy your service:  defang compose up   This will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your compose file.   ","version":"Next","tagName":"h2"},{"title":"Use Cases","type":0,"sectionRef":"#","url":"/docs/use-cases","content":"","keywords":"","version":"Next"},{"title":"Web Services and APIs​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#web-services-and-apis","content":" Defang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI assistant to help you get started.  Defang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring networking, security, and observability, and will give you a nice, horizontally scalable deployment.  If you are using Defang BYOC, you can easily connect to databases, storage, and other services that you have running in your cloud account.  ","version":"Next","tagName":"h2"},{"title":"Mobile App Backends​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#mobile-app-backends","content":" A mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend.  ","version":"Next","tagName":"h2"},{"title":"Hosting LLMs​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#hosting-llms","content":" LLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy.  Anti-patterns  While Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are 12 Factor anti-patterns. Here are some examples:  ","version":"Next","tagName":"h2"},{"title":"Stateful Services​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#stateful-services","content":" Some applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because containers are ephemeral and can be replaced at any time.  ","version":"Next","tagName":"h2"},{"title":"Data Stores​","type":1,"pageTitle":"Use Cases","url":"/docs/use-cases#data-stores","content":" Defang is not a good fit for data stores like databases, caches, and message queues. These types of services are designed to be long-lived and to store data. Defang is primarily designed for stateless workloads, and it's not a good fit for stateful workloads: if a container is replaced, all the data in it is lost. You could probably coerce a data store to work in a stateless environment with certain replication strategies, but it's not a good fit. ","version":"Next","tagName":"h2"},{"title":"Deploy a GPU-powered application with Defang","type":0,"sectionRef":"#","url":"/docs/tutorials/deploy-with-gpu","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#prerequisites","content":" ","version":"Next","tagName":"h2"},{"title":"AWS Account with GPU Access​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#aws-account-with-gpu-access","content":" For any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the &quot;Service Quotas&quot; console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are &quot;All G and VT spot instances&quot;.  Timing This process can take a few days for AWS to approve.    ","version":"Next","tagName":"h3"},{"title":"HuggingFace Token​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#huggingface-token","content":" This sample requires a HugoingFace token to download the model. You can get a token by signing up at HuggingFace and then going to your settings to get your token.  ","version":"Next","tagName":"h3"},{"title":"Step 1: Clone the sample project​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-1-clone-the-sample-project","content":" You'll need to clone this sample to go through this tutorial.  ","version":"Next","tagName":"h2"},{"title":"Step 2: Check your Defang BYOC settings​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-2-check-your-defang-byoc-settings","content":" Make sure you install the latest version of the Defang CLIThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.  If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode):  aws sts get-caller-identity   ","version":"Next","tagName":"h2"},{"title":"Step 2: Prepare your Environment​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-2-prepare-your-environment","content":" Log into your Defang account  defang login   Set the HuggingFace token using the defang config command  defang config set --name HF_TOKEN   Configuration stores your sensitive information such as API keys, passwords, and other credentials for you.  ","version":"Next","tagName":"h2"},{"title":"Step 3: Explore the Compose File​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-3-explore-the-compose-file","content":" The compose.yml file is where you define your services and their configurations.  ","version":"Next","tagName":"h2"},{"title":"The Mistral Service​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#the-mistral-service","content":" In there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects.  services: mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest ports: - mode: host target: 8000 command: [&quot;--host&quot;,&quot;0.0.0.0&quot;,&quot;--model&quot;,&quot;TheBloke/Mistral-7B-Instruct-v0.2-AWQ&quot;,&quot;--quantization&quot;,&quot;awq&quot;,&quot;--dtype&quot;,&quot;auto&quot;,&quot;--tensor-parallel-size&quot;,&quot;1&quot;,&quot;--gpu-memory-utilization&quot;,&quot;.95&quot;,&quot;--max-model-len&quot;,&quot;8000&quot;] deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;] healthcheck: test: [&quot;CMD&quot;,&quot;curl&quot;,&quot;http://localhost:8000/v1/models&quot;] interval: 5m timeout: 30s retries: 10 environment: - HF_TOKEN   Let's break it down.  We start with the latest vLLM docker image provided by Mistral AI.  mistral: image: ghcr.io/mistralai/mistral-src/vllm:latest   We specify that we require a GPU to run our application.  deploy: resources: reservations: cpus: '2.0' memory: 8192M devices: - capabilities: [&quot;gpu&quot;]   The Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the HF_TOKEN configuration value from Defang.  Specifying the HF_TOKEN in the environment section of the service in the compose.yml file tells Defang to fetch the value from the encrypted configuration store.  environment: - HF_TOKEN   ","version":"Next","tagName":"h3"},{"title":"The UI Service​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#the-ui-service","content":" In this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000.  Networking You can see here how Defang's networking works. The mistral service is available at http://mistral:8000, exactly as it would be in a local docker-compose environment.   ui: restart: unless-stopped build: context: ui dockerfile: Dockerfile ports: - mode: ingress target: 3000 deploy: resources: reservations: memory: 256M healthcheck: test: [&quot;CMD&quot;,&quot;wget&quot;,&quot;--spider&quot;,&quot;http://localhost:3000&quot;] interval: 10s timeout: 2s retries: 10 environment: - OPENAI_BASE_URL=http://mistral:8000/v1/   ","version":"Next","tagName":"h3"},{"title":"Step 4: Deploy to Your Own AWS Account with Defang​","type":1,"pageTitle":"Deploy a GPU-powered application with Defang","url":"/docs/tutorials/deploy-with-gpu#step-4-deploy-to-your-own-aws-account-with-defang","content":" Run the following command to deploy your service:  defang compose up  ","version":"Next","tagName":"h2"},{"title":"Defang with Codespaces and GitPod","type":0,"sectionRef":"#","url":"/docs/tutorials/using-codespaces-gitpod","content":"","keywords":"","version":"Next"},{"title":"Getting Started with Github Codespaces and Defang​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#getting-started-with-github-codespaces-and-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Clone the Defang Codespace Project​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-1-clone-the-defang-codespace-project","content":" Start by cloning the Defang Github-Codespace repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Create a Codespace​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-2-create-a-codespace","content":" Once you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.    ","version":"Next","tagName":"h3"},{"title":"Step 3: Open in VS Code Desktop​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-3-open-in-vs-code-desktop","content":" For the defang login command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.    ","version":"Next","tagName":"h3"},{"title":"Step 4: Run Defang Login​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-4-run-defang-login","content":" Within a VS Code desktop terminal, execute the following command.  defang login   Although it may initially refuse to connect on your localhost, going back will show a &quot;successfully logged in&quot; message, confirming that you're logged into Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 5: Verify Running Services​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-5-verify-running-services","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services.  ","version":"Next","tagName":"h3"},{"title":"Getting Started with GitPod Workspace with Defang​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#getting-started-with-gitpod-workspace-with-defang","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Clone the Defang GitPod Workspace Project​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-1-clone-the-defang-gitpod-workspace-project","content":" Start by cloning the Defang Gitpod-Workspace repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Initialize GitPod Workspace​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-2-initialize-gitpod-workspace","content":" Navigate https://gitpod.io/#&lt;your-repo-url&gt; to create your new workspace. In the repository, we have a yaml file indicating that we are using a pre-built dockerfile which installs Defang CLI for you.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Lauch VS Code from GitPod​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-3-lauch-vs-code-from-gitpod","content":" Open VS Code from GitPod, you will likely need to have the GitPod VS Code extension installed.      ","version":"Next","tagName":"h3"},{"title":"Step 4: Run Defang Login​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-4-run-defang-login-1","content":" Within a VS Code desktop terminal, execute the following command.  defang login   ","version":"Next","tagName":"h3"},{"title":"Step 5: Verify Running Services​","type":1,"pageTitle":"Defang with Codespaces and GitPod","url":"/docs/tutorials/using-codespaces-gitpod#step-5-verify-running-services-1","content":" Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}